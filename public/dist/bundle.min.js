function saveLocal(n,t){localStorage[n]=t}function getLocal(n){return localStorage[n]}function deleteLocal(n){localStorage.removeItem(n)}var app=angular.module("Application",["ui.router","ngResource","ngMessages","ngAnimate","ngMaterial","ngLetterAvatar"]);angular.module("Application").run(["$rootScope","$state","$mdToast","$state",function(n,t,e,t){n.go=function(n,e){t.go(n,e)},n.showSimpleToast=function(n){e.show(e.simple().textContent(n).position("top right").hideDelay(3e3))},n.statify=function(n,e){return e?t.href(n+"."+e.toLowerCase()):""}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,t,e,a){var o=function(n){getLocal("user")||n.go("login")};o.$inject=["$rootScope"],n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getLocal("user")&&n.go("application.dashboard")}],templateUrl:"/views/_login/main.html",controller:"LoginCtrl"}).state("application",{url:"",onEnter:o,templateUrl:"/views/_application/main.html",controller:"ApplicationCtrl","abstract":!0}).state("application.dashboard",{url:"/",onEnter:o,views:{content:{templateUrl:"/views/_application/_dashboard/main.html",controller:"DashboardCtrl"}}}).state("application.zones",{url:"/zones",onEnter:o,views:{content:{templateUrl:"/views/_application/_zones/main.html",controller:"ZonesCtrl"}}}).state("application.tasks",{url:"/tasks",onEnter:o,views:{content:{templateUrl:"/views/_application/_tasks/main.html",controller:"TasksCtrl"}}}).state("application.magnitudes",{url:"/magnitudes",onEnter:o,views:{content:{templateUrl:"/views/_application/_magnitudes/main.html"}},"abstract":!0}).state("application.magnitudes.list",{url:"",onEnter:o,views:{inner:{templateUrl:"/views/_application/_magnitudes/list.html",controller:"MagnitudesCtrl"}}}).state("application.magnitudes.create",{url:"/create",onEnter:o,views:{inner:{templateUrl:"/views/_application/_magnitudes/create.html",controller:"CreateMagnitudeCtrl"}}}),t.otherwise("/login"),e.interceptors.push("AuthInterceptor"),a.theme("smartTheme").primaryPalette("orange").accentPalette("yellow")}]),angular.module("Application").controller("ApplicationCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,t,e,a){t.user={},t.array_colors=Array.apply(null,Array(27)).map(function(){return"#FF9800"}),t.closePopoverMain=function(){t.showMain=!1},t.closePopoverOptions=function(){t.showOptions=!1},this.WhoIAm=function(){e.whoiam()._(a.OneData("email",function(n){t.user.email=n}),a.Error())},this.WhoIAm(),t.logout=function(){e.logout()._(function(t){console.log(t),deleteLocal("user"),n.go("login")},a.Error())}}]),angular.module("Application").controller("DashboardCtrl",function(){}),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,t,e,a){t.user={email:"",password:""},t.login=function(){var o=t.user;""!==o.email&&o.password&&e.login()._(o,a.OneData("token",function(t){saveLocal("user",t),n.go("application.dashboard")}),a.Error())}}]),angular.module("Application").controller("MagnitudesCtrl",["$scope","$rootScope","MagnitudeService","RequestService",function(n,t,e,a){n.create=function(){t.go("application.magnitudes.create")};var o=["ANALOG","DIGITAL"],i=["record","adjust"];n.Icon=function(n){return"mdi-"+i[n]},n.Type=function(n){return o[n]},n["delete"]=function(t){e.Basic().del({id:t},a.Seq(function(t){n.magnitudes=t}),a.Error())},this.All=function(){e.Basic().all(a.Seq(function(t){n.magnitudes=t}),a.Error())},this.All()}]),angular.module("Application").controller("CreateMagnitudeCtrl",["$rootScope","$scope","MagnitudeService","RequestService",function(n,t,e,a){t.goBack=function(){n.go("application.magnitudes.list")},t.magnitude={display_name:"",type:"0"},t.create=function(){var n=angular.copy(t.magnitude);""==n.display_name&&(n.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),e.Basic()["new"](n,a.Message(t.goBack),a.Error())}}]),angular.module("Application").controller("TasksCtrl",function(){}),angular.module("Application").controller("ZonesCtrl",function(){}),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/main.html",'<ng-include src="\'/views/_application/__utils/popover-main.html\'"></ng-include>\n<ng-include src="\'/views/_application/__utils/popover-user.html\'"></ng-include>\n<div layout="row" flex>\n    <md-sidenav layout="column" flex="20" class="md-sidenav-left md-whiteframe-z2"  id="sidebar" md-component-id="left" md-is-locked-open="$mdMedia(\'gt-sm\')"  md-theme="smartTheme">\n        <header class="md-whiteframe-2dp">\n            <md-toolbar layout="row" ng-init="showMain=false">\n                <a class="md-toolbar-tools" flex="80" ng-href="{{statify(\'application\', titleMain)}}" layout="row">\n                    <i class="icon house_with_garden_36" flex="20"></i>\n                    <span flex>{{titleMain}}</span>\n\n                </a>\n                <md-button aria-label="Open main menu" class="md-icon-button" flex ng-click="showMain=!showMain; showOptions=false">\n                    <md-icon  md-font-icon="mdi-apps" class="mdi"></md-icon>\n                </md-button>\n\n\n            </md-toolbar>\n\n        </header>\n\n        <md-content>\n            <md-subheader class="md-primary" layout="row" ng-init="showOptions=false" layout-align="center center" ng-click="showOptions=!showOptions; showMain=false">\n                <span flex>{{user.email}}\n                </span>\n                <md-icon md-font-icon="mdi-chevron-down" class="mdi md-primary" flex ></md-icon>\n            </md-subheader>\n\n\n        </md-content>\n\n    </md-sidenav>\n\n\n    <div flex layout="column">\n        <div ui-view="content" flex></div>\n\n        <div flex class="footer">\n            <md-divider></md-divider>\n            <md-toolbar layout="row">\n             \n                    <h6 flex-offset="85"><i class="mdi mdi-copyright"></i><span>Smart Town 2016</span></h6>\n           \n\n            </md-toolbar>\n\n        </div>\n\n    </div>\n</div>\n\n\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_login/main.html",'<ui-title>Sign in</ui-title>\n\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="smartTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><i class="icon house_with_garden_72"></i><br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Log in to your account</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Email</label>\n\n                    <input type="email" required name="email" ng-model="user.email" ng-pattern="/^.+@.+\\..+$/" >\n                    <div ng-messages="loginForm.email.$error" multiple md-auto-hide="false" ng-if=\'loginForm.email.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Password</label>\n\n                    <input ng-model="user.password" type="password" name="password" required>\n                    <div ng-messages="loginForm.password.$error" md-auto-hide="false" ng-if="loginForm.password.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="login()" flex flex-sm="100" ng>Login</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="mdi mdi-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/main.html","<ui-title>Dashboard</ui-title>\n\n\nhello world")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Magnitude</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="magnitude.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>System Type</h3>\n            <p>Working with real numbers or with on(1) or off(0)</p>\n        </div>\n\n        <md-radio-group ng-model="magnitude.type" flex="50" flex-offset="30">\n            <md-radio-button value="0" class="md-primary">Analog</md-radio-button>\n            <md-radio-button value="1" class="md-primary">Digital</md-radio-button>\n        </md-radio-group>\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-click="create()">Create Magnitude</md-button>\n    </div>\n</md-content>\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" placeholder="Filter magnitudes">\n        </md-input-container>\n\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n\n    <md-list  ng-cloak class="magnitude-list">\n        <md-list-item  ng-repeat="magnitude in magnitudes">\n            <md-icon  md-font-icon="{{Icon(magnitude.type)}}" class="mdi magnitude-type-icon"></md-icon>  \n            <p> {{ magnitude.display_name }} </p>\n            \n            <p  flex-offset="30"><span class="md-whiteframe-1dp" ng-class="{\'badge\':magnitude.type===\'0\', \'badge-negative\':magnitude.type===\'1\'}">{{Type(magnitude.type)}}</span></p>\n            <md-button class="md-icon-button" aria-label="Delete" ng-click="delete(magnitude.id)">\n                <i class=" mdi mdi-delete" ></i>\n            </md-button>\n\n            <md-divider ng-if="!$last"></md-divider>\n\n        </md-list-item>\n\n    </md-list>\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/main.html",'<ui-title>Magnitudes</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_tasks/main.html","<ui-title>Tasks</ui-title>\nhello tasks")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/main.html","<ui-title>Zones</ui-title>\nHello zones")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-main.html",'<div class="popover-layer" ng-if="showMain" ng-click="closePopoverMain()"></div>\n\n\n<div class="popover-main md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showMain}" ng-if="showMain">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column"   ui-sref="application.dashboard" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-bowling" class="mdi" flex></md-icon>\n            <span flex> Dashboard</span>\n\n        </a>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.zones" layout-align="space-around center">\n\n            <md-icon  md-font-icon="mdi-basecamp" class="mdi" flex></md-icon>\n            <span flex>Zones</span>\n        </a>\n    </div>\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.tasks" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-alarm-check" class="mdi" flex></md-icon>\n            <span flex>Tasks</span>\n        </a>\n        <a class="popover-main-link" flex layout="column"  ui-sref="application.magnitudes.list" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-beer" class="mdi" flex></md-icon>\n            <span flex>Magnitudes</span>\n        </a>\n    </div>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-user.html",'<div class="popover-layer" ng-if="showOptions" ng-click="closePopoverOptions()"></div>\n<div class="popover-user-options md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showOptions}" ng-if="showOptions">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div layout="column" layout-align="space-between none" class="popover-content">\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-account-circle" flex="40"></i>\n            <span  flex>Account</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-football-helmet" flex="40"></i>\n            <span flex>Invite</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-power" flex="40"></i>\n            <span ng-click="logout()" flex>Logout</span>\n\n        </a>\n\n    </div>\n\n\n</div>')}])}(),angular.module("Application").directive("uiTitle",["$rootScope",function(n){return{restrict:"E",compile:function(t){var e=t[0].innerText;n.titleMain=e,t.attr("class","hide"),t.empty()}}}]),angular.module("Application").filter("nofirst",function(){return function(n){return n?n.slice(1):""}}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,t){return{env:-1==t.absUrl().indexOf("localhost")?"prod":"dev",prod:{protocol:"https",host:"smart-town-db.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5060",root:"api"},getApiPath:function(n){var t=this[this.env];return t.protocol+"://"+t.host+(""!==t.port?":"+t.port:"")+"/"+t.root+"/"+n},rest:function(t,e,a){var o=n(this.getApiPath(t),a||{},e||{});return o}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,t){return{request:function(n){n.headers=n.headers||{};var t=getLocal("user");return!n.headers.Authorization&&t&&(n.headers.Authorization=t),n},requestError:function(t){return n.reject(t)},response:function(t){return"ERROR"===t.data.status?n.reject(t):t||n.when(t)},responseError:function(e){return 403===e.status?(console.error("Error de acceso"),localStorage.user="",void t.path("/")):n.reject(e)}}}]),angular.module("Application").factory("MagnitudeService",["ApiService",function(n){return{base:"magnitude",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},del:{method:"DELETE",params:{id:"@id"}}})}}}]),angular.module("Application").factory("OAuthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base+"/login",{_:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{_:{method:"GET",params:{}}})},whoiam:function(){return n.rest(this.base+"/whoiam",{_:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("RequestService",["$rootScope",function(n){return{Error:function(){return function(t){n.showSimpleToast(data.error)}},OneData:function(t,e){return function(a){if(!a.data)return n.showSimpleToast("No data");var o=a.data[t];return o?void e(o):n.showSimpleToast("No Values")}},Message:function(t){return function(e){return e.message?(n.showSimpleToast(e.message),void(t&&t())):n.showSimpleToast("Successful: No Meesage")}},Seq:function(t){return function(e){if(!e.data)return n.showSimpleToast("No data");var a=e.data;t(a)}}}}]);
//# sourceMappingURL=data:application/json;base64,
