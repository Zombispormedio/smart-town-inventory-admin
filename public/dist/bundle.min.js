function saveLocal(n,t){localStorage[n]=t}function getLocal(n){return localStorage[n]}function deleteLocal(n){localStorage.removeItem(n)}var app=angular.module("Application",["ui.router","ngResource","ngMessages","ngAnimate","ngMaterial","ngLetterAvatar"]);angular.module("Application").run(["$rootScope","$state","$mdToast","$state",function(n,t,e,t){n.go=function(n,e){t.go(n,e)},n.showSimpleToast=function(n){e.show(e.simple().textContent(n).position("top right").hideDelay(3e3))},n.statify=function(n,e){return e?t.href(n+"."+e.toLowerCase()):""}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,t,e,a){var o=function(n){getLocal("user")||n.go("login")};o.$inject=["$rootScope"],n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getLocal("user")&&n.go("application.dashboard")}],templateUrl:"/views/_login/main.html",controller:"LoginCtrl"}).state("application",{url:"",onEnter:o,templateUrl:"/views/_application/main.html",controller:"ApplicationCtrl","abstract":!0}).state("application.dashboard",{url:"/",onEnter:o,views:{content:{templateUrl:"/views/_application/_dashboard/main.html",controller:"DashboardCtrl"}}}).state("application.zones",{url:"/zones",onEnter:o,views:{content:{templateUrl:"/views/_application/_zones/main.html",controller:"ZonesCtrl"}}}).state("application.tasks",{url:"/tasks",onEnter:o,views:{content:{templateUrl:"/views/_application/_tasks/main.html",controller:"TasksCtrl"}}}).state("application.magnitudes",{url:"/magnitudes",onEnter:o,views:{content:{templateUrl:"/views/_application/_magnitudes/main.html"}},"abstract":!0}).state("application.magnitudes.list",{url:"",onEnter:o,views:{inner:{templateUrl:"/views/_application/_magnitudes/list.html",controller:"MagnitudesCtrl"}}}).state("application.magnitudes.create",{url:"/create",onEnter:o,views:{inner:{templateUrl:"/views/_application/_magnitudes/create.html",controller:"CreateMagnitudeCtrl"}}}),t.otherwise("/login"),e.interceptors.push("AuthInterceptor"),a.theme("smartTheme").primaryPalette("orange").accentPalette("yellow")}]),angular.module("Application").controller("ApplicationCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,t,e,a){t.user={},t.array_colors=Array.apply(null,Array(27)).map(function(){return"#FF9800"}),t.closePopoverMain=function(){t.showMain=!1},t.closePopoverOptions=function(){t.showOptions=!1},this.WhoIAm=function(){e.whoiam()._(a.OneData("email",function(n){t.user.email=n}),a.Error())},this.WhoIAm(),t.logout=function(){e.logout()._(function(t){console.log(t),deleteLocal("user"),n.go("login")},a.Error())}}]),angular.module("Application").controller("DashboardCtrl",function(){}),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,t,e,a){t.user={email:"",password:""},t.login=function(){var o=t.user;""!==o.email&&o.password&&e.login()._(o,a.OneData("token",function(t){saveLocal("user",t),n.go("application.dashboard")}),a.Error())}}]),angular.module("Application").controller("MagnitudesCtrl",["$scope","$rootScope",function(n,t){n.create=function(){t.go("application.magnitudes.create")}}]),angular.module("Application").controller("CreateMagnitudeCtrl",["$rootScope","$scope","MagnitudeService","RequestService",function(n,t,e,a){t.goBack=function(){n.go("application.magnitudes.list")},t.magnitude={display_name:"",type:"0"},t.create=function(){var n=angular.copy(t.magnitude);""==n.display_name&&(n.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),e._()["new"](n,a.Message(t.goBack),a.Error())}}]),angular.module("Application").controller("TasksCtrl",function(){}),angular.module("Application").controller("ZonesCtrl",function(){}),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/main.html",'<ng-include src="\'/views/_application/__utils/popover-main.html\'"></ng-include>\n<ng-include src="\'/views/_application/__utils/popover-user.html\'"></ng-include>\n<div layout="row" flex>\n    <md-sidenav layout="column" flex="20" class="md-sidenav-left md-whiteframe-z2"  id="sidebar" md-component-id="left" md-is-locked-open="$mdMedia(\'gt-sm\')"  md-theme="smartTheme">\n        <header class="md-whiteframe-2dp">\n            <md-toolbar layout="row" ng-init="showMain=false">\n                <a class="md-toolbar-tools" flex="80" ng-href="{{statify(\'application\', titleMain)}}" layout="row">\n                    <i class="icon house_with_garden_36" flex="20"></i>\n                    <span flex>{{titleMain}}</span>\n\n                </a>\n                <md-button aria-label="Open main menu" class="md-icon-button" flex ng-click="showMain=!showMain; showOptions=false">\n                    <md-icon  md-font-icon="mdi-apps" class="mdi"></md-icon>\n                </md-button>\n\n\n            </md-toolbar>\n\n        </header>\n\n        <md-content>\n            <md-subheader class="md-primary" layout="row" ng-init="showOptions=false" layout-align="center center" ng-click="showOptions=!showOptions; showMain=false">\n                <span flex>{{user.email}}\n                </span>\n                <md-icon md-font-icon="mdi-chevron-down" class="mdi md-primary" flex ></md-icon>\n            </md-subheader>\n\n\n        </md-content>\n\n    </md-sidenav>\n\n\n    <div flex layout="column">\n        <div ui-view="content" flex></div>\n\n        <div flex class="footer">\n            <md-divider></md-divider>\n            <md-toolbar layout="row">\n             \n                    <h6 flex-offset="85"><i class="mdi mdi-copyright"></i><span>Smart Town 2016</span></h6>\n           \n\n            </md-toolbar>\n\n        </div>\n\n    </div>\n</div>\n\n\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_login/main.html",'<ui-title>Sign in</ui-title>\n\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="smartTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><i class="icon house_with_garden_72"></i><br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Log in to your account</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Email</label>\n\n                    <input type="email" required name="email" ng-model="user.email" ng-pattern="/^.+@.+\\..+$/" >\n                    <div ng-messages="loginForm.email.$error" multiple md-auto-hide="false" ng-if=\'loginForm.email.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Password</label>\n\n                    <input ng-model="user.password" type="password" name="password" required>\n                    <div ng-messages="loginForm.password.$error" md-auto-hide="false" ng-if="loginForm.password.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="login()" flex flex-sm="100" ng>Login</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="mdi mdi-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/main.html","<ui-title>Dashboard</ui-title>\n\n\nhello world")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Magnitude</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="magnitude.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>System Type</h3>\n            <p>Working with real numbers or with on(1) or off(0)</p>\n        </div>\n\n        <md-radio-group ng-model="magnitude.type" flex="50" flex-offset="30">\n            <md-radio-button value="0" class="md-primary">Analog</md-radio-button>\n            <md-radio-button value="1" class="md-primary">Digital</md-radio-button>\n        </md-radio-group>\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-click="create()">Create Magnitude</md-button>\n    </div>\n</md-content>\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" placeholder="Filter magnitudes">\n        </md-input-container>\n\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/main.html",'<ui-title>Magnitudes</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_tasks/main.html","<ui-title>Tasks</ui-title>\nhello tasks")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/main.html","<ui-title>Zones</ui-title>\nHello zones")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-main.html",'<div class="popover-layer" ng-if="showMain" ng-click="closePopoverMain()"></div>\n\n\n<div class="popover-main md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showMain}" ng-if="showMain">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column"   ui-sref="application.dashboard" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-bowling" class="mdi" flex></md-icon>\n            <span flex> Dashboard</span>\n\n        </a>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.zones" layout-align="space-around center">\n\n            <md-icon  md-font-icon="mdi-basecamp" class="mdi" flex></md-icon>\n            <span flex>Zones</span>\n        </a>\n    </div>\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.tasks" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-alarm-check" class="mdi" flex></md-icon>\n            <span flex>Tasks</span>\n        </a>\n        <a class="popover-main-link" flex layout="column"  ui-sref="application.magnitudes.list" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-beer" class="mdi" flex></md-icon>\n            <span flex>Magnitudes</span>\n        </a>\n    </div>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-user.html",'<div class="popover-layer" ng-if="showOptions" ng-click="closePopoverOptions()"></div>\n<div class="popover-user-options md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showOptions}" ng-if="showOptions">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div layout="column" layout-align="space-between none" class="popover-content">\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-account-circle" flex="40"></i>\n            <span  flex>Account</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-football-helmet" flex="40"></i>\n            <span flex>Invite</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-power" flex="40"></i>\n            <span ng-click="logout()" flex>Logout</span>\n\n        </a>\n\n    </div>\n\n\n</div>')}])}(),angular.module("Application").directive("uiTitle",["$rootScope",function(n){return{restrict:"E",compile:function(t){var e=t[0].innerText;n.titleMain=e,t.attr("class","hide"),t.empty()}}}]),angular.module("Application").filter("nofirst",function(){return function(n){return n?n.slice(1):""}}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,t){return{env:-1==t.absUrl().indexOf("localhost")?"prod":"dev",prod:{protocol:"https",host:"smart-town-db.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5060",root:"api"},getApiPath:function(n){var t=this[this.env];return t.protocol+"://"+t.host+(""!==t.port?":"+t.port:"")+"/"+t.root+"/"+n},rest:function(t,e,a){var o=n(this.getApiPath(t),a||{},e||{});return o}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,t){return{request:function(n){n.headers=n.headers||{};var t=getLocal("user");return!n.headers.Authorization&&t&&(n.headers.Authorization=t),n},requestError:function(t){return n.reject(t)},response:function(t){return"ERROR"===t.data.status?n.reject(t):t||n.when(t)},responseError:function(e){return 403===e.status?(console.error("Error de acceso"),localStorage.user="",void t.path("/")):n.reject(e)}}}]),angular.module("Application").factory("MagnitudeService",["ApiService",function(n){return{base:"magnitude",_:function(){return n.rest(this.base,{"new":{method:"POST",params:{}}})}}}]),angular.module("Application").factory("OAuthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base+"/login",{_:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{_:{method:"GET",params:{}}})},whoiam:function(){return n.rest(this.base+"/whoiam",{_:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("RequestService",["$rootScope",function(n){return{Error:function(){return function(t){n.showSimpleToast(data.error)}},OneData:function(t,e){return function(a){if(!a.data)return n.showSimpleToast("No data");var o=a.data[t];return o?void e(o):n.showSimpleToast("No Values")}},Message:function(t){return function(e){return e.message?(n.showSimpleToast(e.message),void(t&&t())):n.showSimpleToast("Successful: No Meesage")}}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9qYXZhc2NyaXB0cy91dGlscy5qcyIsImFwcGxpY2F0aW9uLmpzIiwiY29uZmlnL2Jvb3QuanMiLCJjb25maWcvZW52aXJvbm1lbnQuanMiLCJidW5kbGUubWluLmpzIiwiY29udHJvbGxlcnMvYXBwbGljYXRpb25fY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2Rhc2hib2FyZF9jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbG9naW5fY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL21hZ25pdHVkZXNfY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL21hZ25pdHVkZV9jcmVhdGVfY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3Rhc2tzX2NvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy96b25lc19jb250cm9sbGVyLmpzIiwiYXNzZXRzL3RlbXBsYXRlcy90ZW1wbGF0ZS1jYWNoZS5qcyIsImNvbXBvbmVudHMvZGlyZWN0aXZlcy90aXRsZV9kaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2ZpbHRlcnMvZm9ybWF0X2ZpbHRlcnMuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL2FwaV9zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9pbnRlcmNlcHRvcl9zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9tYWduaXR1ZGVfc2VydmljZS5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvb2F1dGhfc2VydmljZS5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvcmVxdWVzdF9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbInNhdmVMb2NhbCIsImtleSIsImRhdGEiLCJsb2NhbFN0b3JhZ2UiLCJnZXRMb2NhbCIsImRlbGV0ZUxvY2FsIiwicmVtb3ZlSXRlbSIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiJG1kVG9hc3QiLCJnbyIsInN0YXRlIiwicGFyYW1zIiwic2hvd1NpbXBsZVRvYXN0IiwibWVzc2FnZSIsInNob3ciLCJzaW1wbGUiLCJ0ZXh0Q29udGVudCIsInBvc2l0aW9uIiwiaGlkZURlbGF5Iiwic3RhdGlmeSIsInBhcmVudCIsImNoaWxkIiwiaHJlZiIsInRvTG93ZXJDYXNlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwidmFsaWRVc2VyIiwiJGluamVjdCIsInVybCIsIm9uRW50ZXIiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJhYnN0cmFjdCIsInZpZXdzIiwiY29udGVudCIsImlubmVyIiwib3RoZXJ3aXNlIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwiJHNjb3BlIiwiT0F1dGhTZXJ2aWNlIiwiUmVxdWVzdFNlcnZpY2UiLCJ1c2VyIiwiYXJyYXlfY29sb3JzIiwiQXJyYXkiLCJhcHBseSIsIm1hcCIsImNsb3NlUG9wb3Zlck1haW4iLCJzaG93TWFpbiIsImNsb3NlUG9wb3Zlck9wdGlvbnMiLCJzaG93T3B0aW9ucyIsInRoaXMiLCJXaG9JQW0iLCJ3aG9pYW0iLCJfIiwiT25lRGF0YSIsImVtYWlsIiwiRXJyb3IiLCJsb2dvdXQiLCJjb25zb2xlIiwibG9nIiwicGFzc3dvcmQiLCJsb2dpbiIsImNyZWF0ZSIsIk1hZ25pdHVkZVNlcnZpY2UiLCJnb0JhY2siLCJtYWduaXR1ZGUiLCJkaXNwbGF5X25hbWUiLCJ0eXBlIiwiY29weSIsImNoYW5jZSIsInNlbnRlbmNlIiwid29yZHMiLCJzcGxpdCIsImpvaW4iLCJyZXBsYWNlIiwiTWVzc2FnZSIsImUiLCIkdGVtcGxhdGVDYWNoZSIsInB1dCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwiY29tcGlsZSIsInRFbGVtZW50IiwidGl0bGUiLCJpbm5lclRleHQiLCJ0aXRsZU1haW4iLCJhdHRyIiwiZW1wdHkiLCJmaWx0ZXIiLCJpbnB1dCIsInNsaWNlIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsIiRsb2NhdGlvbiIsImVudiIsImFic1VybCIsImluZGV4T2YiLCJwcm9kIiwicHJvdG9jb2wiLCJob3N0IiwicG9ydCIsInJvb3QiLCJkZXYiLCJnZXRBcGlQYXRoIiwicGF0aCIsImFwaSIsInJlc3QiLCJtZXRob2RzIiwiZGVmYXVsdFBhcmFtcyIsInJlc291cmNlIiwiJHEiLCJyZXF1ZXN0IiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJyZXF1ZXN0RXJyb3IiLCJyZWplY3Rpb24iLCJyZWplY3QiLCJyZXNwb25zZSIsInN0YXR1cyIsIndoZW4iLCJyZXNwb25zZUVycm9yIiwiZXJyb3IiLCJBcGlTZXJ2aWNlIiwiYmFzZSIsIm5ldyIsIm1ldGhvZCIsInJlcyIsImNiIiwidmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBLFFBQUFBLFdBQUFDLEVBQUFDLEdBQ0FDLGFBQUFGLEdBQUFDLEVBR0EsUUFBQUUsVUFBQUgsR0FDQSxNQUFBRSxjQUFBRixHQUdBLFFBQUFJLGFBQUFKLEdBQ0FFLGFBQUFHLFdBQUFMLEdDVEEsR0FBQU0sS0FBQUMsUUFBQUMsT0FBQSxlQUFBLFlBQUEsYUFBQSxhQUFBLFlBQUEsYUFBQSxrQkNBQUQsU0FBQUMsT0FBQSxlQUNBQyxLQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUQsR0FFQUQsRUFBQUcsR0FBQSxTQUFBQyxFQUFBQyxHQUNBSixFQUFBRSxHQUFBQyxFQUFBQyxJQUdBTCxFQUFBTSxnQkFBQSxTQUFBQyxHQUVBTCxFQUFBTSxLQUNBTixFQUFBTyxTQUNBQyxZQUFBSCxHQUNBSSxTQUFBLGFBQ0FDLFVBQUEsT0FJQVosRUFBQWEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFBLEdBQUFkLEVBQUFlLEtBQUFGLEVBQUEsSUFBQUMsRUFBQUUsZUFBQSxPQ2xCQXBCLFFBQUFDLE9BQUEsZUFDQW9CLFFBQUEsaUJBQUEscUJBQUEsZ0JBQUEscUJBQUEsU0FBQUMs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c291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2F2ZUxvY2FsKGtleSwgZGF0YSkge1xyXG4gICAgbG9jYWxTdG9yYWdlW2tleV0gPSBkYXRhO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRMb2NhbChrZXkpIHtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2Vba2V5XTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVsZXRlTG9jYWwoa2V5KSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG59IiwidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFsndWkucm91dGVyJywgXCJuZ1Jlc291cmNlXCIsJ25nTWVzc2FnZXMnLCduZ0FuaW1hdGUnLCAnbmdNYXRlcmlhbCcsICduZ0xldHRlckF2YXRhciddKTtcclxuXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAucnVuKGZ1bmN0aW9uKCRyb290U2NvcGUsICRzdGF0ZSwgJG1kVG9hc3QsICRzdGF0ZSl7XHJcbiAgICBcclxuICAgICRyb290U2NvcGUuZ28gPSBmdW5jdGlvbiAoc3RhdGUsIHBhcmFtcykge1xyXG4gICAgICAgICRzdGF0ZS5nbyhzdGF0ZSwgcGFyYW1zKTtcclxuICAgIH07XHJcblxyXG4gICAgJHJvb3RTY29wZS5zaG93U2ltcGxlVG9hc3QgPSBmdW5jdGlvbihtZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAgIC50ZXh0Q29udGVudChtZXNzYWdlKVxyXG4gICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcclxuICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAkcm9vdFNjb3BlLnN0YXRpZnk9ZnVuY3Rpb24ocGFyZW50LCBjaGlsZCl7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkPyRzdGF0ZS5ocmVmKHBhcmVudCtcIi5cIitjaGlsZC50b0xvd2VyQ2FzZSgpKTpcIlwiO1xyXG4gICAgfVxyXG5cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGh0dHBQcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyKXtcclxuXHJcbiAgICB2YXIgdmFsaWRVc2VyPWZ1bmN0aW9uKCRyb290U2NvcGUpe1xyXG4gICAgICAgIGlmKCFnZXRMb2NhbChcInVzZXJcIikpe1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLmdvKFwibG9naW5cIik7XHJcbiAgICAgICAgfSBcclxuICAgIH07XHJcblxyXG4gICAgLyoqUm91dGVzKiovXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgIC5zdGF0ZShcImxvZ2luXCIsIHtcclxuICAgICAgICB1cmw6XCIvbG9naW5cIixcclxuICAgICAgICBvbkVudGVyOmZ1bmN0aW9uKCRyb290U2NvcGUpe1xyXG4gICAgICAgICAgICBpZihnZXRMb2NhbChcInVzZXJcIikpe1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5nbyhcImFwcGxpY2F0aW9uLmRhc2hib2FyZFwiKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOicvdmlld3MvX2xvZ2luL21haW4uaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjpcIkxvZ2luQ3RybFwiXHJcblxyXG4gICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJhcHBsaWNhdGlvblwiLCB7XHJcbiAgICAgICAgdXJsOlwiXCIsXHJcbiAgICAgICAgb25FbnRlcjp2YWxpZFVzZXIsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6Jy92aWV3cy9fYXBwbGljYXRpb24vbWFpbi5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOlwiQXBwbGljYXRpb25DdHJsXCIsXHJcbiAgICAgICAgYWJzdHJhY3Q6dHJ1ZVxyXG5cclxuICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiYXBwbGljYXRpb24uZGFzaGJvYXJkXCIsIHtcclxuICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICBvbkVudGVyOiB2YWxpZFVzZXIsXHJcbiAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvX2FwcGxpY2F0aW9uL19kYXNoYm9hcmQvbWFpbi5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXNoYm9hcmRDdHJsJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJhcHBsaWNhdGlvbi56b25lc1wiLCB7XHJcbiAgICAgICAgdXJsOiAnL3pvbmVzJyxcclxuICAgICAgICBvbkVudGVyOiB2YWxpZFVzZXIsXHJcbiAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvX2FwcGxpY2F0aW9uL196b25lcy9tYWluLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1pvbmVzQ3RybCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiYXBwbGljYXRpb24udGFza3NcIiwge1xyXG4gICAgICAgIHVybDogJy90YXNrcycsXHJcbiAgICAgICAgb25FbnRlcjogdmFsaWRVc2VyLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL19hcHBsaWNhdGlvbi9fdGFza3MvbWFpbi5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUYXNrc0N0cmwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcImFwcGxpY2F0aW9uLm1hZ25pdHVkZXNcIiwge1xyXG4gICAgICAgIHVybDogJy9tYWduaXR1ZGVzJyxcclxuICAgICAgICBvbkVudGVyOiB2YWxpZFVzZXIsXHJcbiAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvX2FwcGxpY2F0aW9uL19tYWduaXR1ZGVzL21haW4uaHRtbCcsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGFic3RyYWN0OnRydWVcclxuICAgIH0pXHJcbiAgICAuc3RhdGUoXCJhcHBsaWNhdGlvbi5tYWduaXR1ZGVzLmxpc3RcIiwge1xyXG4gICAgICAgIHVybDogJycsXHJcbiAgICAgICAgb25FbnRlcjogdmFsaWRVc2VyLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICdpbm5lcic6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL19hcHBsaWNhdGlvbi9fbWFnbml0dWRlcy9saXN0Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ01hZ25pdHVkZXNDdHJsJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgICAuc3RhdGUoXCJhcHBsaWNhdGlvbi5tYWduaXR1ZGVzLmNyZWF0ZVwiLCB7XHJcbiAgICAgICAgdXJsOiAnL2NyZWF0ZScsXHJcbiAgICAgICAgb25FbnRlcjogdmFsaWRVc2VyLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICdpbm5lcic6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL19hcHBsaWNhdGlvbi9fbWFnbml0dWRlcy9jcmVhdGUuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ3JlYXRlTWFnbml0dWRlQ3RybCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvbG9naW5cIik7XHJcblxyXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnQXV0aEludGVyY2VwdG9yJyk7XHJcblxyXG5cclxuICAgIC8qKlRoZW1lcyoqL1xyXG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdzbWFydFRoZW1lJylcclxuICAgICAgICAucHJpbWFyeVBhbGV0dGUoJ29yYW5nZScpXHJcbiAgICAgICAgLmFjY2VudFBhbGV0dGUoJ3llbGxvdycpO1xyXG5cclxuICAgXHJcbn0pO1xyXG5cclxuIiwidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFsndWkucm91dGVyJywgXCJuZ1Jlc291cmNlXCIsJ25nTWVzc2FnZXMnLCduZ0FuaW1hdGUnLCAnbmdNYXRlcmlhbCcsICduZ0xldHRlckF2YXRhciddKTtcclxuXHJcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5ydW4oW1wiJHJvb3RTY29wZVwiLCBcIiRzdGF0ZVwiLCBcIiRtZFRvYXN0XCIsIFwiJHN0YXRlXCIsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzdGF0ZSwgJG1kVG9hc3QsICRzdGF0ZSl7XHJcbiAgICBcclxuICAgICRyb290U2NvcGUuZ28gPSBmdW5jdGlvbiAoc3RhdGUsIHBhcmFtcykge1xyXG4gICAgICAgICRzdGF0ZS5nbyhzdGF0ZSwgcGFyYW1zKTtcclxuICAgIH07XHJcblxyXG4gICAgJHJvb3RTY29wZS5zaG93U2ltcGxlVG9hc3QgPSBmdW5jdGlvbihtZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAgIC50ZXh0Q29udGVudChtZXNzYWdlKVxyXG4gICAgICAgICAgICAucG9zaXRpb24oXCJ0b3AgcmlnaHRcIilcclxuICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAkcm9vdFNjb3BlLnN0YXRpZnk9ZnVuY3Rpb24ocGFyZW50LCBjaGlsZCl7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkPyRzdGF0ZS5ocmVmKHBhcmVudCtcIi5cIitjaGlsZC50b0xvd2VyQ2FzZSgpKTpcIlwiO1xyXG4gICAgfVxyXG5cclxufV0pO1xuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb25maWcoW1wiJHN0YXRlUHJvdmlkZXJcIiwgXCIkdXJsUm91dGVyUHJvdmlkZXJcIiwgXCIkaHR0cFByb3ZpZGVyXCIsIFwiJG1kVGhlbWluZ1Byb3ZpZGVyXCIsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRodHRwUHJvdmlkZXIsICRtZFRoZW1pbmdQcm92aWRlcil7XHJcblxyXG4gICAgdmFyIHZhbGlkVXNlcj1mdW5jdGlvbigkcm9vdFNjb3BlKXtcclxuICAgICAgICBpZighZ2V0TG9jYWwoXCJ1c2VyXCIpKXtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5nbyhcImxvZ2luXCIpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9O1xyXG4gICAgdmFsaWRVc2VyLiRpbmplY3QgPSBbXCIkcm9vdFNjb3BlXCJdO1xyXG5cclxuICAgIC8qKlJvdXRlcyoqL1xyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAuc3RhdGUoXCJsb2dpblwiLCB7XHJcbiAgICAgICAgdXJsOlwiL2xvZ2luXCIsXHJcbiAgICAgICAgb25FbnRlcjpbXCIkcm9vdFNjb3BlXCIsIGZ1bmN0aW9uKCRyb290U2NvcGUpe1xyXG4gICAgICAgICAgICBpZihnZXRMb2NhbChcInVzZXJcIikpe1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5nbyhcImFwcGxpY2F0aW9uLmRhc2hib2FyZFwiKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XSxcclxuICAgICAgICB0ZW1wbGF0ZVVybDonL3ZpZXdzL19sb2dpbi9tYWluLmh0bWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6XCJMb2dpbkN0cmxcIlxyXG5cclxuICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiYXBwbGljYXRpb25cIiwge1xyXG4gICAgICAgIHVybDpcIlwiLFxyXG4gICAgICAgIG9uRW50ZXI6dmFsaWRVc2VyLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOicvdmlld3MvX2FwcGxpY2F0aW9uL21haW4uaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjpcIkFwcGxpY2F0aW9uQ3RybFwiLFxyXG4gICAgICAgIGFic3RyYWN0OnRydWVcclxuXHJcbiAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcImFwcGxpY2F0aW9uLmRhc2hib2FyZFwiLCB7XHJcbiAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgb25FbnRlcjogdmFsaWRVc2VyLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL19hcHBsaWNhdGlvbi9fZGFzaGJvYXJkL21haW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ3RybCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiYXBwbGljYXRpb24uem9uZXNcIiwge1xyXG4gICAgICAgIHVybDogJy96b25lcycsXHJcbiAgICAgICAgb25FbnRlcjogdmFsaWRVc2VyLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL19hcHBsaWNhdGlvbi9fem9uZXMvbWFpbi5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdab25lc0N0cmwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcImFwcGxpY2F0aW9uLnRhc2tzXCIsIHtcclxuICAgICAgICB1cmw6ICcvdGFza3MnLFxyXG4gICAgICAgIG9uRW50ZXI6IHZhbGlkVXNlcixcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICBjb250ZW50OiB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9fYXBwbGljYXRpb24vX3Rhc2tzL21haW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVGFza3NDdHJsJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJhcHBsaWNhdGlvbi5tYWduaXR1ZGVzXCIsIHtcclxuICAgICAgICB1cmw6ICcvbWFnbml0dWRlcycsXHJcbiAgICAgICAgb25FbnRlcjogdmFsaWRVc2VyLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL19hcHBsaWNhdGlvbi9fbWFnbml0dWRlcy9tYWluLmh0bWwnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhYnN0cmFjdDp0cnVlXHJcbiAgICB9KVxyXG4gICAgLnN0YXRlKFwiYXBwbGljYXRpb24ubWFnbml0dWRlcy5saXN0XCIsIHtcclxuICAgICAgICB1cmw6ICcnLFxyXG4gICAgICAgIG9uRW50ZXI6IHZhbGlkVXNlcixcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAnaW5uZXInOiB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9fYXBwbGljYXRpb24vX21hZ25pdHVkZXMvbGlzdC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYWduaXR1ZGVzQ3RybCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICAgLnN0YXRlKFwiYXBwbGljYXRpb24ubWFnbml0dWRlcy5jcmVhdGVcIiwge1xyXG4gICAgICAgIHVybDogJy9jcmVhdGUnLFxyXG4gICAgICAgIG9uRW50ZXI6IHZhbGlkVXNlcixcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAnaW5uZXInOiB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9fYXBwbGljYXRpb24vX21hZ25pdHVkZXMvY3JlYXRlLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NyZWF0ZU1hZ25pdHVkZUN0cmwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2xvZ2luXCIpO1xyXG5cclxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpO1xyXG5cclxuXHJcbiAgICAvKipUaGVtZXMqKi9cclxuICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnc21hcnRUaGVtZScpXHJcbiAgICAgICAgLnByaW1hcnlQYWxldHRlKCdvcmFuZ2UnKVxyXG4gICAgICAgIC5hY2NlbnRQYWxldHRlKCd5ZWxsb3cnKTtcclxuXHJcbiAgIFxyXG59XSk7XHJcblxyXG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgW1wiJHJvb3RTY29wZVwiLCBcIiRzY29wZVwiLCBcIk9BdXRoU2VydmljZVwiLCBcIlJlcXVlc3RTZXJ2aWNlXCIsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgT0F1dGhTZXJ2aWNlLCBSZXF1ZXN0U2VydmljZSl7XHJcblxyXG4gICAgJHNjb3BlLnVzZXI9e307XHJcblxyXG4gICAgJHNjb3BlLmFycmF5X2NvbG9ycz1BcnJheS5hcHBseShudWxsLCBBcnJheSgyNykpLm1hcChmdW5jdGlvbigpe3JldHVybiBcIiNGRjk4MDBcIn0pO1xyXG5cclxuICAgICRzY29wZS5jbG9zZVBvcG92ZXJNYWluPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAkc2NvcGUuc2hvd01haW49ZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgICAkc2NvcGUuY2xvc2VQb3BvdmVyT3B0aW9ucz1mdW5jdGlvbigpe1xyXG4gICAgICAgJHNjb3BlLnNob3dPcHRpb25zPWZhbHNlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0aGlzLldob0lBbT1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICBPQXV0aFNlcnZpY2UuIHdob2lhbSgpLl8oUmVxdWVzdFNlcnZpY2UuT25lRGF0YShcImVtYWlsXCIsIGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAkc2NvcGUudXNlci5lbWFpbD1kYXRhO1xyXG5cclxuICAgICAgICB9KSxSZXF1ZXN0U2VydmljZS5FcnJvcigpKTsgIFxyXG5cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5XaG9JQW0oKTtcclxuXHJcbiAgICAkc2NvcGUubG9nb3V0PWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgT0F1dGhTZXJ2aWNlLmxvZ291dCgpLl8oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICBkZWxldGVMb2NhbChcInVzZXJcIik7XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLmdvKFwibG9naW5cIik7XHJcblxyXG4gICAgICAgIH0sUmVxdWVzdFNlcnZpY2UuRXJyb3IoKSk7ICBcclxuICAgIH07XHJcblxyXG5cclxufV0pO1xuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdEYXNoYm9hcmRDdHJsJyxmdW5jdGlvbigpe1xyXG4gICAgXHJcbn0pO1xuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBbXCIkcm9vdFNjb3BlXCIsIFwiJHNjb3BlXCIsIFwiT0F1dGhTZXJ2aWNlXCIsIFwiUmVxdWVzdFNlcnZpY2VcIiwgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCBPQXV0aFNlcnZpY2UsIFJlcXVlc3RTZXJ2aWNlKXtcclxuXHJcbiAgICAkc2NvcGUudXNlcj17XHJcbiAgICAgICAgZW1haWw6XCJcIixcclxuICAgICAgICBwYXNzd29yZDpcIlwiXHJcbiAgICB9XHJcblxyXG5cclxuICAgICRzY29wZS5sb2dpbj1mdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciB1c2VyPSRzY29wZS51c2VyO1xyXG4gICAgICAgIGlmKHVzZXIuZW1haWwhPT1cIlwiICYmIHVzZXIucGFzc3dvcmQpe1xyXG5cclxuICAgICAgICAgICAgT0F1dGhTZXJ2aWNlLmxvZ2luKCkuXyh1c2VyLCBSZXF1ZXN0U2VydmljZS5PbmVEYXRhKFwidG9rZW5cIiwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBzYXZlTG9jYWwoXCJ1c2VyXCIsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuZ28oXCJhcHBsaWNhdGlvbi5kYXNoYm9hcmRcIik7XHJcblxyXG4gICAgICAgICAgICB9KSxSZXF1ZXN0U2VydmljZS5FcnJvcigpKTsgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn1dKTtcbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuY29udHJvbGxlcignTWFnbml0dWRlc0N0cmwnLFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlKXtcclxuICAgICRzY29wZS5jcmVhdGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAkcm9vdFNjb3BlLmdvKFwiYXBwbGljYXRpb24ubWFnbml0dWRlcy5jcmVhdGVcIilcclxuICAgIH1cclxufV0pO1xuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdDcmVhdGVNYWduaXR1ZGVDdHJsJyxbXCIkcm9vdFNjb3BlXCIsIFwiJHNjb3BlXCIsIFwiTWFnbml0dWRlU2VydmljZVwiLCBcIlJlcXVlc3RTZXJ2aWNlXCIsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgTWFnbml0dWRlU2VydmljZSwgUmVxdWVzdFNlcnZpY2Upe1xyXG4gICAgJHNjb3BlLmdvQmFjaz1mdW5jdGlvbigpe1xyXG4gICAgICAgICRyb290U2NvcGUuZ28oXCJhcHBsaWNhdGlvbi5tYWduaXR1ZGVzLmxpc3RcIik7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLm1hZ25pdHVkZT17XHJcbiAgICAgICAgZGlzcGxheV9uYW1lOlwiXCIsIHR5cGU6XCIwXCJcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuY3JlYXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIG1hZ25pdHVkZT1hbmd1bGFyLmNvcHkoJHNjb3BlLm1hZ25pdHVkZSk7XHJcbiAgICAgXHJcbiAgICAgICAgaWYobWFnbml0dWRlLmRpc3BsYXlfbmFtZT09XCJcIil7XHJcbiAgICAgICAgICAgIG1hZ25pdHVkZS5kaXNwbGF5X25hbWU9Y2hhbmNlLnNlbnRlbmNlKHt3b3JkczogM30pLnNwbGl0KFwiIFwiKS5qb2luKFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgTWFnbml0dWRlU2VydmljZS5fKCkubmV3KG1hZ25pdHVkZSwgUmVxdWVzdFNlcnZpY2UuTWVzc2FnZSgkc2NvcGUuZ29CYWNrKSwgUmVxdWVzdFNlcnZpY2UuRXJyb3IoKSlcclxuICAgIH1cclxufV0pO1xuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdUYXNrc0N0cmwnLGZ1bmN0aW9uKCl7XHJcbiAgICBcclxufSk7XG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ1pvbmVzQ3RybCcsZnVuY3Rpb24oKXtcclxuICAgIFxyXG59KTtcbmZ1bmN0aW9uIHNhdmVMb2NhbChrZXksIGRhdGEpIHtcclxuICAgIGxvY2FsU3RvcmFnZVtrZXldID0gZGF0YTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TG9jYWwoa2V5KSB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlW2tleV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlbGV0ZUxvY2FsKGtleSkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxufVxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL19hcHBsaWNhdGlvbi9tYWluLmh0bWwnLFxuICAgICc8bmctaW5jbHVkZSBzcmM9XCJcXCcvdmlld3MvX2FwcGxpY2F0aW9uL19fdXRpbHMvcG9wb3Zlci1tYWluLmh0bWxcXCdcIj48L25nLWluY2x1ZGU+XFxuJyArXG4gICAgJzxuZy1pbmNsdWRlIHNyYz1cIlxcJy92aWV3cy9fYXBwbGljYXRpb24vX191dGlscy9wb3BvdmVyLXVzZXIuaHRtbFxcJ1wiPjwvbmctaW5jbHVkZT5cXG4nICtcbiAgICAnPGRpdiBsYXlvdXQ9XCJyb3dcIiBmbGV4PlxcbicgK1xuICAgICcgICAgPG1kLXNpZGVuYXYgbGF5b3V0PVwiY29sdW1uXCIgZmxleD1cIjIwXCIgY2xhc3M9XCJtZC1zaWRlbmF2LWxlZnQgbWQtd2hpdGVmcmFtZS16MlwiICBpZD1cInNpZGViYXJcIiBtZC1jb21wb25lbnQtaWQ9XCJsZWZ0XCIgbWQtaXMtbG9ja2VkLW9wZW49XCIkbWRNZWRpYShcXCdndC1zbVxcJylcIiAgbWQtdGhlbWU9XCJzbWFydFRoZW1lXCI+XFxuJyArXG4gICAgJyAgICAgICAgPGhlYWRlciBjbGFzcz1cIm1kLXdoaXRlZnJhbWUtMmRwXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC10b29sYmFyIGxheW91dD1cInJvd1wiIG5nLWluaXQ9XCJzaG93TWFpbj1mYWxzZVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJtZC10b29sYmFyLXRvb2xzXCIgZmxleD1cIjgwXCIgbmctaHJlZj1cInt7c3RhdGlmeShcXCdhcHBsaWNhdGlvblxcJywgdGl0bGVNYWluKX19XCIgbGF5b3V0PVwicm93XCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGhvdXNlX3dpdGhfZ2FyZGVuXzM2XCIgZmxleD1cIjIwXCI+PC9pPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxzcGFuIGZsZXg+e3t0aXRsZU1haW59fTwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8L2E+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGFyaWEtbGFiZWw9XCJPcGVuIG1haW4gbWVudVwiIGNsYXNzPVwibWQtaWNvbi1idXR0b25cIiBmbGV4IG5nLWNsaWNrPVwic2hvd01haW49IXNob3dNYWluOyBzaG93T3B0aW9ucz1mYWxzZVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxtZC1pY29uICBtZC1mb250LWljb249XCJtZGktYXBwc1wiIGNsYXNzPVwibWRpXCI+PC9tZC1pY29uPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPC9tZC10b29sYmFyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L2hlYWRlcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPG1kLWNvbnRlbnQ+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1zdWJoZWFkZXIgY2xhc3M9XCJtZC1wcmltYXJ5XCIgbGF5b3V0PVwicm93XCIgbmctaW5pdD1cInNob3dPcHRpb25zPWZhbHNlXCIgbGF5b3V0LWFsaWduPVwiY2VudGVyIGNlbnRlclwiIG5nLWNsaWNrPVwic2hvd09wdGlvbnM9IXNob3dPcHRpb25zOyBzaG93TWFpbj1mYWxzZVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPHNwYW4gZmxleD57e3VzZXIuZW1haWx9fVxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPG1kLWljb24gbWQtZm9udC1pY29uPVwibWRpLWNoZXZyb24tZG93blwiIGNsYXNzPVwibWRpIG1kLXByaW1hcnlcIiBmbGV4ID48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDwvbWQtc3ViaGVhZGVyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1jb250ZW50PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvbWQtc2lkZW5hdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPGRpdiBmbGV4IGxheW91dD1cImNvbHVtblwiPlxcbicgK1xuICAgICcgICAgICAgIDxkaXYgdWktdmlldz1cImNvbnRlbnRcIiBmbGV4PjwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8ZGl2IGZsZXggY2xhc3M9XCJmb290ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWRpdmlkZXI+PC9tZC1kaXZpZGVyPlxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtdG9vbGJhciBsYXlvdXQ9XCJyb3dcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgIFxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxoNiBmbGV4LW9mZnNldD1cIjg1XCI+PGkgY2xhc3M9XCJtZGkgbWRpLWNvcHlyaWdodFwiPjwvaT48c3Bhbj5TbWFydCBUb3duIDIwMTY8L3NwYW4+PC9oNj5cXG4nICtcbiAgICAnICAgICAgICAgICBcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgIDwvbWQtdG9vbGJhcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2xvZ2luL21haW4uaHRtbCcsXG4gICAgJzx1aS10aXRsZT5TaWduIGluPC91aS10aXRsZT5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJzxkaXYgIGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImNlbnRlciBjZW50ZXJcIiBsYXlvdXQtZmlsbCBpZD1cImxvZ2luLWJvZHlcIiBtZC10aGVtZT1cInNtYXJ0VGhlbWVcIj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIiBmbGV4LWd0LW1kPVwiMzVcIiBmbGV4LXhzPVwiNTBcIiBmbGV4LWd0LXhzPVwiNTBcIiBsYXlvdXQtcGFkZGluZz5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPGRpdiBsYXlvdXQ9XCJyb3dcIiBsYXlvdXQtYWxpZ249XCJjZW50ZXIgY2VudGVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxoMj48aSBjbGFzcz1cImljb24gaG91c2Vfd2l0aF9nYXJkZW5fNzJcIj48L2k+PGJyPlNtYXJ0IFRvd24gQWRtaW5pc3RyYXRpb248L2gyPlxcbicgK1xuICAgICcgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8bWQtY2FyZCBsYXlvdXQ9XCJyb3dcIiA+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxmb3JtIG5hbWU9XCJsb2dpbkZvcm1cIiBmbGV4IGxheW91dD1cImNvbHVtblwiIGxheW91dC1hbGlnbj1cImNlbnRlciBzdHJldGNoXCIgbGF5b3V0LXBhZGRpbmcgbGF5b3V0LW1hcmdpbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxoMyBmbGV4PkxvZyBpbiB0byB5b3VyIGFjY291bnQ8L2gzPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciAgY2xhc3M9XCJtZC1ibG9ja1wiIGZsZXg+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkVtYWlsPC9sYWJlbD5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIHJlcXVpcmVkIG5hbWU9XCJlbWFpbFwiIG5nLW1vZGVsPVwidXNlci5lbWFpbFwiIG5nLXBhdHRlcm49XCIvXi4rQC4rXFxcXC4uKyQvXCIgPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctbWVzc2FnZXM9XCJsb2dpbkZvcm0uZW1haWwuJGVycm9yXCIgbXVsdGlwbGUgbWQtYXV0by1oaWRlPVwiZmFsc2VcIiBuZy1pZj1cXCdsb2dpbkZvcm0uZW1haWwuJGRpcnR5XFwnPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlRoaXMgaXMgcmVxdWlyZWQuPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctbWVzc2FnZT1cInBhdHRlcm5cIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdXIgZW1haWwgbXVzdCBsb29rIGxpa2UgYW4gZS1tYWlsIGFkZHJlc3MuXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyICAgY2xhc3M9XCJtZC1ibG9ja1wiIGZsZXg+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlBhc3N3b3JkPC9sYWJlbD5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidXNlci5wYXNzd29yZFwiIHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzd29yZFwiIHJlcXVpcmVkPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctbWVzc2FnZXM9XCJsb2dpbkZvcm0ucGFzc3dvcmQuJGVycm9yXCIgbWQtYXV0by1oaWRlPVwiZmFsc2VcIiBuZy1pZj1cImxvZ2luRm9ybS5wYXNzd29yZC4kZGlydHlcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5UaGlzIGlzIHJlcXVpcmVkLjwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGxheW91dC1hbGlnbj1cImNlbnRlciBjZW50ZXJcIiBmbGV4PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxkaXYgbGF5b3V0PVwicm93XCIgbGF5b3V0LXNtPVwiY29sdW1uXCIgbGF5b3V0LW1hcmdpbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZFwiIHR5cGU9XCJzdWJtaXRcIiBuZy1jbGljaz1cImxvZ2luKClcIiBmbGV4IGZsZXgtc209XCIxMDBcIiBuZz5Mb2dpbjwvbWQtYnV0dG9uPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPC9mb3JtPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L21kLWNhcmQ+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8ZGl2IGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImNlbnRlciBjZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPGg1PjxpIGNsYXNzPVwibWRpIG1kaS1jb3B5cmlnaHRcIj48L2k+IFNtYXJ0IFRvd24gMjAxNjwvaDU+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL19kYXNoYm9hcmQvbWFpbi5odG1sJyxcbiAgICAnPHVpLXRpdGxlPkRhc2hib2FyZDwvdWktdGl0bGU+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnaGVsbG8gd29ybGQnKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJy92aWV3cy9fYXBwbGljYXRpb24vX21hZ25pdHVkZXMvY3JlYXRlLmh0bWwnLFxuICAgICc8bWQtdG9vbGJhciBjbGFzcz1cIm1kLXdoaXRlZnJhbWUtMWRwXCIgaWQ9XCJtYWluLXRvb2xiYXJcIj5cXG4nICtcbiAgICAnICAgIDxkaXYgY2xhc3M9XCIgdG9vbGJhci1jcmVhdGUgbWQtdG9vbGJhci10b29sc1wiIGxheW91dD1cInJvd1wiPlxcbicgK1xuICAgICcgICAgICAgIDxtZC1idXR0b24gYXJpYS1sYWJlbD1cIkdvIEJhY2tcIiBmbGV4PVwiMTBcIiBjbGFzcz1cImJ1dHRvbi1iYWNrXCIgbmctY2xpY2s9XCJnb0JhY2soKVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktY2hldnJvbi1sZWZ0XCI+PC9pPkdvIEJhY2tcXG4nICtcbiAgICAnICAgICAgICA8L21kLWJ1dHRvbj5cXG4nICtcbiAgICAnICAgICAgICA8aDIgZmxleD5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHNwYW4+TmV3IE1hZ25pdHVkZTwvc3Bhbj5cXG4nICtcbiAgICAnICAgICAgICA8L2gyPlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJzwvbWQtdG9vbGJhcj5cXG4nICtcbiAgICAnPG1kLWNvbnRlbnQgbGF5b3V0LXBhZGRpbmcgbGF5b3V0PVwiY29sdW1uXCIgbWQtdGhlbWU9XCJzbWFydFRoZW1lXCI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGxheW91dD1cInJvd1wiIGZsZXggY2xhc3M9XCJpbnB1dC1jcmVhdGVcIj5cXG4nICtcbiAgICAnICAgICAgICA8ZGl2ICBmbGV4PVwiMjBcIiAgZmxleC1vZmZzZXQ9XCI1XCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxoMz5EaXNwbGF5IE5hbWUgPGJyPihvcHRpb25hbCk8L2gzPlxcbicgK1xuICAgICcgICAgICAgICAgICA8cD5MZWF2ZSBibGFuayBhbmQgd2VcXCdsbCBjaG9vc2Ugb25lIGZvciB5b3U8L3A+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgZmxleD1cIjUwXCIgZmxleC1vZmZzZXQ9XCIxMFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJtYWduaXR1ZGUuZGlzcGxheV9uYW1lXCIgYXJpYS1sYWJlbD1cIkRpc3BsYXkgTmFtZVwiPlxcbicgK1xuICAgICcgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgPG1kLWRpdmlkZXIgPjwvbWQtZGl2aWRlcj5cXG4nICtcbiAgICAnICAgIDxkaXYgbGF5b3V0PVwicm93XCIgZmxleCBjbGFzcz1cImlucHV0LWNyZWF0ZVwiPlxcbicgK1xuICAgICcgICAgICAgIDxkaXYgIGZsZXg9XCIyMFwiICBmbGV4LW9mZnNldD1cIjVcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPGgzPlN5c3RlbSBUeXBlPC9oMz5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHA+V29ya2luZyB3aXRoIHJlYWwgbnVtYmVycyBvciB3aXRoIG9uKDEpIG9yIG9mZigwKTwvcD5cXG4nICtcbiAgICAnICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPG1kLXJhZGlvLWdyb3VwIG5nLW1vZGVsPVwibWFnbml0dWRlLnR5cGVcIiBmbGV4PVwiNTBcIiBmbGV4LW9mZnNldD1cIjMwXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1yYWRpby1idXR0b24gdmFsdWU9XCIwXCIgY2xhc3M9XCJtZC1wcmltYXJ5XCI+QW5hbG9nPC9tZC1yYWRpby1idXR0b24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1yYWRpby1idXR0b24gdmFsdWU9XCIxXCIgY2xhc3M9XCJtZC1wcmltYXJ5XCI+RGlnaXRhbDwvbWQtcmFkaW8tYnV0dG9uPlxcbicgK1xuICAgICcgICAgICAgIDwvbWQtcmFkaW8tZ3JvdXA+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICA8bWQtZGl2aWRlcj48L21kLWRpdmlkZXI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGZsZXggY2xhc3M9XCJidXR0b24tY3JlYXRlXCIgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiY2VudGVyIGNlbnRlclwiPlxcbicgK1xuICAgICcgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgbWQtcHJpbWFyeVwiIG5nLWNsaWNrPVwiY3JlYXRlKClcIj5DcmVhdGUgTWFnbml0dWRlPC9tZC1idXR0b24+XFxuJyArXG4gICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAnPC9tZC1jb250ZW50PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL19tYWduaXR1ZGVzL2xpc3QuaHRtbCcsXG4gICAgJzxtZC10b29sYmFyIGNsYXNzPVwibWQtd2hpdGVmcmFtZS0xZHBcIiBpZD1cIm1haW4tdG9vbGJhclwiPlxcbicgK1xuICAgICcgICAgPGRpdiBjbGFzcz1cIm1kLXRvb2xiYXItdG9vbHNcIiBsYXlvdXQ9XCJyb3dcIiAgbGF5b3V0LWFsaWduPVwic3RhcnQgY2VudGVyXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgbWQtbm8tZmxvYXQgY2xhc3M9XCJtZC1ibG9ja1wiIGZsZXg+IFxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtaWNvbiAgbWQtZm9udC1pY29uPVwibWRpLW1hZ25pZnlcIiBjbGFzcz1cIm1kaVwiPjwvbWQtaWNvbj4gICAgICAgICAgICAgXFxuJyArXG4gICAgJyAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRmlsdGVyIG1hZ25pdHVkZXNcIj5cXG4nICtcbiAgICAnICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1pY29uLWJ1dHRvblwiIGFyaWEtbGFiZWw9XCJNb3JlXCIgZmxleD1cIjVcIiBuZy1jbGljaz1cImNyZWF0ZSgpXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1pY29uIG1kLWZvbnQtaWNvbj1cIm1kaS1wbHVzXCIgY2xhc3M9XCJtZGlcIj48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1idXR0b24+XFxuJyArXG4gICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAnPC9tZC10b29sYmFyPicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL19hcHBsaWNhdGlvbi9fbWFnbml0dWRlcy9tYWluLmh0bWwnLFxuICAgICc8dWktdGl0bGU+TWFnbml0dWRlczwvdWktdGl0bGU+XFxuJyArXG4gICAgJzxkaXYgbGF5b3V0PVwiY29sdW1uXCIgdWktdmlldz1cImlubmVyXCI+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL190YXNrcy9tYWluLmh0bWwnLFxuICAgICc8dWktdGl0bGU+VGFza3M8L3VpLXRpdGxlPlxcbicgK1xuICAgICdoZWxsbyB0YXNrcycpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL19hcHBsaWNhdGlvbi9fem9uZXMvbWFpbi5odG1sJyxcbiAgICAnPHVpLXRpdGxlPlpvbmVzPC91aS10aXRsZT5cXG4nICtcbiAgICAnSGVsbG8gem9uZXMnKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJy92aWV3cy9fYXBwbGljYXRpb24vX191dGlscy9wb3BvdmVyLW1haW4uaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWxheWVyXCIgbmctaWY9XCJzaG93TWFpblwiIG5nLWNsaWNrPVwiY2xvc2VQb3BvdmVyTWFpbigpXCI+PC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItbWFpbiBtZC1vcGVuLW1lbnUtY29udGFpbmVyIG1kLXdoaXRlZnJhbWUtejIgbWQtY2xpY2thYmxlXCIgbmctY2xhc3M9XCJ7XFwnbWQtYWN0aXZlXFwnOnNob3dNYWlufVwiIG5nLWlmPVwic2hvd01haW5cIj5cXG4nICtcbiAgICAnICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1jYXJldFwiPlxcbicgK1xuICAgICcgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZXQtb3V0ZXJcIj48L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJldC1pbm5lclwiPjwvc3Bhbj5cXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwicG9wb3Zlci1tYWluLWl0ZW1cIiBsYXlvdXQ9XCJyb3dcIiBmbGV4PlxcbicgK1xuICAgICcgICAgICAgIDxhIGNsYXNzPVwicG9wb3Zlci1tYWluLWxpbmtcIiBmbGV4IGxheW91dD1cImNvbHVtblwiICAgdWktc3JlZj1cImFwcGxpY2F0aW9uLmRhc2hib2FyZFwiIGxheW91dC1hbGlnbj1cInNwYWNlLWFyb3VuZCBjZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWljb24gIG1kLWZvbnQtaWNvbj1cIm1kaS1ib3dsaW5nXCIgY2xhc3M9XCJtZGlcIiBmbGV4PjwvbWQtaWNvbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHNwYW4gZmxleD4gRGFzaGJvYXJkPC9zcGFuPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L2E+XFxuJyArXG4gICAgJyAgICAgICAgPGEgY2xhc3M9XCJwb3BvdmVyLW1haW4tbGlua1wiIGZsZXggbGF5b3V0PVwiY29sdW1uXCIgdWktc3JlZj1cImFwcGxpY2F0aW9uLnpvbmVzXCIgbGF5b3V0LWFsaWduPVwic3BhY2UtYXJvdW5kIGNlbnRlclwiPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWljb24gIG1kLWZvbnQtaWNvbj1cIm1kaS1iYXNlY2FtcFwiIGNsYXNzPVwibWRpXCIgZmxleD48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuIGZsZXg+Wm9uZXM8L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwicG9wb3Zlci1tYWluLWl0ZW1cIiBsYXlvdXQ9XCJyb3dcIiBmbGV4PlxcbicgK1xuICAgICcgICAgICAgIDxhIGNsYXNzPVwicG9wb3Zlci1tYWluLWxpbmtcIiBmbGV4IGxheW91dD1cImNvbHVtblwiIHVpLXNyZWY9XCJhcHBsaWNhdGlvbi50YXNrc1wiIGxheW91dC1hbGlnbj1cInNwYWNlLWFyb3VuZCBjZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWljb24gIG1kLWZvbnQtaWNvbj1cIm1kaS1hbGFybS1jaGVja1wiIGNsYXNzPVwibWRpXCIgZmxleD48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuIGZsZXg+VGFza3M8L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICcgICAgICAgIDxhIGNsYXNzPVwicG9wb3Zlci1tYWluLWxpbmtcIiBmbGV4IGxheW91dD1cImNvbHVtblwiICB1aS1zcmVmPVwiYXBwbGljYXRpb24ubWFnbml0dWRlcy5saXN0XCIgbGF5b3V0LWFsaWduPVwic3BhY2UtYXJvdW5kIGNlbnRlclwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtaWNvbiAgbWQtZm9udC1pY29uPVwibWRpLWJlZXJcIiBjbGFzcz1cIm1kaVwiIGZsZXg+PC9tZC1pY29uPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3BhbiBmbGV4Pk1hZ25pdHVkZXM8L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnPC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL19fdXRpbHMvcG9wb3Zlci11c2VyLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1sYXllclwiIG5nLWlmPVwic2hvd09wdGlvbnNcIiBuZy1jbGljaz1cImNsb3NlUG9wb3Zlck9wdGlvbnMoKVwiPjwvZGl2PlxcbicgK1xuICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci11c2VyLW9wdGlvbnMgbWQtb3Blbi1tZW51LWNvbnRhaW5lciBtZC13aGl0ZWZyYW1lLXoyIG1kLWNsaWNrYWJsZVwiIG5nLWNsYXNzPVwie1xcJ21kLWFjdGl2ZVxcJzpzaG93T3B0aW9uc31cIiBuZy1pZj1cInNob3dPcHRpb25zXCI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tY2FyZXRcIj5cXG4nICtcbiAgICAnICAgICAgICA8c3BhbiBjbGFzcz1cImNhcmV0LW91dGVyXCI+PC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZXQtaW5uZXJcIj48L3NwYW4+XFxuJyArXG4gICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIiBsYXlvdXQtYWxpZ249XCJzcGFjZS1iZXR3ZWVuIG5vbmVcIiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPlxcbicgK1xuICAgICcgICAgICAgIDxhICBmbGV4IGxheW91dD1cInJvd1wiICBsYXlvdXQtYWxpZ249XCJzcGFjZS1iZXR3ZWVuIGNlbnRlclwiIGNsYXNzPVwiaXRlbS1wb3BvdmVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxpIGNsYXNzPVwibWRpIG1kaS1hY2NvdW50LWNpcmNsZVwiIGZsZXg9XCI0MFwiPjwvaT5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHNwYW4gIGZsZXg+QWNjb3VudDwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8YSAgZmxleCBsYXlvdXQ9XCJyb3dcIiAgbGF5b3V0LWFsaWduPVwic3BhY2UtYmV0d2VlbiBjZW50ZXJcIiBjbGFzcz1cIml0ZW0tcG9wb3ZlclwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktZm9vdGJhbGwtaGVsbWV0XCIgZmxleD1cIjQwXCI+PC9pPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3BhbiBmbGV4Pkludml0ZTwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8YSAgZmxleCBsYXlvdXQ9XCJyb3dcIiAgbGF5b3V0LWFsaWduPVwic3BhY2UtYmV0d2VlbiBjZW50ZXJcIiBjbGFzcz1cIml0ZW0tcG9wb3ZlclwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktcG93ZXJcIiBmbGV4PVwiNDBcIj48L2k+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuIG5nLWNsaWNrPVwibG9nb3V0KClcIiBmbGV4PkxvZ291dDwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJzwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5kaXJlY3RpdmUoJ3VpVGl0bGUnLCBbXCIkcm9vdFNjb3BlXCIsIGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICBjb21waWxlOmZ1bmN0aW9uKHRFbGVtZW50KXtcclxuICAgICAgICAgICAgdmFyIHRpdGxlPXRFbGVtZW50WzBdLmlubmVyVGV4dDtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS50aXRsZU1haW49dGl0bGU7XHJcbiAgICAgICAgICAgIHRFbGVtZW50LmF0dHIoJ2NsYXNzJywgJ2hpZGUnKTtcclxuICAgICAgICAgICAgdEVsZW1lbnQuZW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7XG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKS5maWx0ZXIoXHJcbiAgICBcIm5vZmlyc3RcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0P2lucHV0LnNsaWNlKDEpOlwiXCI7XHJcbiAgICAgICAgfX1cclxuKVxyXG5cbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbi5mYWN0b3J5KFwiQXBpU2VydmljZVwiLCBbXCIkcmVzb3VyY2VcIiwgXCIkbG9jYXRpb25cIiwgZnVuY3Rpb24oJHJlc291cmNlLCAkbG9jYXRpb24pe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbnY6JGxvY2F0aW9uLmFic1VybCgpLmluZGV4T2YoXCJsb2NhbGhvc3RcIik9PS0xP1wicHJvZFwiOlwiZGV2XCIsXHJcbiAgICAgICAgLy9lbnY6XCJwcm9kXCIsXHJcbiAgICAgICAgcHJvZDp7XHJcbiAgICAgICAgICAgIHByb3RvY29sOlwiaHR0cHNcIixcclxuICAgICAgICAgICAgaG9zdDpcInNtYXJ0LXRvd24tZGIuaGVyb2t1YXBwLmNvbVwiLFxyXG4gICAgICAgICAgICBwb3J0OlwiXCIsXHJcbiAgICAgICAgICAgIHJvb3Q6XCJhcGlcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGV2OntcclxuICAgICAgICAgICAgcHJvdG9jb2w6XCJodHRwXCIsXHJcbiAgICAgICAgICAgIGhvc3Q6XCJsb2NhbGhvc3RcIixcclxuICAgICAgICAgICAgcG9ydDpcIjUwNjBcIixcclxuICAgICAgICAgICAgcm9vdDpcImFwaVwiXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0QXBpUGF0aDpmdW5jdGlvbihwYXRoKXtcclxuICAgICAgICAgICAgdmFyIGFwaT10aGlzW3RoaXMuZW52XTtcclxuICAgICAgICAgICAgcmV0dXJuIGFwaS5wcm90b2NvbCtcIjovL1wiK2FwaS5ob3N0KyhhcGkucG9ydCE9PVwiXCI/KFwiOlwiK2FwaS5wb3J0KTpcIlwiKStcIi9cIithcGkucm9vdCtcIi9cIitwYXRoO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc3Q6ZnVuY3Rpb24ocGF0aCwgbWV0aG9kcywgZGVmYXVsdFBhcmFtcyl7XHJcbiAgICAgICAgICAgIHZhciByZXNvdXJjZT0kcmVzb3VyY2UoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEFwaVBhdGgocGF0aCksXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0UGFyYW1zIHx8IHt9LFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kcyB8fCB7fVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufV0pO1xyXG5cclxuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmZhY3RvcnkoXCJBdXRoSW50ZXJjZXB0b3JcIiwgW1wiJHFcIiwgXCIkbG9jYXRpb25cIiwgZnVuY3Rpb24oJHEsICRsb2NhdGlvbil7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uKGNvbmZpZyl7XHJcbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XHJcblxyXG4gICAgICAgICAgICB2YXIgdXNlcj1nZXRMb2NhbChcInVzZXJcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gJiYgdXNlcikge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IHVzZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXF1ZXN0RXJyb3I6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNwb25zZTogZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICBpZihyZXNwb25zZS5kYXRhLnN0YXR1cyA9PT0gJ0VSUk9SJykgeyAvL0ZvcmNlIGVycm9yXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJHEud2hlbihyZXNwb25zZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNwb25zZUVycm9yOiBmdW5jdGlvbihyZWplY3Rpb24pe1xyXG4gICAgICAgICAgICBpZihyZWplY3Rpb24uc3RhdHVzID09PSA0MDMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlIGFjY2VzbycpO1xyXG4gICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS51c2VyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1dKTtcclxuXG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmZhY3RvcnkoXCJNYWduaXR1ZGVTZXJ2aWNlXCIsIFtcIkFwaVNlcnZpY2VcIiwgZnVuY3Rpb24oQXBpU2VydmljZSl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhc2U6XCJtYWduaXR1ZGVcIixcclxuICAgICAgICBfOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlLCB7XHJcbiAgICAgICAgICAgICAgICBuZXc6e21ldGhvZDpcIlBPU1RcIiwgcGFyYW1zOnt9fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSk7XG5hbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmZhY3RvcnkoXCJPQXV0aFNlcnZpY2VcIiwgW1wiQXBpU2VydmljZVwiLCBmdW5jdGlvbihBcGlTZXJ2aWNlKXtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmFzZTpcIm9hdXRoXCIsXHJcbiAgICAgICAgbG9naW46ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIEFwaVNlcnZpY2UucmVzdCh0aGlzLmJhc2UrXCIvbG9naW5cIiwge1xyXG4gICAgICAgICAgICAgICAgXzp7bWV0aG9kOlwiUE9TVFwiLCBwYXJhbXM6e319XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9nb3V0OmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlK1wiL2xvZ291dFwiLCB7XHJcbiAgICAgICAgICAgICAgICBfOnttZXRob2Q6XCJHRVRcIiwgcGFyYW1zOnt9fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB3aG9pYW06ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIEFwaVNlcnZpY2UucmVzdCh0aGlzLmJhc2UrXCIvd2hvaWFtXCIsIHtcclxuICAgICAgICAgICAgICAgIF86e21ldGhvZDpcIkdFVFwiLCBwYXJhbXM6e319XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTtcbmFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuZmFjdG9yeShcIlJlcXVlc3RTZXJ2aWNlXCIsIFtcIiRyb290U2NvcGVcIiwgZnVuY3Rpb24oJHJvb3RTY29wZSl7XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgRXJyb3I6ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlcyl7XHJcblxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U2ltcGxlVG9hc3QoZGF0YS5lcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBPbmVEYXRhOmZ1bmN0aW9uKGtleSwgY2Ipe1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzKXtcclxuICAgICAgICAgICAgICAgIGlmKCFyZXMuZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuc2hvd1NpbXBsZVRvYXN0KFwiTm8gZGF0YVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZT1yZXMuZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgaWYoIXZhbHVlKXJldHVybiAkcm9vdFNjb3BlLnNob3dTaW1wbGVUb2FzdChcIk5vIFZhbHVlc1wiKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgY2IodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgTWVzc2FnZTpmdW5jdGlvbihjYil7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYoIXJlcy5tZXNzYWdlKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zaG93U2ltcGxlVG9hc3QoXCJTdWNjZXNzZnVsOiBObyBNZWVzYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93U2ltcGxlVG9hc3QocmVzLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgaWYoY2IpY2IoKTtcclxuXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsIE9BdXRoU2VydmljZSwgUmVxdWVzdFNlcnZpY2Upe1xyXG5cclxuICAgICRzY29wZS51c2VyPXt9O1xyXG5cclxuICAgICRzY29wZS5hcnJheV9jb2xvcnM9QXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoMjcpKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gXCIjRkY5ODAwXCJ9KTtcclxuXHJcbiAgICAkc2NvcGUuY2xvc2VQb3BvdmVyTWFpbj1mdW5jdGlvbigpe1xyXG4gICAgICAgJHNjb3BlLnNob3dNYWluPWZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAgJHNjb3BlLmNsb3NlUG9wb3Zlck9wdGlvbnM9ZnVuY3Rpb24oKXtcclxuICAgICAgICRzY29wZS5zaG93T3B0aW9ucz1mYWxzZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdGhpcy5XaG9JQW09ZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgT0F1dGhTZXJ2aWNlLiB3aG9pYW0oKS5fKFJlcXVlc3RTZXJ2aWNlLk9uZURhdGEoXCJlbWFpbFwiLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXIuZW1haWw9ZGF0YTtcclxuXHJcbiAgICAgICAgfSksUmVxdWVzdFNlcnZpY2UuRXJyb3IoKSk7ICBcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuV2hvSUFtKCk7XHJcblxyXG4gICAgJHNjb3BlLmxvZ291dD1mdW5jdGlvbigpe1xyXG4gICAgICAgIE9BdXRoU2VydmljZS5sb2dvdXQoKS5fKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgZGVsZXRlTG9jYWwoXCJ1c2VyXCIpO1xyXG5cclxuICAgICAgICAgICAgJHJvb3RTY29wZS5nbyhcImxvZ2luXCIpO1xyXG5cclxuICAgICAgICB9LFJlcXVlc3RTZXJ2aWNlLkVycm9yKCkpOyAgXHJcbiAgICB9O1xyXG5cclxuXHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuY29udHJvbGxlcignRGFzaGJvYXJkQ3RybCcsZnVuY3Rpb24oKXtcclxuICAgIFxyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgT0F1dGhTZXJ2aWNlLCBSZXF1ZXN0U2VydmljZSl7XHJcblxyXG4gICAgJHNjb3BlLnVzZXI9e1xyXG4gICAgICAgIGVtYWlsOlwiXCIsXHJcbiAgICAgICAgcGFzc3dvcmQ6XCJcIlxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAkc2NvcGUubG9naW49ZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgdXNlcj0kc2NvcGUudXNlcjtcclxuICAgICAgICBpZih1c2VyLmVtYWlsIT09XCJcIiAmJiB1c2VyLnBhc3N3b3JkKXtcclxuXHJcbiAgICAgICAgICAgIE9BdXRoU2VydmljZS5sb2dpbigpLl8odXNlciwgUmVxdWVzdFNlcnZpY2UuT25lRGF0YShcInRva2VuXCIsIGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgc2F2ZUxvY2FsKFwidXNlclwiLCBkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmdvKFwiYXBwbGljYXRpb24uZGFzaGJvYXJkXCIpO1xyXG5cclxuICAgICAgICAgICAgfSksUmVxdWVzdFNlcnZpY2UuRXJyb3IoKSk7ICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ01hZ25pdHVkZXNDdHJsJyxmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUpe1xyXG4gICAgJHNjb3BlLmNyZWF0ZT1mdW5jdGlvbigpe1xyXG4gICAgICAgICRyb290U2NvcGUuZ28oXCJhcHBsaWNhdGlvbi5tYWduaXR1ZGVzLmNyZWF0ZVwiKVxyXG4gICAgfVxyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NyZWF0ZU1hZ25pdHVkZUN0cmwnLGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgTWFnbml0dWRlU2VydmljZSwgUmVxdWVzdFNlcnZpY2Upe1xyXG4gICAgJHNjb3BlLmdvQmFjaz1mdW5jdGlvbigpe1xyXG4gICAgICAgICRyb290U2NvcGUuZ28oXCJhcHBsaWNhdGlvbi5tYWduaXR1ZGVzLmxpc3RcIik7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLm1hZ25pdHVkZT17XHJcbiAgICAgICAgZGlzcGxheV9uYW1lOlwiXCIsIHR5cGU6XCIwXCJcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuY3JlYXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIG1hZ25pdHVkZT1hbmd1bGFyLmNvcHkoJHNjb3BlLm1hZ25pdHVkZSk7XHJcbiAgICAgXHJcbiAgICAgICAgaWYobWFnbml0dWRlLmRpc3BsYXlfbmFtZT09XCJcIil7XHJcbiAgICAgICAgICAgIG1hZ25pdHVkZS5kaXNwbGF5X25hbWU9Y2hhbmNlLnNlbnRlbmNlKHt3b3JkczogM30pLnNwbGl0KFwiIFwiKS5qb2luKFwiXCIpLnJlcGxhY2UoXCIuXCIsIFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgTWFnbml0dWRlU2VydmljZS5fKCkubmV3KG1hZ25pdHVkZSwgUmVxdWVzdFNlcnZpY2UuTWVzc2FnZSgkc2NvcGUuZ29CYWNrKSwgUmVxdWVzdFNlcnZpY2UuRXJyb3IoKSlcclxuICAgIH1cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdUYXNrc0N0cmwnLGZ1bmN0aW9uKCl7XHJcbiAgICBcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdab25lc0N0cmwnLGZ1bmN0aW9uKCl7XHJcbiAgICBcclxufSk7IiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL19hcHBsaWNhdGlvbi9tYWluLmh0bWwnLFxuICAgICc8bmctaW5jbHVkZSBzcmM9XCJcXCcvdmlld3MvX2FwcGxpY2F0aW9uL19fdXRpbHMvcG9wb3Zlci1tYWluLmh0bWxcXCdcIj48L25nLWluY2x1ZGU+XFxuJyArXG4gICAgJzxuZy1pbmNsdWRlIHNyYz1cIlxcJy92aWV3cy9fYXBwbGljYXRpb24vX191dGlscy9wb3BvdmVyLXVzZXIuaHRtbFxcJ1wiPjwvbmctaW5jbHVkZT5cXG4nICtcbiAgICAnPGRpdiBsYXlvdXQ9XCJyb3dcIiBmbGV4PlxcbicgK1xuICAgICcgICAgPG1kLXNpZGVuYXYgbGF5b3V0PVwiY29sdW1uXCIgZmxleD1cIjIwXCIgY2xhc3M9XCJtZC1zaWRlbmF2LWxlZnQgbWQtd2hpdGVmcmFtZS16MlwiICBpZD1cInNpZGViYXJcIiBtZC1jb21wb25lbnQtaWQ9XCJsZWZ0XCIgbWQtaXMtbG9ja2VkLW9wZW49XCIkbWRNZWRpYShcXCdndC1zbVxcJylcIiAgbWQtdGhlbWU9XCJzbWFydFRoZW1lXCI+XFxuJyArXG4gICAgJyAgICAgICAgPGhlYWRlciBjbGFzcz1cIm1kLXdoaXRlZnJhbWUtMmRwXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC10b29sYmFyIGxheW91dD1cInJvd1wiIG5nLWluaXQ9XCJzaG93TWFpbj1mYWxzZVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJtZC10b29sYmFyLXRvb2xzXCIgZmxleD1cIjgwXCIgbmctaHJlZj1cInt7c3RhdGlmeShcXCdhcHBsaWNhdGlvblxcJywgdGl0bGVNYWluKX19XCIgbGF5b3V0PVwicm93XCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGhvdXNlX3dpdGhfZ2FyZGVuXzM2XCIgZmxleD1cIjIwXCI+PC9pPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxzcGFuIGZsZXg+e3t0aXRsZU1haW59fTwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8L2E+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtYnV0dG9uIGFyaWEtbGFiZWw9XCJPcGVuIG1haW4gbWVudVwiIGNsYXNzPVwibWQtaWNvbi1idXR0b25cIiBmbGV4IG5nLWNsaWNrPVwic2hvd01haW49IXNob3dNYWluOyBzaG93T3B0aW9ucz1mYWxzZVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxtZC1pY29uICBtZC1mb250LWljb249XCJtZGktYXBwc1wiIGNsYXNzPVwibWRpXCI+PC9tZC1pY29uPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPC9tZC10b29sYmFyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L2hlYWRlcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPG1kLWNvbnRlbnQ+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1zdWJoZWFkZXIgY2xhc3M9XCJtZC1wcmltYXJ5XCIgbGF5b3V0PVwicm93XCIgbmctaW5pdD1cInNob3dPcHRpb25zPWZhbHNlXCIgbGF5b3V0LWFsaWduPVwiY2VudGVyIGNlbnRlclwiIG5nLWNsaWNrPVwic2hvd09wdGlvbnM9IXNob3dPcHRpb25zOyBzaG93TWFpbj1mYWxzZVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPHNwYW4gZmxleD57e3VzZXIuZW1haWx9fVxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPG1kLWljb24gbWQtZm9udC1pY29uPVwibWRpLWNoZXZyb24tZG93blwiIGNsYXNzPVwibWRpIG1kLXByaW1hcnlcIiBmbGV4ID48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDwvbWQtc3ViaGVhZGVyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1jb250ZW50PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvbWQtc2lkZW5hdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPGRpdiBmbGV4IGxheW91dD1cImNvbHVtblwiPlxcbicgK1xuICAgICcgICAgICAgIDxkaXYgdWktdmlldz1cImNvbnRlbnRcIiBmbGV4PjwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8ZGl2IGZsZXggY2xhc3M9XCJmb290ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWRpdmlkZXI+PC9tZC1kaXZpZGVyPlxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtdG9vbGJhciBsYXlvdXQ9XCJyb3dcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgIFxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxoNiBmbGV4LW9mZnNldD1cIjg1XCI+PGkgY2xhc3M9XCJtZGkgbWRpLWNvcHlyaWdodFwiPjwvaT48c3Bhbj5TbWFydCBUb3duIDIwMTY8L3NwYW4+PC9oNj5cXG4nICtcbiAgICAnICAgICAgICAgICBcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgIDwvbWQtdG9vbGJhcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2xvZ2luL21haW4uaHRtbCcsXG4gICAgJzx1aS10aXRsZT5TaWduIGluPC91aS10aXRsZT5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJzxkaXYgIGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImNlbnRlciBjZW50ZXJcIiBsYXlvdXQtZmlsbCBpZD1cImxvZ2luLWJvZHlcIiBtZC10aGVtZT1cInNtYXJ0VGhlbWVcIj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIiBmbGV4LWd0LW1kPVwiMzVcIiBmbGV4LXhzPVwiNTBcIiBmbGV4LWd0LXhzPVwiNTBcIiBsYXlvdXQtcGFkZGluZz5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPGRpdiBsYXlvdXQ9XCJyb3dcIiBsYXlvdXQtYWxpZ249XCJjZW50ZXIgY2VudGVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxoMj48aSBjbGFzcz1cImljb24gaG91c2Vfd2l0aF9nYXJkZW5fNzJcIj48L2k+PGJyPlNtYXJ0IFRvd24gQWRtaW5pc3RyYXRpb248L2gyPlxcbicgK1xuICAgICcgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8bWQtY2FyZCBsYXlvdXQ9XCJyb3dcIiA+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxmb3JtIG5hbWU9XCJsb2dpbkZvcm1cIiBmbGV4IGxheW91dD1cImNvbHVtblwiIGxheW91dC1hbGlnbj1cImNlbnRlciBzdHJldGNoXCIgbGF5b3V0LXBhZGRpbmcgbGF5b3V0LW1hcmdpbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxoMyBmbGV4PkxvZyBpbiB0byB5b3VyIGFjY291bnQ8L2gzPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciAgY2xhc3M9XCJtZC1ibG9ja1wiIGZsZXg+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkVtYWlsPC9sYWJlbD5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIHJlcXVpcmVkIG5hbWU9XCJlbWFpbFwiIG5nLW1vZGVsPVwidXNlci5lbWFpbFwiIG5nLXBhdHRlcm49XCIvXi4rQC4rXFxcXC4uKyQvXCIgPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctbWVzc2FnZXM9XCJsb2dpbkZvcm0uZW1haWwuJGVycm9yXCIgbXVsdGlwbGUgbWQtYXV0by1oaWRlPVwiZmFsc2VcIiBuZy1pZj1cXCdsb2dpbkZvcm0uZW1haWwuJGRpcnR5XFwnPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlRoaXMgaXMgcmVxdWlyZWQuPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctbWVzc2FnZT1cInBhdHRlcm5cIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdXIgZW1haWwgbXVzdCBsb29rIGxpa2UgYW4gZS1tYWlsIGFkZHJlc3MuXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyICAgY2xhc3M9XCJtZC1ibG9ja1wiIGZsZXg+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlBhc3N3b3JkPC9sYWJlbD5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidXNlci5wYXNzd29yZFwiIHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzd29yZFwiIHJlcXVpcmVkPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctbWVzc2FnZXM9XCJsb2dpbkZvcm0ucGFzc3dvcmQuJGVycm9yXCIgbWQtYXV0by1oaWRlPVwiZmFsc2VcIiBuZy1pZj1cImxvZ2luRm9ybS5wYXNzd29yZC4kZGlydHlcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5UaGlzIGlzIHJlcXVpcmVkLjwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGxheW91dC1hbGlnbj1cImNlbnRlciBjZW50ZXJcIiBmbGV4PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxkaXYgbGF5b3V0PVwicm93XCIgbGF5b3V0LXNtPVwiY29sdW1uXCIgbGF5b3V0LW1hcmdpbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLXJhaXNlZFwiIHR5cGU9XCJzdWJtaXRcIiBuZy1jbGljaz1cImxvZ2luKClcIiBmbGV4IGZsZXgtc209XCIxMDBcIiBuZz5Mb2dpbjwvbWQtYnV0dG9uPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPC9mb3JtPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L21kLWNhcmQ+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8ZGl2IGxheW91dD1cInJvd1wiIGxheW91dC1hbGlnbj1cImNlbnRlciBjZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPGg1PjxpIGNsYXNzPVwibWRpIG1kaS1jb3B5cmlnaHRcIj48L2k+IFNtYXJ0IFRvd24gMjAxNjwvaDU+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL19kYXNoYm9hcmQvbWFpbi5odG1sJyxcbiAgICAnPHVpLXRpdGxlPkRhc2hib2FyZDwvdWktdGl0bGU+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnaGVsbG8gd29ybGQnKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJy92aWV3cy9fYXBwbGljYXRpb24vX21hZ25pdHVkZXMvY3JlYXRlLmh0bWwnLFxuICAgICc8bWQtdG9vbGJhciBjbGFzcz1cIm1kLXdoaXRlZnJhbWUtMWRwXCIgaWQ9XCJtYWluLXRvb2xiYXJcIj5cXG4nICtcbiAgICAnICAgIDxkaXYgY2xhc3M9XCIgdG9vbGJhci1jcmVhdGUgbWQtdG9vbGJhci10b29sc1wiIGxheW91dD1cInJvd1wiPlxcbicgK1xuICAgICcgICAgICAgIDxtZC1idXR0b24gYXJpYS1sYWJlbD1cIkdvIEJhY2tcIiBmbGV4PVwiMTBcIiBjbGFzcz1cImJ1dHRvbi1iYWNrXCIgbmctY2xpY2s9XCJnb0JhY2soKVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktY2hldnJvbi1sZWZ0XCI+PC9pPkdvIEJhY2tcXG4nICtcbiAgICAnICAgICAgICA8L21kLWJ1dHRvbj5cXG4nICtcbiAgICAnICAgICAgICA8aDIgZmxleD5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHNwYW4+TmV3IE1hZ25pdHVkZTwvc3Bhbj5cXG4nICtcbiAgICAnICAgICAgICA8L2gyPlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJzwvbWQtdG9vbGJhcj5cXG4nICtcbiAgICAnPG1kLWNvbnRlbnQgbGF5b3V0LXBhZGRpbmcgbGF5b3V0PVwiY29sdW1uXCIgbWQtdGhlbWU9XCJzbWFydFRoZW1lXCI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGxheW91dD1cInJvd1wiIGZsZXggY2xhc3M9XCJpbnB1dC1jcmVhdGVcIj5cXG4nICtcbiAgICAnICAgICAgICA8ZGl2ICBmbGV4PVwiMjBcIiAgZmxleC1vZmZzZXQ9XCI1XCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxoMz5EaXNwbGF5IE5hbWUgPGJyPihvcHRpb25hbCk8L2gzPlxcbicgK1xuICAgICcgICAgICAgICAgICA8cD5MZWF2ZSBibGFuayBhbmQgd2VcXCdsbCBjaG9vc2Ugb25lIGZvciB5b3U8L3A+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgZmxleD1cIjUwXCIgZmxleC1vZmZzZXQ9XCIxMFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJtYWduaXR1ZGUuZGlzcGxheV9uYW1lXCIgYXJpYS1sYWJlbD1cIkRpc3BsYXkgTmFtZVwiPlxcbicgK1xuICAgICcgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgPG1kLWRpdmlkZXIgPjwvbWQtZGl2aWRlcj5cXG4nICtcbiAgICAnICAgIDxkaXYgbGF5b3V0PVwicm93XCIgZmxleCBjbGFzcz1cImlucHV0LWNyZWF0ZVwiPlxcbicgK1xuICAgICcgICAgICAgIDxkaXYgIGZsZXg9XCIyMFwiICBmbGV4LW9mZnNldD1cIjVcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPGgzPlN5c3RlbSBUeXBlPC9oMz5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHA+V29ya2luZyB3aXRoIHJlYWwgbnVtYmVycyBvciB3aXRoIG9uKDEpIG9yIG9mZigwKTwvcD5cXG4nICtcbiAgICAnICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPG1kLXJhZGlvLWdyb3VwIG5nLW1vZGVsPVwibWFnbml0dWRlLnR5cGVcIiBmbGV4PVwiNTBcIiBmbGV4LW9mZnNldD1cIjMwXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1yYWRpby1idXR0b24gdmFsdWU9XCIwXCIgY2xhc3M9XCJtZC1wcmltYXJ5XCI+QW5hbG9nPC9tZC1yYWRpby1idXR0b24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1yYWRpby1idXR0b24gdmFsdWU9XCIxXCIgY2xhc3M9XCJtZC1wcmltYXJ5XCI+RGlnaXRhbDwvbWQtcmFkaW8tYnV0dG9uPlxcbicgK1xuICAgICcgICAgICAgIDwvbWQtcmFkaW8tZ3JvdXA+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICA8bWQtZGl2aWRlcj48L21kLWRpdmlkZXI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGZsZXggY2xhc3M9XCJidXR0b24tY3JlYXRlXCIgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiY2VudGVyIGNlbnRlclwiPlxcbicgK1xuICAgICcgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1yYWlzZWQgbWQtcHJpbWFyeVwiIG5nLWNsaWNrPVwiY3JlYXRlKClcIj5DcmVhdGUgTWFnbml0dWRlPC9tZC1idXR0b24+XFxuJyArXG4gICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAnPC9tZC1jb250ZW50PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL19tYWduaXR1ZGVzL2xpc3QuaHRtbCcsXG4gICAgJzxtZC10b29sYmFyIGNsYXNzPVwibWQtd2hpdGVmcmFtZS0xZHBcIiBpZD1cIm1haW4tdG9vbGJhclwiPlxcbicgK1xuICAgICcgICAgPGRpdiBjbGFzcz1cIm1kLXRvb2xiYXItdG9vbHNcIiBsYXlvdXQ9XCJyb3dcIiAgbGF5b3V0LWFsaWduPVwic3RhcnQgY2VudGVyXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgbWQtbm8tZmxvYXQgY2xhc3M9XCJtZC1ibG9ja1wiIGZsZXg+IFxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtaWNvbiAgbWQtZm9udC1pY29uPVwibWRpLW1hZ25pZnlcIiBjbGFzcz1cIm1kaVwiPjwvbWQtaWNvbj4gICAgICAgICAgICAgXFxuJyArXG4gICAgJyAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRmlsdGVyIG1hZ25pdHVkZXNcIj5cXG4nICtcbiAgICAnICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1pY29uLWJ1dHRvblwiIGFyaWEtbGFiZWw9XCJNb3JlXCIgZmxleD1cIjVcIiBuZy1jbGljaz1cImNyZWF0ZSgpXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1pY29uIG1kLWZvbnQtaWNvbj1cIm1kaS1wbHVzXCIgY2xhc3M9XCJtZGlcIj48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1idXR0b24+XFxuJyArXG4gICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAnPC9tZC10b29sYmFyPicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL19hcHBsaWNhdGlvbi9fbWFnbml0dWRlcy9tYWluLmh0bWwnLFxuICAgICc8dWktdGl0bGU+TWFnbml0dWRlczwvdWktdGl0bGU+XFxuJyArXG4gICAgJzxkaXYgbGF5b3V0PVwiY29sdW1uXCIgdWktdmlldz1cImlubmVyXCI+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL190YXNrcy9tYWluLmh0bWwnLFxuICAgICc8dWktdGl0bGU+VGFza3M8L3VpLXRpdGxlPlxcbicgK1xuICAgICdoZWxsbyB0YXNrcycpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL19hcHBsaWNhdGlvbi9fem9uZXMvbWFpbi5odG1sJyxcbiAgICAnPHVpLXRpdGxlPlpvbmVzPC91aS10aXRsZT5cXG4nICtcbiAgICAnSGVsbG8gem9uZXMnKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJy92aWV3cy9fYXBwbGljYXRpb24vX191dGlscy9wb3BvdmVyLW1haW4uaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWxheWVyXCIgbmctaWY9XCJzaG93TWFpblwiIG5nLWNsaWNrPVwiY2xvc2VQb3BvdmVyTWFpbigpXCI+PC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItbWFpbiBtZC1vcGVuLW1lbnUtY29udGFpbmVyIG1kLXdoaXRlZnJhbWUtejIgbWQtY2xpY2thYmxlXCIgbmctY2xhc3M9XCJ7XFwnbWQtYWN0aXZlXFwnOnNob3dNYWlufVwiIG5nLWlmPVwic2hvd01haW5cIj5cXG4nICtcbiAgICAnICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1jYXJldFwiPlxcbicgK1xuICAgICcgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZXQtb3V0ZXJcIj48L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJldC1pbm5lclwiPjwvc3Bhbj5cXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwicG9wb3Zlci1tYWluLWl0ZW1cIiBsYXlvdXQ9XCJyb3dcIiBmbGV4PlxcbicgK1xuICAgICcgICAgICAgIDxhIGNsYXNzPVwicG9wb3Zlci1tYWluLWxpbmtcIiBmbGV4IGxheW91dD1cImNvbHVtblwiICAgdWktc3JlZj1cImFwcGxpY2F0aW9uLmRhc2hib2FyZFwiIGxheW91dC1hbGlnbj1cInNwYWNlLWFyb3VuZCBjZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWljb24gIG1kLWZvbnQtaWNvbj1cIm1kaS1ib3dsaW5nXCIgY2xhc3M9XCJtZGlcIiBmbGV4PjwvbWQtaWNvbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHNwYW4gZmxleD4gRGFzaGJvYXJkPC9zcGFuPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L2E+XFxuJyArXG4gICAgJyAgICAgICAgPGEgY2xhc3M9XCJwb3BvdmVyLW1haW4tbGlua1wiIGZsZXggbGF5b3V0PVwiY29sdW1uXCIgdWktc3JlZj1cImFwcGxpY2F0aW9uLnpvbmVzXCIgbGF5b3V0LWFsaWduPVwic3BhY2UtYXJvdW5kIGNlbnRlclwiPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWljb24gIG1kLWZvbnQtaWNvbj1cIm1kaS1iYXNlY2FtcFwiIGNsYXNzPVwibWRpXCIgZmxleD48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuIGZsZXg+Wm9uZXM8L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwicG9wb3Zlci1tYWluLWl0ZW1cIiBsYXlvdXQ9XCJyb3dcIiBmbGV4PlxcbicgK1xuICAgICcgICAgICAgIDxhIGNsYXNzPVwicG9wb3Zlci1tYWluLWxpbmtcIiBmbGV4IGxheW91dD1cImNvbHVtblwiIHVpLXNyZWY9XCJhcHBsaWNhdGlvbi50YXNrc1wiIGxheW91dC1hbGlnbj1cInNwYWNlLWFyb3VuZCBjZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWljb24gIG1kLWZvbnQtaWNvbj1cIm1kaS1hbGFybS1jaGVja1wiIGNsYXNzPVwibWRpXCIgZmxleD48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuIGZsZXg+VGFza3M8L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICcgICAgICAgIDxhIGNsYXNzPVwicG9wb3Zlci1tYWluLWxpbmtcIiBmbGV4IGxheW91dD1cImNvbHVtblwiICB1aS1zcmVmPVwiYXBwbGljYXRpb24ubWFnbml0dWRlcy5saXN0XCIgbGF5b3V0LWFsaWduPVwic3BhY2UtYXJvdW5kIGNlbnRlclwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtaWNvbiAgbWQtZm9udC1pY29uPVwibWRpLWJlZXJcIiBjbGFzcz1cIm1kaVwiIGZsZXg+PC9tZC1pY29uPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3BhbiBmbGV4Pk1hZ25pdHVkZXM8L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnPC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvX2FwcGxpY2F0aW9uL19fdXRpbHMvcG9wb3Zlci11c2VyLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1sYXllclwiIG5nLWlmPVwic2hvd09wdGlvbnNcIiBuZy1jbGljaz1cImNsb3NlUG9wb3Zlck9wdGlvbnMoKVwiPjwvZGl2PlxcbicgK1xuICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci11c2VyLW9wdGlvbnMgbWQtb3Blbi1tZW51LWNvbnRhaW5lciBtZC13aGl0ZWZyYW1lLXoyIG1kLWNsaWNrYWJsZVwiIG5nLWNsYXNzPVwie1xcJ21kLWFjdGl2ZVxcJzpzaG93T3B0aW9uc31cIiBuZy1pZj1cInNob3dPcHRpb25zXCI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tY2FyZXRcIj5cXG4nICtcbiAgICAnICAgICAgICA8c3BhbiBjbGFzcz1cImNhcmV0LW91dGVyXCI+PC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZXQtaW5uZXJcIj48L3NwYW4+XFxuJyArXG4gICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIiBsYXlvdXQtYWxpZ249XCJzcGFjZS1iZXR3ZWVuIG5vbmVcIiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPlxcbicgK1xuICAgICcgICAgICAgIDxhICBmbGV4IGxheW91dD1cInJvd1wiICBsYXlvdXQtYWxpZ249XCJzcGFjZS1iZXR3ZWVuIGNlbnRlclwiIGNsYXNzPVwiaXRlbS1wb3BvdmVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxpIGNsYXNzPVwibWRpIG1kaS1hY2NvdW50LWNpcmNsZVwiIGZsZXg9XCI0MFwiPjwvaT5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHNwYW4gIGZsZXg+QWNjb3VudDwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8YSAgZmxleCBsYXlvdXQ9XCJyb3dcIiAgbGF5b3V0LWFsaWduPVwic3BhY2UtYmV0d2VlbiBjZW50ZXJcIiBjbGFzcz1cIml0ZW0tcG9wb3ZlclwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktZm9vdGJhbGwtaGVsbWV0XCIgZmxleD1cIjQwXCI+PC9pPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3BhbiBmbGV4Pkludml0ZTwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8YSAgZmxleCBsYXlvdXQ9XCJyb3dcIiAgbGF5b3V0LWFsaWduPVwic3BhY2UtYmV0d2VlbiBjZW50ZXJcIiBjbGFzcz1cIml0ZW0tcG9wb3ZlclwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktcG93ZXJcIiBmbGV4PVwiNDBcIj48L2k+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuIG5nLWNsaWNrPVwibG9nb3V0KClcIiBmbGV4PkxvZ291dDwvc3Bhbj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9hPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJzwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuZGlyZWN0aXZlKCd1aVRpdGxlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24odEVsZW1lbnQpe1xyXG4gICAgICAgICAgICB2YXIgdGl0bGU9dEVsZW1lbnRbMF0uaW5uZXJUZXh0O1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnRpdGxlTWFpbj10aXRsZTtcclxuICAgICAgICAgICAgdEVsZW1lbnQuYXR0cignY2xhc3MnLCAnaGlkZScpO1xyXG4gICAgICAgICAgICB0RWxlbWVudC5lbXB0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpLmZpbHRlcihcclxuICAgIFwibm9maXJzdFwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ/aW5wdXQuc2xpY2UoMSk6XCJcIjtcclxuICAgICAgICB9fVxyXG4pXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbi5mYWN0b3J5KFwiQXBpU2VydmljZVwiLCBmdW5jdGlvbigkcmVzb3VyY2UsICRsb2NhdGlvbil7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVudjokbG9jYXRpb24uYWJzVXJsKCkuaW5kZXhPZihcImxvY2FsaG9zdFwiKT09LTE/XCJwcm9kXCI6XCJkZXZcIixcclxuICAgICAgICAvL2VudjpcInByb2RcIixcclxuICAgICAgICBwcm9kOntcclxuICAgICAgICAgICAgcHJvdG9jb2w6XCJodHRwc1wiLFxyXG4gICAgICAgICAgICBob3N0Olwic21hcnQtdG93bi1kYi5oZXJva3VhcHAuY29tXCIsXHJcbiAgICAgICAgICAgIHBvcnQ6XCJcIixcclxuICAgICAgICAgICAgcm9vdDpcImFwaVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXY6e1xyXG4gICAgICAgICAgICBwcm90b2NvbDpcImh0dHBcIixcclxuICAgICAgICAgICAgaG9zdDpcImxvY2FsaG9zdFwiLFxyXG4gICAgICAgICAgICBwb3J0OlwiNTA2MFwiLFxyXG4gICAgICAgICAgICByb290OlwiYXBpXCJcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRBcGlQYXRoOmZ1bmN0aW9uKHBhdGgpe1xyXG4gICAgICAgICAgICB2YXIgYXBpPXRoaXNbdGhpcy5lbnZdO1xyXG4gICAgICAgICAgICByZXR1cm4gYXBpLnByb3RvY29sK1wiOi8vXCIrYXBpLmhvc3QrKGFwaS5wb3J0IT09XCJcIj8oXCI6XCIrYXBpLnBvcnQpOlwiXCIpK1wiL1wiK2FwaS5yb290K1wiL1wiK3BhdGg7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzdDpmdW5jdGlvbihwYXRoLCBtZXRob2RzLCBkZWZhdWx0UGFyYW1zKXtcclxuICAgICAgICAgICAgdmFyIHJlc291cmNlPSRyZXNvdXJjZShcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0QXBpUGF0aChwYXRoKSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRQYXJhbXMgfHwge30sXHJcbiAgICAgICAgICAgICAgICBtZXRob2RzIHx8IHt9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTtcclxuXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuZmFjdG9yeShcIkF1dGhJbnRlcmNlcHRvclwiLCBmdW5jdGlvbigkcSwgJGxvY2F0aW9uKXtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKXtcclxuICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcclxuXHJcbiAgICAgICAgICAgIHZhciB1c2VyPWdldExvY2FsKFwidXNlclwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiAmJiB1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gdXNlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlcXVlc3RFcnJvcjogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnRVJST1InKSB7IC8vRm9yY2UgZXJyb3JcclxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uKHJlamVjdGlvbil7XHJcbiAgICAgICAgICAgIGlmKHJlamVjdGlvbi5zdGF0dXMgPT09IDQwMykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGUgYWNjZXNvJyk7XHJcbiAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnVzZXIgPSAnJztcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuZmFjdG9yeShcIk1hZ25pdHVkZVNlcnZpY2VcIiwgZnVuY3Rpb24oQXBpU2VydmljZSl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhc2U6XCJtYWduaXR1ZGVcIixcclxuICAgICAgICBfOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlLCB7XHJcbiAgICAgICAgICAgICAgICBuZXc6e21ldGhvZDpcIlBPU1RcIiwgcGFyYW1zOnt9fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmZhY3RvcnkoXCJPQXV0aFNlcnZpY2VcIiwgZnVuY3Rpb24oQXBpU2VydmljZSl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhc2U6XCJvYXV0aFwiLFxyXG4gICAgICAgIGxvZ2luOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlK1wiL2xvZ2luXCIsIHtcclxuICAgICAgICAgICAgICAgIF86e21ldGhvZDpcIlBPU1RcIiwgcGFyYW1zOnt9fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvZ291dDpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gQXBpU2VydmljZS5yZXN0KHRoaXMuYmFzZStcIi9sb2dvdXRcIiwge1xyXG4gICAgICAgICAgICAgICAgXzp7bWV0aG9kOlwiR0VUXCIsIHBhcmFtczp7fX1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgd2hvaWFtOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlK1wiL3dob2lhbVwiLCB7XHJcbiAgICAgICAgICAgICAgICBfOnttZXRob2Q6XCJHRVRcIiwgcGFyYW1zOnt9fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKVxyXG4gICAgLmZhY3RvcnkoXCJSZXF1ZXN0U2VydmljZVwiLCBmdW5jdGlvbigkcm9vdFNjb3BlKXtcclxuXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBFcnJvcjpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzKXtcclxuXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dTaW1wbGVUb2FzdChkYXRhLmVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIE9uZURhdGE6ZnVuY3Rpb24oa2V5LCBjYil7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYoIXJlcy5kYXRhKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zaG93U2ltcGxlVG9hc3QoXCJObyBkYXRhXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlPXJlcy5kYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZighdmFsdWUpcmV0dXJuICRyb290U2NvcGUuc2hvd1NpbXBsZVRvYXN0KFwiTm8gVmFsdWVzXCIpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBjYih2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBNZXNzYWdlOmZ1bmN0aW9uKGNiKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlcyl7XHJcbiAgICAgICAgICAgICAgICBpZighcmVzLm1lc3NhZ2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnNob3dTaW1wbGVUb2FzdChcIlN1Y2Nlc3NmdWw6IE5vIE1lZXNhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dTaW1wbGVUb2FzdChyZXMubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBpZihjYiljYigpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
