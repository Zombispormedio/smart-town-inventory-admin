function saveLocal(n,o){localStorage[n]=o}function getLocal(n){return localStorage[n]}function deleteLocal(n){localStorage.removeItem(n)}var app=angular.module("Application",["ui.router","ngResource","ngMessages","ngAnimate","ngMaterial","ngLetterAvatar"]);angular.module("Application").run(["$rootScope","$state","$mdToast",function(n,o,t){n.go=function(n,t){o.go(n,t)},n.showSimpleToast=function(n){t.show(t.simple().textContent(n).position("top right").hideDelay(3e3))}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,o,t,e){var a=function(n){getLocal("user")||n.go("login")};a.$inject=["$rootScope"],n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getLocal("user")&&n.go("application.dashboard")}],templateUrl:"/views/_login/main.html",controller:"LoginCtrl"}).state("application",{url:"",onEnter:a,templateUrl:"/views/_application/main.html",controller:"ApplicationCtrl","abstract":!0}).state("application.dashboard",{url:"/",onEnter:a,views:{content:{templateUrl:"/views/_application/_dashboard/main.html",controller:"DashboardCtrl"}}}).state("application.zones",{url:"/zones",onEnter:a,views:{content:{templateUrl:"/views/_application/_zones/main.html",controller:"ZonesCtrl"}}}).state("application.tasks",{url:"/tasks",onEnter:a,views:{content:{templateUrl:"/views/_application/_tasks/main.html",controller:"TasksCtrl"}}}).state("application.magnitudes",{url:"/magnitudes",onEnter:a,views:{content:{templateUrl:"/views/_application/_magnitudes/main.html",controller:"MagnitudesCtrl"}}}),o.otherwise("/login"),t.interceptors.push("AuthInterceptor"),e.theme("smartTheme").primaryPalette("orange").accentPalette("yellow")}]),angular.module("Application").controller("ApplicationCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,o,t,e){o.user={},o.array_colors=Array.apply(null,Array(27)).map(function(){return"#FF9800"}),o.closePopoverMain=function(){o.showMain=!1},o.closePopoverOptions=function(){o.showOptions=!1},this.WhoIAm=function(){t.whoiam()._(e.OneData("email",function(n){o.user.email=n}),e.Error())},this.WhoIAm(),o.logout=function(){t.logout()._(function(o){console.log(o),deleteLocal("user"),n.go("login")},e.Error())}}]),angular.module("Application").controller("DashboardCtrl",function(){}),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,o,t,e){o.user={email:"",password:""},o.login=function(){var a=o.user;""!==a.email&&a.password&&t.login()._(a,e.OneData("token",function(o){saveLocal("user",o),n.go("application.dashboard")}),e.Error())}}]),angular.module("Application").controller("MagnitudesCtrl",function(){}),angular.module("Application").controller("TasksCtrl",function(){}),angular.module("Application").controller("ZonesCtrl",function(){}),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/main.html",'<ng-include src="\'/views/_application/__utils/popover-main.html\'"></ng-include>\n<ng-include src="\'/views/_application/__utils/popover-user.html\'"></ng-include>\n<div layout="row" flex>\n    <md-sidenav layout="column" flex="20" class="md-sidenav-left md-whiteframe-z2"  id="sidebar" md-component-id="left" md-is-locked-open="$mdMedia(\'gt-sm\')"  md-theme="smartTheme">\n        <header class="md-whiteframe-2dp">\n            <md-toolbar layout="row" ng-init="showMain=false">\n                <h3 class="md-toolbar-tools" flex="80" layout="row">\n                    <i class="icon house_with_garden_36" flex="20"></i>\n                    <span flex>{{titleMain}}</span>\n                </h3>\n                <md-button aria-label="Open main menu" class="md-icon-button" flex ng-click="showMain=!showMain; showOptions=false">\n                    <md-icon  md-font-icon="mdi-apps" class="mdi"></md-icon>\n                </md-button>\n                \n\n            </md-toolbar>\n\n        </header>\n\n        <md-content>\n            <md-subheader class="md-primary" layout="row" ng-init="showOptions=false" layout-align="center center" ng-click="showOptions=!showOptions; showMain=false">\n                <span flex>{{user.email}}\n                </span>\n                <md-icon md-font-icon="mdi-chevron-down" class="mdi md-primary" flex ></md-icon>\n            </md-subheader>\n\n            \n        </md-content>\n\n    </md-sidenav>\n\n\n    <div layout="column" flex ui-view="content">\n     \n\n    </div>\n</div>\n\n\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_login/main.html",'<ui-title>Sign in</ui-title>\n\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="smartTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><i class="icon house_with_garden_72"></i><br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Log in to your account</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Email</label>\n\n                    <input type="email" required name="email" ng-model="user.email" ng-pattern="/^.+@.+\\..+$/" >\n                    <div ng-messages="loginForm.email.$error" multiple md-auto-hide="false" ng-if=\'loginForm.email.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Password</label>\n\n                    <input ng-model="user.password" type="password" name="password" required>\n                    <div ng-messages="loginForm.password.$error" md-auto-hide="false" ng-if="loginForm.password.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="login()" flex flex-sm="100" ng>Login</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="mdi mdi-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/main.html","<ui-title>Dashboard</ui-title>\n\n\nhello world")}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/main.html","<ui-title>Magnitudes</ui-title>\nhello magnitudes")}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_tasks/main.html","<ui-title>Tasks</ui-title>\nhello tasks")}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/main.html","<ui-title>Zones</ui-title>\nHello zones")}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-main.html",'<div class="popover-layer" ng-if="showMain" ng-click="closePopoverMain()"></div>\n\n\n<div class="popover-main md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showMain}" ng-if="showMain">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column"   ui-sref="application.dashboard" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-bowling" class="mdi" flex></md-icon>\n            <span flex> Dashboard</span>\n\n        </a>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.zones" layout-align="space-around center">\n\n            <md-icon  md-font-icon="mdi-basecamp" class="mdi" flex></md-icon>\n            <span flex>Zones</span>\n        </a>\n    </div>\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.tasks" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-alarm-check" class="mdi" flex></md-icon>\n            <span flex>Tasks</span>\n        </a>\n        <a class="popover-main-link" flex layout="column"  ui-sref="application.magnitudes" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-beer" class="mdi" flex></md-icon>\n            <span flex>Magnitudes</span>\n        </a>\n    </div>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-user.html",'<div class="popover-layer" ng-if="showOptions" ng-click="closePopoverOptions()"></div>\n<div class="popover-user-options md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showOptions}" ng-if="showOptions">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div layout="column" layout-align="space-between none" class="popover-content">\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-account-circle" flex="40"></i>\n            <span  flex>Account</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-football-helmet" flex="40"></i>\n            <span flex>Invite</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-power" flex="40"></i>\n            <span ng-click="logout()" flex>Logout</span>\n\n        </a>\n\n    </div>\n\n\n</div>')}])}(),angular.module("Application").directive("uiTitle",["$rootScope",function(n){return{restrict:"E",compile:function(o){var t=o[0].innerText;n.titleMain=t,o.attr("class","hide"),o.empty()}}}]),angular.module("Application").filter("nofirst",function(){return function(n){return n?n.slice(1):""}}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,o){return{env:-1==o.absUrl().indexOf("localhost")?"prod":"dev",prod:{protocol:"https",host:"smart-town-db.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5060",root:"api"},getApiPath:function(n){var o=this[this.env];return o.protocol+"://"+o.host+(""!==o.port?":"+o.port:"")+"/"+o.root+"/"+n},rest:function(o,t,e){var a=n(this.getApiPath(o),e||{},t||{});return a}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,o){return{request:function(n){n.headers=n.headers||{};var o=getLocal("user");return!n.headers.Authorization&&o&&(n.headers.Authorization=o),n},requestError:function(o){return n.reject(o)},response:function(o){return"ERROR"===o.data.status?n.reject(o):o||n.when(o)},responseError:function(t){return 403===t.status?(console.error("Error de acceso"),localStorage.user="",void o.path("/")):n.reject(t)}}}]),angular.module("Application").factory("OAuthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base+"/login",{_:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{_:{method:"GET",params:{}}})},whoiam:function(){return n.rest(this.base+"/whoiam",{_:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("RequestService",["$rootScope",function(n){return{Error:function(){return function(o){var t=o.data;n.showSimpleToast(t.error)}},OneData:function(o,t){return function(e){if(!e.data)return n.showSimpleToast("No data");var a=e.data[o];return a?void t(a):n.showSimpleToast("No Values")}}}}]);
//# sourceMappingURL=data:application/json;base64,
