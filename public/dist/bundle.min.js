function saveLocal(n,e){localStorage[n]=e}function getLocal(n){return localStorage[n]}function deleteLocal(n){localStorage.removeItem(n)}var app=angular.module("Application",["ui.router","ngResource","ngMessages","ngAnimate","ngMaterial","ngMap"]);angular.module("Application").run(["$rootScope","$state","$mdToast","$state",function(n,e,t,e){n.go=function(n,t){e.go(n,t)},n.showSimpleToast=function(n){t.show(t.simple().textContent(n).position("top right").hideDelay(3e3))},n.statify=function(n,t){return t?e.href(n+"."+t.toLowerCase()):""},n.goWithDestroy=function(e,t,a){e.$destroy(),n.go(t,a)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,e,t,a){var i=function(n){getLocal("user")||n.go("login")};i.$inject=["$rootScope"],n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getLocal("user")&&n.go("application.dashboard")}],templateUrl:"/views/_login/main.html",controller:"LoginCtrl"}).state("application",{url:"",onEnter:i,templateUrl:"/views/_application/main.html",controller:"ApplicationCtrl","abstract":!0}).state("application.dashboard",{url:"/",onEnter:i,views:{content:{templateUrl:"/views/_application/_dashboard/main.html",controller:"DashboardCtrl"}}}).state("application.tasks",{url:"/tasks",onEnter:i,views:{content:{templateUrl:"/views/_application/_tasks/main.html",controller:"TasksCtrl"}}}).state("application.magnitudes",{url:"/magnitudes",onEnter:i,views:{content:{templateUrl:"/views/_application/_magnitudes/main.html"}},"abstract":!0}).state("application.magnitudes.list",{url:"",onEnter:i,views:{inner:{templateUrl:"/views/_application/_magnitudes/list.html",controller:"MagnitudesCtrl"}}}).state("application.magnitudes.create",{url:"/create",onEnter:i,views:{inner:{templateUrl:"/views/_application/_magnitudes/create.html",controller:"CreateMagnitudeCtrl"}}}).state("application.magnitudes.detail",{url:"/:id",onEnter:i,views:{inner:{templateUrl:"/views/_application/_magnitudes/show.html",controller:"DetailMagnitudeCtrl"}}}).state("application.zones",{url:"/zones",onEnter:i,views:{content:{templateUrl:"/views/_application/_zones/main.html"}},"abstract":!0}).state("application.zones.list",{url:"",onEnter:i,views:{inner:{templateUrl:"/views/_application/_zones/list.html",controller:"ZonesCtrl"}}}).state("application.zones.create",{url:"/create",onEnter:i,views:{inner:{templateUrl:"/views/_application/_zones/create.html",controller:"CreateZoneCtrl"}}}).state("application.zones.detail",{url:"/:id",onEnter:i,views:{inner:{templateUrl:"/views/_application/_zones/show.html",controller:"DetailZoneCtrl"}}}),e.otherwise("/login"),t.interceptors.push("AuthInterceptor"),a.theme("smartTheme").primaryPalette("orange").accentPalette("yellow")}]),angular.module("Application").controller("ApplicationCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,e,t,a){e.user={},e.array_colors=Array.apply(null,Array(27)).map(function(){return"#FF9800"}),e.closePopoverMain=function(){e.showMain=!1},e.closePopoverOptions=function(){e.showOptions=!1},this.WhoIAm=function(){t.whoiam()._(a.OneDataByKey("email",function(n){e.user.email=n}),a.Error())},this.WhoIAm(),e.logout=function(){t.logout()._(function(e){console.log(e),deleteLocal("user"),n.go("login")},a.Error())}}]),angular.module("Application").controller("DashboardCtrl",function(){}),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,e,t,a){e.user={email:"",password:""},e.login=function(){var i=e.user;""!==i.email&&i.password&&t.login()._(i,a.OneDataByKey("token",function(e){saveLocal("user",e),n.go("application.dashboard")}),a.Error())}}]),angular.module("Application").controller("MagnitudesCtrl",["$scope","$rootScope","MagnitudeService","RequestService","ThemeService",function(n,e,t,a,i){i.Content(n,"background-theme-orange"),n.go=function(t,a){e.goWithDestroy(n,t,a)},n.create=function(){e.go("application.magnitudes.create")};var o=["ANALOG","DIGITAL"],l=["record","adjust"];n.searchObject={text:""},n.Icon=function(n){return"mdi-"+l[n]},n.Type=function(n){return o[n]},n["delete"]=function(e){t.Basic().del({id:e},a.Data(function(e){n.magnitudes=e}),a.Error())},n.goToDetail=function(e){n.go("application.magnitudes.detail",{id:e})},this.All=function(){t.Basic().all(a.Data(function(e){n.magnitudes=e}),a.Error())},this.All()}]),angular.module("Application").controller("CreateMagnitudeCtrl",["$rootScope","$scope","MagnitudeService","RequestService",function(n,e,t,a){e.goBack=function(){n.go("application.magnitudes.list")},e.magnitude={display_name:"",type:"0"},e.create=function(){var n=angular.copy(e.magnitude);""==n.display_name&&(n.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),t.Basic()["new"](n,a.Message(e.goBack),a.Error())}}]),angular.module("Application").controller("DetailMagnitudeCtrl",["$rootScope","$scope","$stateParams","$mdDialog","MagnitudeService","RequestService","ThemeService",function(n,e,t,a,i,o,l){l.Content(e,"background-theme-orange"),e.go=function(t,a){n.goWithDestroy(e,t,a)},e.goBack=function(){e.go("application.magnitudes.list")};var r=t.id;e.SelectedIndex="info",e.Digital=function(){return e.magnitude?"1"===e.magnitude.type:!1},e.editable={name:!1,type:!1,digital_units:!1},e.select=function(n){e.magnitude.type&&("conversions"!==n&&1!==e.magnitude.type||"conversions"==n&&0==e.magnitude.type)&&(e.SelectedIndex=n)},e.changeDisplayName=function(){i.DisplayName().set({id:r},{display_name:e.magnitude.display_name},o.Data(function(n){e.magnitude=n,e.editable.name=!1}),o.Error())},e.changeType=function(){i.Type().set({id:r},{type:e.magnitude.type},o.Data(function(n){e.magnitude=n,e.editable.type=!1}),o.Error())},e.changeDigitalUnits=function(){i.DigitalUnits().set({id:r},{digital_units:e.magnitude.digital_units},o.Data(function(n){e.magnitude=n,e.editable.digital_units=!1}),o.Error())},e.addAnalogUnit=function(){var n=e.magnitude.analog_units.length,t={display_name:"Unit"+n};i.AnalogUnits()["new"]({id:r},{analog_unit:t},o.Data(function(t){e.magnitude=t,e.magnitude.analog_units[n].editable=!0}),o.Error())},e.updateAnalogUnit=function(n,t){i.AnalogUnits().update({id:r},{analog_unit:n},o.Data(function(n){e.magnitude=n,e.magnitude.analog_units[t].editable=!1}),o.Error())},e.deleteAnalogUnit=function(n){i.AnalogUnits()["delete"]({id:r,analog_id:n._id},o.Data(function(n){e.magnitude=n}),o.Error())};var d=function(n,t,i){a.show({controller:["$scope","$mdDialog","conversion","units",function(n,e,t,a){n.conversion=t,n.units=a,n.errors={unitsEmpty:!1,unitsEquals:!1,DisplayNameEmpty:!1},n.hide=function(){e.hide()},n.cancel=function(){e.cancel()};var i=function(){return Object.keys(n.errors).forEach(function(e){n.errors[e]=!1}),n.errors.DisplayNameEmpty=""===n.conversion.display_name,n.errors.unitsEmpty=!n.conversion.unitA||""===n.conversion.unitA||!n.conversion.unitB||""===n.conversion.unitB,n.errors.unitsEquals=n.conversion.unitA===n.conversion.unitB,Object.keys(n.errors).reduce(function(e,t){return e||n.errors[t]},!1)};n.confirm=function(){i()||e.hide(n.conversion)}}],templateUrl:"/views/_application/_magnitudes/conversion.html",parent:angular.element(document.body),targetEvent:n,clickOutsideToClose:!0,locals:{conversion:t,units:e.magnitude.analog_units}}).then(i)};e.addConversion=function(n){var t=e.magnitude.conversions.length,a={display_name:"Conversion"+t};d(n,a,function(n){i.Conversions()["new"]({id:r},{conversion:n},o.Data(function(n){e.magnitude=n}),o.Error())})},e.updateConversion=function(n,t){d(n,t,function(n){i.Conversions().update({id:r},{conversion:n},o.Data(function(n){e.magnitude=n}),o.Error())})},e.deleteConversion=function(n){i.Conversions()["delete"]({id:r,conversion_id:n._id},o.Data(function(n){e.magnitude=n}),o.Error())},e.getUnitName=function(n){return _.find(e.magnitude.analog_units,function(e){return e._id===n}).display_name},this.MagnitudeById=function(){i.Basic().byId({id:r},o.Data(function(n){e.magnitude=n}),o.Error())},this.MagnitudeById()}]),angular.module("Application").controller("TasksCtrl",function(){}),angular.module("Application").controller("ZonesCtrl",["$scope","$rootScope","ThemeService","ZoneService","RequestService",function(n,e,t,a,i){t.Content(n,"background-theme-orange"),n.go=function(t,a){e.goWithDestroy(n,t,a)},n.searchObject={text:""};var o={rectangle:"apple-finder",circle:"arrow-down-bold-circle-outline",polygon:"arrow-down-bold-hexagon-outline"};n.Icon=function(n){return"mdi-"+o[n]},n.goToDetail=function(e){n.go("application.zones.detail",{id:e})},n.create=function(){e.go("application.zones.create")},n["delete"]=function(e){a.Basic().del({id:e},i.Data(function(e){n.zones=e}),i.Error())},this.All=function(){a.Basic().all(i.Data(function(e){n.zones=e}),i.Error())},this.All()}]),angular.module("Application").controller("CreateZoneCtrl",["$scope","$rootScope","NgMap","ZoneService","RequestService",function(n,e,t,a,i){var o=this;n.self=o,n.goBack=function(){e.go("application.zones.list")},n.newShape=!0,n.zone={display_name:"",center:[],shape:{type:"rectangle"}},n.setShape=function(e){n.zone.shape={type:e},n.newShape=!0},t.getMap().then(function(e){o.centerChanged=function(t){n.$$phase||n.$apply(function(){n.zone.center[0]=e.center.lat(),n.zone.center[1]=e.center.lng()})},o.onMapOverlayCompleted=function(e){n.newShape=!1;var t=e.type,a=e.overlay,i={type:t};switch(t){case"rectangle":var o=a.getBounds(),l=o.getNorthEast(),r=o.getSouthWest();i.bounds=[[r.lat(),r.lng()],[l.lat(),l.lng()]];break;case"circle":i.radius=a.getRadius();var d=a.getCenter();i.center=[d.lat(),d.lng()];break;case"polygon":i.paths=a.getPath().j.map(function(n){return[n.lat(),n.lng()]})}e.overlay.setMap(null),n.$apply(function(){n.zone.shape=i})},o.trackPolygon=function(){var t=e.shapes.polygon;t.getPaths().forEach(function(e){google.maps.event.addListener(e,"insert_at",function(){n.$apply(function(){n.zone.shape.paths=t.getPath().j.map(function(n){return[n.lat(),n.lng()]})})}),google.maps.event.addListener(e,"remove_at",function(){n.$apply(function(){n.zone.shape.paths=t.getPath().j.map(function(n){return[n.lat(),n.lng()]})})}),google.maps.event.addListener(e,"set_at",function(){n.$apply(function(){n.zone.shape.paths=t.getPath().j.map(function(n){return[n.lat(),n.lng()]})})})})},o.changeCenterCircle=function(e){n.$apply(function(){var t=e.latLng;n.zone.shape.center=[t.lat(),t.lng()]})},o.changeCircleRadius=function(t){var a=e.shapes.circle;n.$$phase||n.$apply(function(){n.zone.shape.radius=a.getRadius()})},o.changeRectangle=function(){var t=e.shapes.rectangle,a=t.getBounds(),i=a.getNorthEast(),o=a.getSouthWest();n.$$phase||n.$apply(function(){n.zone.shape.bounds=[[o.lat(),o.lng()],[i.lat(),i.lng()]]})}}),n.getCurrentLocation=function(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(e){n.$apply(function(){n.zone.center[0]=e.coords.latitude,n.zone.center[1]=e.coords.longitude})})},n.create=function(){var e=angular.copy(n.zone);""==e.display_name&&(e.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),a.Basic()["new"](e,i.Message(n.goBack),i.Error())},n.getCurrentLocation()}]),angular.module("Application").controller("DetailZoneCtrl",["$rootScope","$scope","$stateParams","ZoneService","RequestService","ThemeService","NgMap",function(n,e,t,a,i,o,l){var r=this;e.self=r,o.Content(e,"background-theme-orange"),e.go=function(t,a){n.goWithDestroy(e,t,a)},e.goBack=function(){e.go("application.zones.list")};var d=t.id;e.SelectedIndex="info",e.select=function(n){e.SelectedIndex=n},e.editable={display_name:!1,description:!1,keywords:!1,location:!1},e.newShape=!1,e.changeDisplayName=function(){a.DisplayName().set({id:d},{display_name:e.zone.display_name},i.Data(function(n){e.zone=n,e.editable.display_name=!1}),i.Error())},e.changeDescription=function(){a.Description().set({id:d},{description:e.zone.description},i.Data(function(n){e.zone=n,e.editable.description=!1}),i.Error())},e.changeKeywords=function(){a.Keywords().set({id:d},{keywords:e.zone.keywords},i.Data(function(n){e.zone=n,e.editable.keywords=!1}),i.Error())},l.getMap().then(function(n){r.centerChanged=function(t){!e.$$phase&&e.editable.location&&e.$apply(function(){e.zone.center[0]=n.center.lat(),e.zone.center[1]=n.center.lng()})},r.onMapOverlayCompleted=function(n){e.newShape=!1;var t=n.type,a=n.overlay,i={type:t};switch(t){case"rectangle":var o=a.getBounds(),l=o.getNorthEast(),r=o.getSouthWest();i.bounds=[[r.lat(),r.lng()],[l.lat(),l.lng()]];break;case"circle":i.radius=a.getRadius();var d=a.getCenter();i.center=[d.lat(),d.lng()];break;case"polygon":i.paths=a.getPath().j.map(function(n){return[n.lat(),n.lng()]})}n.overlay.setMap(null),e.$apply(function(){e.zone.shape=i})},r.getMap=function(){return n}}),e.setShape=function(n){e.zone.shape={type:n},e.newShape=!0},e.changeLocation=function(){var n=e.zone.shape,t=r.getMap().shapes;switch(n.type){case"rectangle":var o=t.rectangle,l=o.getBounds(),s=l.getNorthEast(),c=l.getSouthWest();n.bounds=[[c.lat(),c.lng()],[s.lat(),s.lng()]];break;case"circle":var m=t.circle;n.radius=m.getRadius();var u=m.getCenter();n.center=[u.lat(),u.lng()];break;case"polygon":var p=t.polygon;n.paths=p.getPath().j.map(function(n){return[n.lat(),n.lng()]})}a.Shape().set({id:d},{shape:e.zone.shape},i.Data(function(n){e.zone=n,e.editable.location=!1}),i.Error())},e.updateLocation=function(){e.editable.location=!0;var n=e.zone.shape;switch(n.type){case"circle":n.radius&&n.center?0!=n.radius&&0!=n.center.length||(e.newShape=!0):e.newShape=!0;break;case"rectangle":n.bounds?0==n.bounds.length&&(e.newShape=!0):e.newShape=!0;break;case"polygon":n.paths?0==n.paths.length&&(e.newShape=!0):e.newShape=!0}},e.getCurrentLocation=function(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(n){e.$apply(function(){e.zone.center[0]=n.coords.latitude,e.zone.center[1]=n.coords.longitude})})},this.ZoneById=function(){a.Basic().byId({id:d},i.Data(function(n){e.zone=n}),i.Error())},this.ZoneById()}]),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/main.html",'<ng-include src="\'/views/_application/__utils/popover-main.html\'"></ng-include>\n<ng-include src="\'/views/_application/__utils/popover-user.html\'"></ng-include>\n<div layout="row" flex>\n    <md-sidenav layout="column" flex="20" class="md-sidenav-left md-whiteframe-z2"  id="sidebar" md-component-id="left" md-is-locked-open="$mdMedia(\'gt-sm\')"  md-theme="smartTheme">\n        <header class="md-whiteframe-2dp">\n            <md-toolbar layout="row" ng-init="showMain=false">\n                <a class="md-toolbar-tools" flex="80" ng-href="{{statify(\'application\', titleMain)}}" layout="row">\n                    <i class="icon house_with_garden_36" flex="20"></i>\n                    <span flex>{{titleMain}}</span>\n\n                </a>\n                <md-button aria-label="Open main menu" class="md-icon-button" flex ng-click="showMain=!showMain; showOptions=false">\n                    <md-icon  md-font-icon="mdi-apps" class="mdi"></md-icon>\n                </md-button>\n\n\n            </md-toolbar>\n\n        </header>\n\n        <md-content>\n            <md-subheader class="md-primary" layout="row" ng-init="showOptions=false" layout-align="center center" ng-click="showOptions=!showOptions; showMain=false">\n                <span flex>{{user.email}}\n                </span>\n                <md-icon md-font-icon="mdi-chevron-down" class="mdi md-primary" flex ></md-icon>\n            </md-subheader>\n\n\n        </md-content>\n\n    </md-sidenav>\n\n\n    <div flex layout="column">\n        <div ui-view="content" id="content" flex></div>\n\n            <div flex class="footer">\n            <md-divider></md-divider>\n            <md-toolbar layout="row">\n\n                <h6 flex-offset="85"><i class="mdi mdi-copyright"></i><span>Smart Town 2016</span></h6>\n\n\n            </md-toolbar>\n\n        </div>\n\n    </div>\n</div>\n\n\n\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_login/main.html",'<ui-title>Sign in</ui-title>\n\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="smartTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><i class="icon house_with_garden_72"></i><br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Log in to your account</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Email</label>\n\n                    <input type="email" required name="email" ng-model="user.email" ng-pattern="/^.+@.+\\..+$/" >\n                    <div ng-messages="loginForm.email.$error" multiple md-auto-hide="false" ng-if=\'loginForm.email.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Password</label>\n\n                    <input ng-model="user.password" type="password" name="password" required>\n                    <div ng-messages="loginForm.password.$error" md-auto-hide="false" ng-if="loginForm.password.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="login()" flex flex-sm="100" ng>Login</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="mdi mdi-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/main.html","<ui-title>Dashboard</ui-title>\n\n\nhello world")}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/conversion.html",'<md-dialog aria-label="New Conversion"  ng-cloak class="conversion-dialog">\n    <form>\n        <md-toolbar>\n            <div class="md-toolbar-tools">\n                <h2>New Conversion</h2>\n                <span flex></span>\n                <md-button class="md-icon-button" ng-click="cancel()">\n                    <md-icon class="mdi" md-font-icon="mdi-close"  aria-label="Close dialog"></md-icon>\n                </md-button>\n            </div>\n        </md-toolbar>\n        <md-dialog-content md-theme="smartTheme">\n            <div class="md-dialog-content" layout="column">\n                <md-input-container flex >\n                    <label>Display Name</label>\n                    <input ng-model="conversion.display_name" type="text" aria-label="Analog Display Name" >\n                </md-input-container>\n\n                <div class="select-group" layout="row" layout-align="space-around center">\n                    <span flex="10">From</span>\n                    <md-input-container flex>\n                        <label>Unit A</label>\n                        <md-select ng-model="conversion.unitA">\n                            <md-option ng-repeat="unit in units" value="{{unit._id}}">\n                                {{unit.display_name}}\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n                    <span flex="10" flex-offset="5">To</span>\n                    <md-input-container flex>\n                        <label>Unit B</label>\n                        <md-select ng-model="conversion.unitB" flex>\n                            <md-option ng-repeat="unit in units" value="{{unit._id}}">\n                                {{unit.display_name}}\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n                </div>\n                <md-input-container  flex>\n                    <label>Operation</label>\n                    <input ng-model="conversion.operation" type="text" aria-label="Analog Display Name" >\n                </md-input-container>\n                \n                <div class="errors" flex>\n                    <p ng-if="errors.unitsEmpty" >Error: Units Empty</p>\n                    <p ng-if="errors.unitsEquals">Error: Units Equals</p>\n                    <p ng-if="errors.DisplayNameEmpty">Error: Display Name Empty</p>\n                </div>\n            </div>\n        </md-dialog-content>\n        <md-dialog-actions layout="row">\n\n            <span flex></span>\n            <md-button ng-click="cancel()">\n                Cancel\n            </md-button>\n            <md-button ng-click="confirm()" >\n                Confirm\n            </md-button>\n\n        </md-dialog-actions>\n    </form>\n</md-dialog>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Magnitude</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="magnitude.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>System Type</h3>\n            <p>Working with real numbers or with on(1) or off(0)</p>\n        </div>\n\n        <md-radio-group ng-model="magnitude.type" flex="50" flex-offset="30">\n            <md-radio-button value="0" class="md-primary">Analog</md-radio-button>\n            <md-radio-button value="1" class="md-primary">Digital</md-radio-button>\n        </md-radio-group>\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-click="create()">Create Magnitude</md-button>\n    </div>\n</md-content>\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" ng-model="searchObject.text" placeholder="Filter magnitudes">\n        </md-input-container>\n\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<md-content layout-padding layout="column" md-theme="smartTheme" class="list">\n\n    <md-list  ng-cloak class="list-content">\n        <div ng-repeat="magnitude in magnitudes| search:\'display_name\':searchObject">\n            <div  layout="row">\n                <md-list-item  ng-click="goToDetail(magnitude._id)" flex>\n                    <md-icon  md-font-icon="{{Icon(magnitude.type)}}" class="mdi list-type-icon"></md-icon>  \n                    <p> {{ magnitude.display_name }} </p>\n                    <p  flex-offset="30"><span class="md-whiteframe-1dp" ng-class="{\'badge\':magnitude.type===\'0\', \'badge-negative\':magnitude.type===\'1\'}">{{Type(magnitude.type)}}</span></p>\n\n                </md-list-item>\n\n                <md-button class="md-primary" aria-label="Delete" ng-click="delete(magnitude._id)" flex="5">\n                    <i class="mdi mdi-delete"></i>\n                </md-button>\n            </div>\n            <md-divider ng-if="!$last"></md-divider>\n        </div>\n    </md-list>\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/main.html",'<ui-title>Magnitudes</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/show.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>{{magnitude.display_name}}</span>\n        </h2>\n    </div>\n</md-toolbar>\n\n<div  class="detail-toolbar md-toolbar-tools" layout="row"layout-align="space-between stretch">\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'info\')" ng-class="{\'active\':SelectedIndex===\'info\'}">\n        <span>Info</span>  <i class="mdi mdi-information-outline"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'units\')" ng-class="{\'active\':SelectedIndex===\'units\'}">\n        <span>Units</span>  <i class="mdi mdi-numeric"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'conversions\')" ng-class="{\'active\':SelectedIndex===\'conversions\', \'disable\':Digital()}">\n        <span>Conversions</span> <i class="mdi mdi-stethoscope"></i>\n    </div>\n</div>\n\n<md-content  ng-switch on="SelectedIndex" class="detail background-theme-orange" layout-padding ng-class="{\'analog-content\':!Digital() }">\n    <div class="detail-info mt5" ng-switch-when="info" layout="row" layout-align="center stretch">\n\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" >\n                    <h3>Display Name</h3>\n                </div>\n            </md-toolbar>\n            <md-card-content layout="row" layout-align="center center" md-theme="smartTheme">\n                <md-input-container flex layout="row">\n                    <input ng-model="magnitude.display_name" type="text" flex flex-order="1" ng-disabled="!editable.name" aria-label="Display Name">\n                    <md-button flex="5" flex-order="2" ng-click="editable.name=true" ng-if="!editable.name" class="md-primary" aria-label="Start Update Display Name">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n                    <md-button flex="5" flex-order="2" ng-click="changeDisplayName()" ng-if="editable.name" class="md-primary"\n                               aria-label="Update Display Name">\n                        Update\n                    </md-button>\n                </md-input-container>\n            </md-card-content>\n        </md-card>\n\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" >\n                    <h3>System Type</h3>\n                </div>\n            </md-toolbar>\n            <md-card-content layout-align="center center" layout="row" class="radio" md-theme="smartTheme">\n                <md-radio-group ng-model="magnitude.type" layout="row">\n                    <md-radio-button value="0" flex class="md-primary" ng-disabled="!editable.type">Analog</md-radio-button>\n                    <md-radio-button value="1" flex class="md-primary" ng-disabled="!editable.type">Digital</md-radio-button>\n                </md-radio-group>\n                <md-button flex="5" flex-order="2" ng-click="editable.type=true" ng-if="!editable.type" class="md-primary" aria-label="Start update type">\n                    <i class="mdi mdi-pencil"></i>\n                </md-button>\n                <md-button flex="5" flex-order="2" ng-click="changeType()" ng-if="editable.type" class="md-primary" aria-label="Update type">\n                    Update\n                </md-button>\n            </md-card-content>\n        </md-card>\n    </div>\n    <div class="detail-units" ng-switch-when="units"  ng-switch on="magnitude.type" >\n        <div ng-switch-when="1" class="digital">\n            <md-card>\n                <md-card-header>\n                    <md-card-header-text>\n                        <span class="md-title">Digital System</span>\n                        <span class="md-subhead">Meaning of Digital Units</span>\n                    </md-card-header-text>\n                </md-card-header>\n                <md-card-title>\n                    <md-card-title-text>\n                        <span class="md-headline">  <i class="mdi mdi-earth"></i>ON</span>\n                        <md-input-container md-theme="smartTheme">\n                            <input ng-model="magnitude.digital_units.on" type="text"  ng-disabled="!editable.digital_units" aria-label="Digital Unit On">\n                        </md-input-container>\n                    </md-card-title-text>\n                </md-card-title>\n                <md-card-title>\n                    <md-card-title-text>\n                        <span class="md-headline">    <i class="mdi mdi-earth-off" flex></i> OFF </span>\n                        <md-input-container md-theme="smartTheme">\n                            <input ng-model="magnitude.digital_units.off" type="text" ng-disabled="!editable.digital_units" aria-label="Digital Unit Off">\n                        </md-input-container>\n                    </md-card-title-text>\n                </md-card-title>\n                <md-card-actions layout="row" layout-align="end center" md-theme="smartTheme">\n                    <md-button ng-click="editable.digital_units=true" ng-if="!editable.digital_units" class="md-primary">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n\n                    <md-button  ng-if="editable.digital_units" class="md-primary" ng-click="changeDigitalUnits()">\n                        Update\n                    </md-button>\n                </md-card-actions>\n            </md-card>\n\n\n\n        </div>\n        <div ng-switch-when="0" class="analog md-whiteframe-1dp">\n            <md-toolbar class="md-whiteframe-1dp analog-toolbar">\n                <div class="md-toolbar-tools">\n                    <h4>Analog System</h4>\n                    <span flex></span>\n                    <md-button class="md-fab" ng-click="addAnalogUnit()" aria-label="Add Analog Unit">\n                        <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n                    </md-button>\n                </div>\n            </md-toolbar>\n\n            <md-list class="analog-list">\n                <md-list-item ng-repeat="unit in magnitude.analog_units | orderBy:\'-\'" layout="row"  md-theme="smartTheme">\n                    <md-button  ng-if="unit.editable" class="md-delete md-primary" ng-click="deleteAnalogUnit(unit)" aria-label=" Delete Analog Unit">\n                        <i class="mdi mdi-delete"></i>\n                    </md-button>\n                    <md-input-container flex class="ml2">\n                        <label>Display Name</label>\n                        <input ng-model="unit.display_name" type="text" ng-disabled="!unit.editable" aria-label="Analog Display Name" >\n                    </md-input-container>\n                    <md-input-container flex-offset="10" flex="20" class="symbol">\n                        <label>Symbol</label>\n                        <input ng-model="unit.symbol" type="text" ng-disabled="!unit.editable" aria-label="Analog Symbol" >\n                    </md-input-container>\n                    <md-button flex="nogrow"  ng-if="!unit.editable" aria-label="Start Updating" ng-click="unit.editable=true" class="md-primary">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n                    <md-button flex="nogrow" ng-if="unit.editable"  aria-label="Update Analog Unit" ng-click="updateAnalogUnit(unit, $index)" class="md-primary">\n                        Update\n                    </md-button>\n                </md-list-item>\n\n            </md-list>\n\n\n        </div>\n\n    </div>\n    <div class="detail-conversions" ng-switch-when="conversions">\n        <div class="md-whiteframe-1dp detail-content">\n            <md-button class="md-fab button-add" aria-label="Add Conversion" ng-click="addConversion($event)">\n                <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n            </md-button>\n            <md-list md-theme="smartTheme">\n                <div ng-repeat="conversion in magnitude.conversions | orderBy:\'-\'" >\n                    <md-list-item layout="row">\n\n                        <h3 flex="20" flex-offset="5">{{ conversion.display_name }}</h3>\n                        <p flex="20">\n                            From {{getUnitName(conversion.unitA)}} To  {{getUnitName(conversion.unitB)}}\n                        </p>\n\n                        <md-input-container class="operation" flex="30">\n                            <label>Operation</label>\n                            <input ng-model="conversion.operation" type="text" ng-disabled="true" aria-label="Conversion Operarion" placeholder="No operation">\n                        </md-input-container>\n\n                        <md-button flex="nogrow" aria-label="Update Conversion" ng-click="updateConversion($event, conversion)" class="md-primary md-delete">\n                            <i class="mdi mdi-pencil"></i>\n                        </md-button>\n                        \n                         <md-button flex="nogrow" aria-label="Delete Conversion" class="md-primary md-delete" ng-click="deleteConversion(conversion)">\n                            <i class="mdi mdi-delete"></i>\n                        </md-button>\n\n                    </md-list-item>\n                    <md-divider ng-if="!$last"></md-divider>\n                </div>\n                <md-list-item ng-if="magnitude.conversions.length==0">\n                    No Conversions\n                </md-list-item>\n\n            </md-list>\n        </div>\n    </div>\n\n</md-content>\n\n\n');
}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_tasks/main.html","<ui-title>Tasks</ui-title>\nhello tasks")}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Zone</span>\n        </h2>\n        <div flex="20"  class="button-create" layout="row" layout-align="center center" >\n            <md-button class="md-raised md-primary" md-theme="smartTheme" ng-click="create()">Create</md-button>\n        </div>\n    </div>\n</md-toolbar>\n<md-content layout="column" md-theme="smartTheme" id="zone-create">\n    <div layout="row" flex class="zone-input-name" >\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name (optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="zone.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="column" flex class="zone-draw">\n        <div flex  layout="row">\n            <h3 flex="15" flex-offset="5">Draw Zone</h3>\n\n        </div >\n\n        <div flex  layout="row">\n            <div  layout="row" flex="40">\n                <span class="location" flex="20">Center <br>\n                    <i class="mdi mdi-crosshairs-gps" ng-click="getCurrentLocation()"></i>\n                </span>\n\n                <md-input-container flex>\n                    <label>Latitude</label>\n                    <input input="text" ng-model="zone.center[0]">\n                </md-input-container>\n                <md-input-container flex>\n                    <label>Longitude</label>\n                    <input input="text" ng-model="zone.center[1]">\n                </md-input-container>\n            </div>\n\n            <div layout="row" flex flex-offset="20" md-theme="smartTheme">\n\n                <md-button  class="md-raised md-primary"  aria-label="Rectangle" flex="10" ng-disabled="zone.shape.type===\'rectangle\'" ng-click="setShape(\'rectangle\')">\n                    <i class="mdi mdi-vector-rectangle"></i>\n                </md-button>\n                <md-button  class="md-raised md-primary"  aria-label="circle" flex="10" ng-disabled="zone.shape.type===\'circle\'" ng-click="setShape(\'circle\')" >\n                    <i class="mdi mdi-vector-circle"></i>\n                </md-button>\n                <md-button  class="md-raised md-primary" aria-label="Polygon" flex="10" ng-disabled="zone.shape.type===\'polygon\'" ng-click="setShape(\'polygon\')" >\n                    <i class="mdi mdi-vector-polygon"></i>\n                </md-button>\n            </div>\n\n        </div>\n\n        <ng-map flex zoom="11" center="{{zone.center}}" map-type-id="ROADMAP" on-center-changed="self.centerChanged()">\n\n            <drawing-manager ng-if="newShape"\n                             on-overlaycomplete="self.onMapOverlayCompleted()"\n                             drawing-control-options="{position: \'TOP_CENTER\',drawingModes:[\'{{zone.shape.type}}\']}"\n                             drawingControl="true"\n                             drawingMode="null">\n            </drawing-manager>\n\n            <shape id="polygon" name="polygon" ng-if="!newShape&&zone.shape.type===\'polygon\'" \n                   stroke-color="#FF0000" editable="true" on-mouseover="self.trackPolygon()"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   paths="{{zone.shape.paths}}" >\n            </shape>\n\n            <shape id="circle" name="circle" ng-if="!newShape&&zone.shape.type===\'circle\'" draggable="true"  on-dragend="self.changeCenterCircle()"  editable="true" on-radius_changed="self.changeCircleRadius()"\n                   stroke-color=\'#FF0000\' stroke-opacity="1.0"stroke-weight="2"\n                   center="{{zone.shape.center}}" radius="{{zone.shape.radius}}">\n            </shape>\n\n            <shape id="rectangle" name="rectangle"  ng-if="!newShape&&zone.shape.type===\'rectangle\'"\n                   stroke-color=\'#FF0000\' editable="true" on-bounds_changed="self.changeRectangle()"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   bounds="{{zone.shape.bounds}}">\n            </shape>\n        </ng-map>\n\n\n    </div>\n\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" ng-model="searchObject.text" placeholder="Filter zones">\n        </md-input-container>\n\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<md-content layout-padding layout="column" md-theme="smartTheme" class="list">\n\n    <md-list  ng-cloak class="list-content">\n        <div ng-repeat="zone in zones| search:\'display_name\':searchObject">\n            <div  layout="row">\n                <md-list-item  ng-click="goToDetail(zone._id)" flex>\n                    <md-icon  md-font-icon="{{Icon(zone.shape.type)}}" class="mdi list-type-icon"></md-icon>  \n                    <p> {{ zone.display_name }} </p>\n                   \n                </md-list-item>\n\n                <md-button class="md-primary" aria-label="Delete" ng-click="delete(zone._id)" flex="5">\n                    <i class="mdi mdi-delete"></i>\n                </md-button>\n            </div>\n            <md-divider ng-if="!$last"></md-divider>\n        </div>\n    </md-list>\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/main.html",'<ui-title>Zones</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/show.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>{{zone.display_name}}</span>\n        </h2>\n    </div>\n</md-toolbar>\n\n\n<div  class="detail-toolbar md-toolbar-tools" layout="row"layout-align="space-between stretch">\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'info\')" ng-class="{\'active\':SelectedIndex===\'info\'}">\n        <span>Info</span>  <i class="mdi mdi-information-outline"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'location\')" ng-class="{\'active\':SelectedIndex===\'location\'}">\n        <span>Location</span>  <i class="mdi mdi-map-marker"></i>\n    </div>\n\n</div>\n\n<md-content  ng-switch on="SelectedIndex" class="detail background-theme-orange" layout-padding >\n\n    <div class="detail-info" ng-switch-when="info" layout="column" layout-align="center stretch">\n        <div layout="row" layout-align="center stretch">\n            <md-card class="detail-form" flex>\n                <md-toolbar class="md-whiteframe-1dp">\n                    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                        <h3 flex>Display Name</h3>\n                        <md-button flex="5" ng-click="editable.display_name=true" ng-if="!editable.display_name" class="md-primary" aria-label="Start Update Display Name">\n                            <i class="mdi mdi-pencil orange"></i>\n                        </md-button>\n                        <md-button flex="5" ng-click="changeDisplayName()" ng-if="editable.display_name" class="md-primary" aria-label="Update Display Name">\n                            <span class="orange">Update</span>\n                        </md-button>\n                    </div>\n                </md-toolbar>\n                <md-card-content md-theme="smartTheme">\n                    <md-input-container class="md-block">\n                        <label>Name Zone</label>\n                        <input ng-model="zone.display_name" type="text" flex flex-order="1" ng-disabled="!editable.display_name" aria-label="Display Name">\n\n                    </md-input-container>\n                </md-card-content>\n            </md-card>\n\n            <md-card class="detail-form" flex>\n                <md-toolbar class="md-whiteframe-1dp">\n                    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                        <h3 flex>Description</h3>\n                        <md-button flex="5" ng-click="editable.description=true" ng-if="!editable.description" class="md-primary" aria-label="Start Update Description" >\n                            <i class="mdi mdi-pencil orange"></i>\n                        </md-button>\n                        <md-button flex="5"  ng-click="changeDescription()" ng-if="editable.description" class="md-primary"\n                                   aria-label="Update Description">\n                            <span class="orange">Update</span>\n                        </md-button>\n                    </div>\n                </md-toolbar>\n                <md-card-content md-theme="smartTheme">\n                    <md-input-container class="md-block">\n                        <label>About Zone</label>\n                        <textarea ng-model="zone.description" ng-disabled="!editable.description" md-maxlength="150" rows="5" md-select-on-focus aria-label="Description"></textarea>\n\n                    </md-input-container>\n                </md-card-content>\n            </md-card>\n        </div>\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                    <h3 flex>Keywords</h3>\n                    <md-button flex="5" ng-click="editable.keywords=true" ng-if="!editable.keywords" class="md-primary" aria-label="Start Update Keywords" >\n                        <i class="mdi mdi-pencil orange"></i>\n                    </md-button>\n                    <md-button flex="5"  ng-click="changeKeywords()" ng-if="editable.keywords" class="md-primary"\n                               aria-label="Update Keywords">\n                        <span class="orange">Update</span>\n                    </md-button>\n                </div>\n            </md-toolbar>\n            <md-card-content md-theme="smartTheme">\n                <md-chips ng-if="zone.keywords" ng-model="zone.keywords" readonly="!editable.keywords" md-enable-chip-edit="editable.keywords" ng-cloak></md-chips>\n            </md-card-content>\n        </md-card>\n    </div>\n\n    <div class="detail-zone-location" ng-switch-when="location">\n\n        <div class="md-whiteframe-1dp detail-options" layout="row" md-theme="smartTheme">\n\n            <md-button class="md-raised md-primary"  aria-label="Rectangle" flex="10" ng-disabled="!editable.location || zone.shape.type===\'rectangle\'" ng-click="setShape(\'rectangle\')">\n                <i class="mdi mdi-vector-rectangle"></i>\n            </md-button>\n            <md-button  class="md-raised md-primary"  aria-label="circle" flex="10" ng-disabled="!editable.location ||zone.shape.type===\'circle\'" ng-click="setShape(\'circle\')">\n                <i class="mdi mdi-vector-circle"></i>\n            </md-button>\n            <md-button  class="md-raised md-primary" aria-label="Polygon" flex="10" ng-disabled="!editable.location ||zone.shape.type===\'polygon\'" ng-click="setShape(\'polygon\')">\n                <i class="mdi mdi-vector-polygon"></i>\n            </md-button> \n\n\n            <div flex="5" class="center">Center</div>\n\n            <md-input-container flex="20" >\n                <label>Latitude</label>\n                <input input="text" ng-model="zone.center[0]" ng-disabled="!editable.location">\n            </md-input-container>\n            <md-input-container flex="20">\n                <label>Longitude</label>\n                <input input="text" ng-model="zone.center[1]" ng-disabled="!editable.location">\n            </md-input-container>  \n\n            <md-button flex="5" class="md-primary" aria-label="Current location" ng-disabled="!editable.location" ng-click="getCurrentLocation()" >\n                <i class="mdi mdi-crosshairs-gps" ></i>\n            </md-button>\n\n            <md-button flex="5" ng-click="updateLocation()" ng-if="!editable.location" class="md-primary" aria-label="Start Update Location" >\n                <i class="mdi mdi-pencil orange"></i>\n            </md-button>\n            <md-button flex="5"  ng-click="changeLocation()" ng-if="editable.location" class="md-primary"\n                       aria-label="Update Location">\n                <span class="orange">Update</span>\n            </md-button>\n\n        </div>\n\n        <ng-map zoom="11" center="{{zone.center}}" map-type-id="ROADMAP"  on-center-changed="self.centerChanged()">\n\n            <drawing-manager ng-if="newShape"\n                             on-overlaycomplete="self.onMapOverlayCompleted()"\n                             drawing-control-options="{position: \'TOP_CENTER\',drawingModes:[\'{{zone.shape.type}}\']}"\n                             drawingControl="true"\n                             drawingMode="null">\n            </drawing-manager>\n\n            <shape id="polygon" name="polygon" ng-if="!newShape&&zone.shape.type===\'polygon\'" \n                   stroke-color="#FF0000" editable="{{editable.location}}"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   paths="{{zone.shape.paths}}" >\n            </shape>\n\n            <shape id="circle" name="circle" ng-if="!newShape&&zone.shape.type===\'circle\'" draggable="{{editable.location}}" editable="{{editable.location}}"\n                   stroke-color=\'#FF0000\' stroke-opacity="1.0"stroke-weight="2"\n                   center="{{zone.shape.center}}" radius="{{zone.shape.radius}}">\n            </shape>\n\n            <shape id="rectangle" name="rectangle"  ng-if="!newShape&&zone.shape.type===\'rectangle\'"\n                   stroke-color=\'#FF0000\' editable="{{editable.location}}"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   bounds="{{zone.shape.bounds}}">\n            </shape>\n\n\n        </ng-map>\n\n\n\n    </div>\n\n\n\n</md-content>\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-main.html",'<div class="popover-layer" ng-if="showMain" ng-click="closePopoverMain()"></div>\n\n\n<div class="popover-main md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showMain}" ng-if="showMain">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column"   ui-sref="application.dashboard" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-bowling" class="mdi" flex></md-icon>\n            <span flex> Dashboard</span>\n\n        </a>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.zones.list" layout-align="space-around center">\n\n            <md-icon  md-font-icon="mdi-basecamp" class="mdi" flex></md-icon>\n            <span flex>Zones</span>\n        </a>\n    </div>\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.tasks" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-alarm-check" class="mdi" flex></md-icon>\n            <span flex>Tasks</span>\n        </a>\n        <a class="popover-main-link" flex layout="column"  ui-sref="application.magnitudes.list" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-beer" class="mdi" flex></md-icon>\n            <span flex>Magnitudes</span>\n        </a>\n    </div>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-user.html",'<div class="popover-layer" ng-if="showOptions" ng-click="closePopoverOptions()"></div>\n<div class="popover-user-options md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showOptions}" ng-if="showOptions">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div layout="column" layout-align="space-between none" class="popover-content">\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-account-circle" flex="40"></i>\n            <span  flex>Account</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-football-helmet" flex="40"></i>\n            <span flex>Invite</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-power" flex="40"></i>\n            <span ng-click="logout()" flex>Logout</span>\n\n        </a>\n\n    </div>\n\n\n</div>')}])}(),angular.module("Application").directive("uiTitle",["$rootScope",function(n){return{restrict:"E",compile:function(e){var t=e[0].innerText;n.titleMain=t,e.attr("class","hide"),e.empty()}}}]),angular.module("Application").filter("nofirst",function(){return function(n){return n?n.slice(1):""}}),angular.module("Application").filter("search",function(){return function(n,e,t){var a=t.text,i=n;if(n&&""!==a){var o=new RegExp("^"+a.toLowerCase(),"g");i=n.filter(function(n){var t=n[e].toLowerCase(),a=o.test(t);return a})}return i}}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,e){return{env:-1==e.absUrl().indexOf("localhost")?"prod":"dev",prod:{protocol:"https",host:"smart-town-db.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5060",root:"api"},getApiPath:function(n){var e=this[this.env];return e.protocol+"://"+e.host+(""!==e.port?":"+e.port:"")+"/"+e.root+"/"+n},rest:function(e,t,a){var i=n(this.getApiPath(e),a||{},t||{});return i}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,e){return{request:function(n){n.headers=n.headers||{};var e=getLocal("user");return!n.headers.Authorization&&e&&(n.headers.Authorization=e),n},requestError:function(e){return n.reject(e)},response:function(e){return"ERROR"===e.data.status?n.reject(e):e||n.when(e)},responseError:function(t){return 403===t.status?(console.error("Error de acceso"),localStorage.user="",void e.path("/")):n.reject(t)}}}]),angular.module("Application").factory("MagnitudeService",["ApiService",function(n){return{base:"magnitude",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},byId:{method:"GET",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id"}}})},DisplayName:function(){return n.rest(this.base+"/:id/display_name",{set:{method:"PUT",params:{id:"@id"}}})},Type:function(){return n.rest(this.base+"/:id/type",{set:{method:"PUT",params:{id:"@id"}}})},DigitalUnits:function(){return n.rest(this.base+"/:id/digital",{set:{method:"PUT",params:{id:"@id"}}})},AnalogUnits:function(){return n.rest(this.base+"/:id/analog/:analog_id",{"new":{method:"POST",params:{id:"@id"}},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id",analog_id:"@analog_id"}}})},Conversions:function(){return n.rest(this.base+"/:id/conversion/:conversion_id",{"new":{method:"POST",params:{id:"@id"}},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id",conversion_id:"@conversion_id"}}})}}}]),angular.module("Application").factory("OAuthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base+"/login",{_:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{_:{method:"GET",params:{}}})},whoiam:function(){return n.rest(this.base+"/whoiam",{_:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("RequestService",["$rootScope",function(n){return{Error:function(){return function(e){n.showSimpleToast(e.data.error)}},OneDataByKey:function(e,t){return function(a){if(!a.data)return n.showSimpleToast("No data");var i=a.data[e];return i?void t(i):n.showSimpleToast("No Values")}},Message:function(e){return function(t){return t.message?(n.showSimpleToast(t.message),void(e&&e())):n.showSimpleToast("Successful: No Message")}},Data:function(e){return function(t){if(!t.data)return n.showSimpleToast("No data");var a=t.data;e(a)}},InternalError:function(e){return function(){n.showSimpleToast(e)}}}}]),angular.module("Application").factory("ThemeService",["$rootScope",function(n){return{Content:function(n,e){var t=document.getElementById("content");t&&(t.classList.add(e),n.$on("$destroy",function(){t.classList.remove(e)}))}}}]),angular.module("Application").factory("ZoneService",["ApiService",function(n){return{base:"zone",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},byId:{method:"GET",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id"}}})},DisplayName:function(){return n.rest(this.base+"/:id/display_name",{set:{method:"PUT",params:{id:"@id"}}})},Description:function(){return n.rest(this.base+"/:id/description",{set:{method:"PUT",params:{id:"@id"}}})},Keywords:function(){return n.rest(this.base+"/:id/keywords",{set:{method:"PUT",params:{id:"@id"}}})},Shape:function(){return n.rest(this.base+"/:id/shape",{set:{method:"PUT",params:{id:"@id"}}})}}}]);
//# sourceMappingURL=data:application/json;base64,
