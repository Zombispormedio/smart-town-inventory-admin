function saveLocal(n,e){localStorage[n]=e}function getLocal(n){return localStorage[n]}function deleteLocal(n){localStorage.removeItem(n)}function reverse(n){var e=n;return e&&(e=_.clone(n).reverse()),e}function reverse2d(n){var e=n;return e&&(e=_.clone(n).map(function(n){return n.reverse()})),e}var app=angular.module("Application",["ui.router","ngResource","ngMessages","ngAnimate","ngMaterial","ngMap","angular-clipboard"]);angular.module("Application").run(["$rootScope","$state","$mdToast","$state",function(n,e,t,e){n.go=function(n,t){e.go(n,t)},n.showSimpleToast=function(n){t.show(t.simple().textContent(n).position("bottom left").hideDelay(1e3))},n.statify=function(n,t){return t?e.href(n+"."+t.toLowerCase()):""},n.goWithDestroy=function(e,t,a){e.$destroy(),n.go(t,a)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,e,t,a){var i=function(n){getLocal("user")||n.go("login")};i.$inject=["$rootScope"],n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getLocal("user")&&n.go("application.dashboard.list")}],templateUrl:"/views/_login/main.html",controller:"LoginCtrl"}).state("invitation",{url:"/invitation/:code",onEnter:["$rootScope",function(n){getLocal("user")&&n.go("application.dashboard.list")}],templateUrl:"/views/_invitation/main.html",controller:"InvitationCtrl"}).state("application",{url:"",onEnter:i,templateUrl:"/views/_application/main.html",controller:"ApplicationCtrl","abstract":!0}).state("application.tasks",{url:"/tasks",onEnter:i,views:{content:{templateUrl:"/views/_application/_tasks/main.html",controller:"TasksCtrl"}}}).state("application.magnitudes",{url:"/magnitudes",onEnter:i,views:{content:{templateUrl:"/views/_application/_magnitudes/main.html"}},"abstract":!0}).state("application.magnitudes.list",{url:"",onEnter:i,views:{inner:{templateUrl:"/views/_application/_magnitudes/list.html",controller:"MagnitudesCtrl"}}}).state("application.magnitudes.create",{url:"/create",onEnter:i,views:{inner:{templateUrl:"/views/_application/_magnitudes/create.html",controller:"CreateMagnitudeCtrl"}}}).state("application.magnitudes.detail",{url:"/:id?:tab",onEnter:i,views:{inner:{templateUrl:"/views/_application/_magnitudes/show.html",controller:"DetailMagnitudeCtrl"}}}).state("application.zones",{url:"/zones",onEnter:i,views:{content:{templateUrl:"/views/_application/_zones/main.html"}},"abstract":!0}).state("application.zones.list",{url:"",onEnter:i,views:{inner:{templateUrl:"/views/_application/_zones/list.html",controller:"ZonesCtrl"}}}).state("application.zones.create",{url:"/create",onEnter:i,views:{inner:{templateUrl:"/views/_application/_zones/create.html",controller:"CreateZoneCtrl"}}}).state("application.zones.detail",{url:"/:id?:tab",onEnter:i,views:{inner:{templateUrl:"/views/_application/_zones/show.html",controller:"DetailZoneCtrl"}}}).state("application.dashboard",{url:"/",onEnter:i,views:{content:{templateUrl:"/views/_application/_dashboard/main.html"}},"abstract":!0}).state("application.dashboard.list",{url:"",onEnter:i,views:{inner:{templateUrl:"/views/_application/_dashboard/_sensor_grid/list.html",controller:"DashboardCtrl"}}}).state("application.dashboard.create",{url:"create",onEnter:i,views:{inner:{templateUrl:"/views/_application/_dashboard/_sensor_grid/create.html",controller:"CreateSensorGridCtrl"}}}).state("application.dashboard.detail",{url:"sensor_grid/:id?:tab",onEnter:i,views:{inner:{templateUrl:"/views/_application/_dashboard/_sensor_grid/show.html",controller:"DetailSensorGridCtrl"}}}).state("application.sensor",{url:"/sensor",onEnter:i,views:{content:{templateUrl:"/views/_application/_dashboard/_sensor/main.html"}},"abstract":!0}).state("application.sensor.create",{url:"/create?sensor_grid",onEnter:i,views:{inner:{templateUrl:"/views/_application/_dashboard/_sensor/create.html",controller:"CreateSensorCtrl"}}}).state("application.sensor.detail",{url:"/:id?:tab",onEnter:i,views:{inner:{templateUrl:"/views/_application/_dashboard/_sensor/show.html",controller:"DetailSensorCtrl"}}}).state("application.account",{url:"/account",onEnter:i,views:{content:{templateUrl:"/views/_application/_account/main.html",controller:"AccountCtrl"}}}).state("application.invite",{url:"/invite",onEnter:i,views:{content:{templateUrl:"/views/_application/_invite/main.html",controller:"InviteCtrl"}}}),e.otherwise("/login"),t.interceptors.push("AuthInterceptor"),a.theme("smartTheme").primaryPalette("orange").accentPalette("yellow")}]),angular.module("Application").controller("AccountCtrl",["$rootScope","$scope","OAuthService","RequestService","$mdDialog",function(n,e,t,a,i){e.goBack=function(){n.go("application.dashboard.list")},e.editable={display_name:!1,email:!1},e.changeDisplayName=function(){var n=_.pick(e.account,["display_name"]);t.DisplayName().set(n,a.Data(function(n){e.account=n,e.editable.display_name=!1}),a.Error())},e.changeEmail=function(){var n=_.pick(e.account,["email"]);t.Email().set(n,a.Data(function(n){e.account=n,e.editable.email=!1}),a.Error())},this.WhoIAm=function(){t.whoiam()._(a.Data(function(n){e.account=n}),a.Error())},this.WhoIAm(),e.OpenPasswordDialog=function(n){i.show({controller:["$scope","$mdDialog",function(n,e){n.user={password:"",repeat_password:""},n.errors={Empty:!1,Equals:!1},n.hide=function(){e.hide()},n.cancel=function(){e.cancel()};var t=function(){return n.errors.Empty=""===n.user.password||""===n.user.repeat_password,n.errors.Equals=!n.errors.Empty&&n.user.password!==n.user.repeat_password,n.errors.Empty&&n.errors.Equals};n.confirm=function(){t()||e.hide(n.user)}}],templateUrl:"/views/_application/_account/password.html",parent:angular.element(document.body),targetEvent:n,clickOutsideToClose:!0}).then(function(n){var i=_.pick(n,["password"]);t.Password().set(i,a.Data(function(n){e.account=n}),a.Error())})},e.deleteAccount=function(e){var o=i.confirm().title("Would you like to delete your account").textContent("Don't let me").ariaLabel("Lucky day").targetEvent(e).ok("Confirm").cancel("Cancel");i.show(o).then(function(){t.Basic().del(a.Message(function(){deleteLocal("user"),n.go("login")}),a.Error())})}}]),angular.module("Application").controller("ApplicationCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,e,t,a){e.user={},e.array_colors=Array.apply(null,Array(27)).map(function(){return"#FF9800"}),e.closePopoverMain=function(){e.showMain=!1},e.closePopoverOptions=function(){e.showOptions=!1},this.WhoIAm=function(){t.whoiam()._(a.OneDataByKey("email",function(n){e.user.email=n}),a.Error())},this.WhoIAm(),e.logout=function(){t.logout()._(function(e){deleteLocal("user"),n.go("login")},a.Error())}}]),angular.module("Application").controller("InvitationCtrl",["$rootScope","$scope","$stateParams","OAuthService","RequestService",function(n,e,t,a,i){e.guest={password:"",repeat_password:""};var o=function(){n.go("login")},l=t.code;a.Invitation().check({code:l},i.Data(function(n){n.success||o()}),o),e.goBack=function(){n.go("login")},e.signIn=function(){var t=e.guest;if(""!==t.password&&""!==t.respeat_password)if(t.password===t.repeat_password){var o=_.pick(t,["password"]);a.Invitation().set({code:l},o,i.Message(e.goBack),i.Error())}else n.showSimpleToast("Not Equals");else n.showSimpleToast("Empty Password")}}]),angular.module("Application").controller("InviteCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,e,t,a){e.guest={email:""},e.goBack=function(){n.go("application.dashboard.list")},e.sendInvitation=function(){""!==e.guest.email&&t.Invite().set(e.guest,a.Message(e.goBack),a.Error())}}]),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OAuthService","RequestService",function(n,e,t,a){e.user={email:"",password:""},e.login=function(){var i=e.user;""!==i.email&&i.password&&t.login()._(i,a.OneDataByKey("token",function(e){saveLocal("user",e),n.go("application.dashboard.list")}),a.Error())}}]),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/main.html",'<ng-include src="\'/views/_application/__utils/popover-main.html\'"></ng-include>\n<ng-include src="\'/views/_application/__utils/popover-user.html\'"></ng-include>\n<div layout="row" flex>\n    <md-sidenav layout="column" flex="20" class="md-sidenav-left md-whiteframe-z2"  id="sidebar" md-component-id="left" md-is-locked-open="$mdMedia(\'gt-sm\')"  md-theme="smartTheme">\n        <header class="md-whiteframe-2dp">\n            <md-toolbar layout="row" ng-init="showMain=false">\n                <a class="md-toolbar-tools" flex="80" ng-href="{{statify(\'application\', titleMain)}}" layout="row">\n                    <i class="icon house_with_garden_36" flex="20"></i>\n                    <span flex>{{titleMain}}</span>\n\n                </a>\n                <md-button aria-label="Open main menu" class="md-icon-button" flex ng-click="showMain=!showMain; showOptions=false">\n                    <md-icon  md-font-icon="mdi-apps" class="mdi"></md-icon>\n                </md-button>\n\n\n            </md-toolbar>\n\n        </header>\n\n        <md-content>\n            <md-subheader class="md-primary" layout="row" ng-init="showOptions=false" layout-align="center center" ng-click="showOptions=!showOptions; showMain=false">\n                <span flex>{{user.email}}\n                </span>\n                <md-icon md-font-icon="mdi-chevron-down" class="mdi md-primary" flex ></md-icon>\n            </md-subheader>\n\n\n        </md-content>\n\n    </md-sidenav>\n\n\n    <div flex layout="column">\n        <div ui-view="content" id="content" flex></div>\n\n            <div flex class="footer">\n            <md-divider></md-divider>\n            <md-toolbar layout="row">\n\n                <h6 flex-offset="85"><i class="mdi mdi-copyright"></i><span>Smart Town 2016</span></h6>\n\n\n            </md-toolbar>\n\n        </div>\n\n    </div>\n</div>\n\n\n\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_invitation/main.html",'<ui-title>Invitation</ui-title>\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="smartTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><i class="icon house_with_garden_72"></i><br>Welcome! <br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Join us!</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Password</label>\n\n                    <input type="password" required name="password" ng-model="guest.password" >\n                    <div ng-messages="loginForm.password.$error" multiple md-auto-hide="false" ng-if=\'loginForm.password.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Repeat Password</label>\n\n                    <input ng-model="guest.repeat_password" type="password" name="repeatPassword" required>\n                    <div ng-messages="loginForm.repeatPassword.$error" md-auto-hide="false" ng-if="loginForm.repeatPassword.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="signIn()" flex flex-sm="100" ng>Sign in</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="mdi mdi-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_login/main.html",'<ui-title>Sign in</ui-title>\n\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="smartTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><i class="icon house_with_garden_72"></i><br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Log in to your account</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Email</label>\n\n                    <input type="email" required name="email" ng-model="user.email" ng-pattern="/^.+@.+\\..+$/" >\n                    <div ng-messages="loginForm.email.$error" multiple md-auto-hide="false" ng-if=\'loginForm.email.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Password</label>\n\n                    <input ng-model="user.password" type="password" name="password" required>\n                    <div ng-messages="loginForm.password.$error" md-auto-hide="false" ng-if="loginForm.password.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="login()" flex flex-sm="100" ng>Login</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="mdi mdi-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_account/main.html",'<ui-title>Account</ui-title>\n<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>Your Account</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="account.display_name" aria-label="Display Name" ng-disabled="!editable.display_name">\n        </md-input-container>\n        <div flex="10" layout="row" layout-align="center center" class="account-update-button">\n            <md-button flex ng-click="editable.display_name=true" ng-if="!editable.display_name" class="md-primary" aria-label="Start Update display_name">\n                <i class="mdi mdi-pencil orange"></i>\n            </md-button>\n            <md-button flex ng-click="changeDisplayName()" ng-if="editable.display_name" class="md-primary" aria-label="Update display_name">\n                <span class="orange">Update</span>\n            </md-button>\n        </div>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Email <br>(not optional)</h3>\n            <p>This is important</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="account.email" aria-label="email" ng-disabled="!editable.email">\n        </md-input-container>\n        <div flex="10" layout="row" layout-align="center center" class="account-update-button">\n            <md-button flex ng-click="editable.email=true" ng-if="!editable.email" class="md-primary" aria-label="Start Update email">\n                <i class="mdi mdi-pencil orange"></i>\n            </md-button>\n            <md-button flex ng-click="changeEmail()" ng-if="editable.email" class="md-primary" aria-label="Update email">\n                <span class="orange">Update</span>\n            </md-button>\n        </div>\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-click="OpenPasswordDialog($event)">Change Password</md-button>\n        <md-button class="md-raised md-primary" ng-click="deleteAccount($event)" style="background-color: #FF5722; margin-left: 10%;">Delete Account</md-button>\n    </div>\n</md-content>\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_account/password.html",'<md-dialog aria-label="New Conversion"  ng-cloak class="conversion-dialog">\n    <form>\n        <md-toolbar>\n            <div class="md-toolbar-tools">\n                <h2>Change Password</h2>\n                <span flex></span>\n                <md-button class="md-icon-button" ng-click="cancel()">\n                    <md-icon class="mdi" md-font-icon="mdi-close"  aria-label="Close dialog"></md-icon>\n                </md-button>\n            </div>\n        </md-toolbar>\n        <md-dialog-content md-theme="smartTheme">\n            <div class="md-dialog-content" layout="column">\n                <md-input-container flex >\n                    <label>Password</label>\n                    <input ng-model="user.password" type="password" aria-label="Password" >\n                </md-input-container>\n                \n                 <md-input-container flex >\n                    <label>Repeat Password</label>\n                    <input ng-model="user.repeat_password" type="password" aria-label="Repeat Password" >\n                </md-input-container>\n                \n                <div class="errors" flex>\n                    <p ng-if="errors.Empty" >Error: Password Empty</p>\n                    <p ng-if="errors.Equals">Error: Password not Equals</p>\n               \n                </div>\n            </div>\n        </md-dialog-content>\n        <md-dialog-actions layout="row">\n\n            <span flex></span>\n            <md-button ng-click="cancel()">\n                Cancel\n            </md-button>\n            <md-button ng-click="confirm()" >\n                Confirm\n            </md-button>\n\n        </md-dialog-actions>\n    </form>\n</md-dialog>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/main.html",'<ui-title>Dashboard</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_invite/main.html",'<ui-title>Invite</ui-title>\n<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>Invite People</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme" layout-align="none center">\n\n    <h3 style="font-size:2.5em" flex>Invite someone to work in the project</h3>\n    <p style="font-size:2em; margin-top: -3%;" flex>More admin, more sensors</p>\n\n    <md-input-container flex style="width: 40%;">\n       <label>Someone Email</label>\n        <input ng-model="guest.email" aria-label="email" >\n    </md-input-container>\n    <div flex class="button-create button-invite" layout="row" layout-align="center center">\n     <md-button class="md-raised md-primary md-invite" ng-click="sendInvitation()">Invite, please</md-button>\n    </div>\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/conversion.html",'<md-dialog aria-label="New Conversion"  ng-cloak class="conversion-dialog">\n    <form>\n        <md-toolbar>\n            <div class="md-toolbar-tools">\n                <h2>New Conversion</h2>\n                <span flex></span>\n                <md-button class="md-icon-button" ng-click="cancel()">\n                    <md-icon class="mdi" md-font-icon="mdi-close"  aria-label="Close dialog"></md-icon>\n                </md-button>\n            </div>\n        </md-toolbar>\n        <md-dialog-content md-theme="smartTheme">\n            <div class="md-dialog-content" layout="column">\n                <md-input-container flex >\n                    <label>Display Name</label>\n                    <input ng-model="conversion.display_name" type="text" aria-label="Analog Display Name" >\n                </md-input-container>\n\n                <div class="select-group" layout="row" layout-align="space-around center">\n                    <span flex="10">From</span>\n                    <md-input-container flex>\n                        <label>Unit A</label>\n                        <md-select ng-model="conversion.unitA">\n                            <md-option ng-repeat="unit in units" value="{{unit._id}}">\n                                {{unit.display_name}}\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n                    <span flex="10" flex-offset="5">To</span>\n                    <md-input-container flex>\n                        <label>Unit B</label>\n                        <md-select ng-model="conversion.unitB" flex>\n                            <md-option ng-repeat="unit in units" value="{{unit._id}}">\n                                {{unit.display_name}}\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n                </div>\n                <md-input-container  flex>\n                    <label>Operation</label>\n                    <input ng-model="conversion.operation" type="text" aria-label="Analog Display Name" >\n                </md-input-container>\n                \n                <div class="errors" flex>\n                    <p ng-if="errors.unitsEmpty" >Error: Units Empty</p>\n                    <p ng-if="errors.unitsEquals">Error: Units Equals</p>\n                    <p ng-if="errors.DisplayNameEmpty">Error: Display Name Empty</p>\n                </div>\n            </div>\n        </md-dialog-content>\n        <md-dialog-actions layout="row">\n\n            <span flex></span>\n            <md-button ng-click="cancel()">\n                Cancel\n            </md-button>\n            <md-button ng-click="confirm()" >\n                Confirm\n            </md-button>\n\n        </md-dialog-actions>\n    </form>\n</md-dialog>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Magnitude</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="magnitude.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>System Type</h3>\n            <p>Working with real numbers or with on(1) or off(0)</p>\n        </div>\n\n        <md-radio-group ng-model="magnitude.type" flex="50" flex-offset="30">\n            <md-radio-button value="0" class="md-primary">Analog</md-radio-button>\n            <md-radio-button value="1" class="md-primary">Digital</md-radio-button>\n        </md-radio-group>\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-click="create()">Create Magnitude</md-button>\n    </div>\n</md-content>\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" ng-model="searchObject.text" placeholder="Filter magnitudes">\n        </md-input-container>\n\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<md-content layout-padding layout="column" md-theme="smartTheme" class="list">\n\n    <md-list  ng-cloak class="list-content">\n        <div ng-repeat="magnitude in magnitudes| search:\'display_name\':searchObject">\n            <div  layout="row">\n                <md-list-item  ng-click="goToDetail(magnitude._id)" flex>\n                    <md-icon  md-font-icon="{{Icon(magnitude.type)}}" class="mdi list-type-icon"></md-icon>  \n                    <p> {{ magnitude.display_name }} </p>\n                    <p  flex-offset="30"><span class="md-whiteframe-1dp" ng-class="{\'badge\':magnitude.type===\'0\', \'badge-negative\':magnitude.type===\'1\'}">{{Type(magnitude.type)}}</span></p>\n\n                </md-list-item>\n\n                <md-button class="md-primary" aria-label="Delete" ng-click="delete(magnitude._id)" flex="5">\n                    <i class="mdi mdi-delete"></i>\n                </md-button>\n            </div>\n            <md-divider ng-if="!$last"></md-divider>\n        </div>\n    </md-list>\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/main.html",'<ui-title>Magnitudes</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_magnitudes/show.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>{{magnitude.display_name}}</span>\n        </h2>\n    </div>\n</md-toolbar>\n\n<div  class="detail-toolbar md-toolbar-tools" layout="row"layout-align="space-between stretch">\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'info\')" ng-class="{\'active\':SelectedIndex===\'info\'}">\n        <span>Info</span>  <i class="mdi mdi-information-outline"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'units\')" ng-class="{\'active\':SelectedIndex===\'units\'}">\n        <span>Units</span>  <i class="mdi mdi-numeric"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'conversions\')" ng-class="{\'active\':SelectedIndex===\'conversions\', \'disable\':Digital()}">\n        <span>Conversions</span> <i class="mdi mdi-stethoscope"></i>\n    </div>\n</div>\n\n<md-content  ng-switch on="SelectedIndex" class="detail background-theme-orange" layout-padding ng-class="{\'analog-content\':!Digital() }">\n    <div class="detail-info mt5" ng-switch-when="info" layout="row" layout-align="center stretch">\n\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" >\n                    <h3>Display Name</h3>\n                </div>\n            </md-toolbar>\n            <md-card-content layout="row" layout-align="center center" md-theme="smartTheme">\n                <md-input-container flex layout="row">\n                    <input ng-model="magnitude.display_name" type="text" flex flex-order="1" ng-disabled="!editable.name" aria-label="Display Name">\n                    <md-button flex="5" flex-order="2" ng-click="editable.name=true" ng-if="!editable.name" class="md-primary" aria-label="Start Update Display Name">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n                    <md-button flex="5" flex-order="2" ng-click="changeDisplayName()" ng-if="editable.name" class="md-primary"\n                               aria-label="Update Display Name">\n                        Update\n                    </md-button>\n                </md-input-container>\n            </md-card-content>\n        </md-card>\n\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" >\n                    <h3>System Type</h3>\n                </div>\n            </md-toolbar>\n            <md-card-content layout-align="center center" layout="row" class="radio" md-theme="smartTheme">\n                <md-radio-group ng-model="magnitude.type" layout="row">\n                    <md-radio-button value="0" flex class="md-primary" ng-disabled="!editable.type">Analog</md-radio-button>\n                    <md-radio-button value="1" flex class="md-primary" ng-disabled="!editable.type">Digital</md-radio-button>\n                </md-radio-group>\n                <md-button flex="5" flex-order="2" ng-click="editable.type=true" ng-if="!editable.type" class="md-primary" aria-label="Start update type">\n                    <i class="mdi mdi-pencil"></i>\n                </md-button>\n                <md-button flex="5" flex-order="2" ng-click="changeType()" ng-if="editable.type" class="md-primary" aria-label="Update type">\n                    Update\n                </md-button>\n            </md-card-content>\n        </md-card>\n    </div>\n    <div class="detail-units" ng-switch-when="units"  ng-switch on="magnitude.type" >\n        <div ng-switch-when="1" class="digital">\n            <md-card>\n                <md-card-header>\n                    <md-card-header-text>\n                        <span class="md-title">Digital System</span>\n                        <span class="md-subhead">Meaning of Digital Units</span>\n                    </md-card-header-text>\n                </md-card-header>\n                <md-card-title>\n                    <md-card-title-text>\n                        <span class="md-headline">  <i class="mdi mdi-earth"></i>ON</span>\n                        <md-input-container md-theme="smartTheme">\n                            <input ng-model="magnitude.digital_units.on" type="text"  ng-disabled="!editable.digital_units" aria-label="Digital Unit On">\n                        </md-input-container>\n                    </md-card-title-text>\n                </md-card-title>\n                <md-card-title>\n                    <md-card-title-text>\n                        <span class="md-headline">    <i class="mdi mdi-earth-off" flex></i> OFF </span>\n                        <md-input-container md-theme="smartTheme">\n                            <input ng-model="magnitude.digital_units.off" type="text" ng-disabled="!editable.digital_units" aria-label="Digital Unit Off">\n                        </md-input-container>\n                    </md-card-title-text>\n                </md-card-title>\n                <md-card-actions layout="row" layout-align="end center" md-theme="smartTheme">\n                    <md-button ng-click="editable.digital_units=true" ng-if="!editable.digital_units" class="md-primary">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n\n                    <md-button  ng-if="editable.digital_units" class="md-primary" ng-click="changeDigitalUnits()">\n                        Update\n                    </md-button>\n                </md-card-actions>\n            </md-card>\n\n\n\n        </div>\n        <div ng-switch-when="0" class="analog md-whiteframe-1dp">\n            <md-toolbar class="md-whiteframe-1dp analog-toolbar">\n                <div class="md-toolbar-tools">\n                    <h4>Analog System</h4>\n                    <span flex></span>\n                    <md-button class="md-fab" ng-click="addAnalogUnit()" aria-label="Add Analog Unit">\n                        <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n                    </md-button>\n                </div>\n            </md-toolbar>\n\n            <md-list class="analog-list">\n                <md-list-item ng-repeat="unit in magnitude.analog_units | orderBy:\'-\'" layout="row"  md-theme="smartTheme">\n                    <md-button  ng-if="unit.editable" class="md-delete md-primary" ng-click="deleteAnalogUnit(unit)" aria-label=" Delete Analog Unit">\n                        <i class="mdi mdi-delete"></i>\n                    </md-button>\n                    <md-input-container flex class="ml2">\n                        <label>Display Name</label>\n                        <input ng-model="unit.display_name" type="text" ng-disabled="!unit.editable" aria-label="Analog Display Name" >\n                    </md-input-container>\n                    <md-input-container flex-offset="10" flex="20" class="symbol">\n                        <label>Symbol</label>\n                        <input ng-model="unit.symbol" type="text" ng-disabled="!unit.editable" aria-label="Analog Symbol" >\n                    </md-input-container>\n                    <md-button flex="nogrow"  ng-if="!unit.editable" aria-label="Start Updating" ng-click="unit.editable=true" class="md-primary">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n                    <md-button flex="nogrow" ng-if="unit.editable"  aria-label="Update Analog Unit" ng-click="updateAnalogUnit(unit, $index)" class="md-primary">\n                        Update\n                    </md-button>\n                </md-list-item>\n\n            </md-list>\n\n\n        </div>\n\n    </div>\n    <div class="detail-conversions" ng-switch-when="conversions">\n        <div class="md-whiteframe-1dp detail-content">\n            <md-button class="md-fab button-add" aria-label="Add Conversion" ng-click="addConversion($event)">\n                <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n            </md-button>\n            <md-list md-theme="smartTheme">\n                <div ng-repeat="conversion in magnitude.conversions | orderBy:\'-\'" >\n                    <md-list-item layout="row">\n\n                        <h3 flex="20" flex-offset="5">{{ conversion.display_name }}</h3>\n                        <p flex="20">\n                            From {{getUnitName(conversion.unitA)}} To  {{getUnitName(conversion.unitB)}}\n                        </p>\n\n                        <md-input-container class="operation" flex="30">\n                            <label>Operation</label>\n                            <input ng-model="conversion.operation" type="text" ng-disabled="true" aria-label="Conversion Operarion" placeholder="No operation">\n                        </md-input-container>\n\n                        <md-button flex="nogrow" aria-label="Update Conversion" ng-click="updateConversion($event, conversion)" class="md-primary md-delete">\n                            <i class="mdi mdi-pencil"></i>\n                        </md-button>\n                        \n                         <md-button flex="nogrow" aria-label="Delete Conversion" class="md-primary md-delete" ng-click="deleteConversion(conversion)">\n                            <i class="mdi mdi-delete"></i>\n                        </md-button>\n\n                    </md-list-item>\n                    <md-divider ng-if="!$last"></md-divider>\n                </div>\n                <md-list-item ng-if="magnitude.conversions.length==0">\n                    No Conversions\n                </md-list-item>\n\n            </md-list>\n        </div>\n    </div>\n\n</md-content>\n\n\n');
}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_tasks/main.html",'<ui-title>Tasks</ui-title>\n<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" ng-model="searchObject.text" placeholder="Filter tasks">\n        </md-input-container>\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n<md-content layout-padding layout="column" md-theme="smartTheme" class="list">\n\n  <md-list  ng-cloak class="list-content">\n        <div ng-repeat="task in tasks| search:\'display_name\':searchObject">\n\n                <md-list-item layout="row" class="task-item" ng-init="task.editable=false">\n                  <md-icon flex="5" md-font-icon="mdi-alarm-check" class="mdi list-type-icon"></md-icon> \n\n                    <md-input-container flex="20">\n                        <label>Display Name</label>\n                        <input ng-model="task.display_name" type="text" aria-label="Display Name"  ng-disabled="!task.editable">\n                    </md-input-container>\n\n                    <md-input-container flex="50">\n                        <label>Webhook</label>\n                        <input ng-model="task.webhook" type="text" aria-label="Webhook"  ng-disabled="!task.editable">\n                    </md-input-container>\n\n                    <md-input-container flex="10" class="task-select">\n                        <label>Frequency</label>\n                        <md-select ng-model="task.frequency" ng-disabled="!task.editable">\n                            <md-option  value="week">\n                                Each Week\n                            </md-option>\n                            <md-option  value="day">\n                                Each Day\n                            </md-option>\n                            <md-option  value="hour">\n                                Each Hour\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n                    <md-button class="md-primary" aria-label="start update" ng-if="!task.editable" ng-click="task.editable=true">\n                        <i class="mdi mdi-pencil"></i>\n                    </md-button>\n                      <md-button class="md-primary" aria-label="update" ng-if="task.editable" ng-click="update(task, $index)">\n                          <span>Update</span>\n                    </md-button>\n                    <md-button class="md-primary" aria-label="Delete" ng-click="delete(task._id)">\n                        <i class="mdi mdi-delete"></i>\n                    </md-button>\n\n                </md-list-item>\n                \n                 \n            \n            <md-divider ng-if="!$last"></md-divider>\n        </div>\n        <md-list-item ng-if="tasks.length==0">\n            No Tasks\n        </md-list-item>\n    </md-list>\n\n</md-content>\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Zone</span>\n        </h2>\n        <div flex="20"  class="button-create" layout="row" layout-align="center center" >\n            <md-button class="md-raised md-primary" md-theme="smartTheme" ng-click="create()">Create</md-button>\n        </div>\n    </div>\n</md-toolbar>\n<md-content layout="column" md-theme="smartTheme" id="zone-create">\n    <div layout="row" flex class="zone-input-name" >\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name (optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="zone.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="column" flex class="zone-draw">\n        <div flex  layout="row">\n            <h3 flex="15" flex-offset="5">Draw Zone</h3>\n\n        </div >\n\n        <div flex  layout="row">\n            <div  layout="row" flex="40">\n                <span class="location" flex="20">Center <br>\n                    <i class="mdi mdi-crosshairs-gps" ng-click="getCurrentLocation()"></i>\n                </span>\n\n                <md-input-container flex>\n                    <label>Latitude</label>\n                    <input input="text" ng-model="zone.center[0]">\n                </md-input-container>\n                <md-input-container flex>\n                    <label>Longitude</label>\n                    <input input="text" ng-model="zone.center[1]">\n                </md-input-container>\n            </div>\n\n            <div layout="row" flex flex-offset="20" md-theme="smartTheme">\n\n                <md-button  class="md-raised md-primary"  aria-label="Rectangle" flex="10" ng-disabled="zone.shape.type===\'rectangle\'" ng-click="setShape(\'rectangle\')">\n                    <i class="mdi mdi-vector-rectangle"></i>\n                </md-button>\n                <md-button  class="md-raised md-primary"  aria-label="circle" flex="10" ng-disabled="zone.shape.type===\'circle\'" ng-click="setShape(\'circle\')" >\n                    <i class="mdi mdi-vector-circle"></i>\n                </md-button>\n                <md-button  class="md-raised md-primary" aria-label="Polygon" flex="10" ng-disabled="zone.shape.type===\'polygon\'" ng-click="setShape(\'polygon\')" >\n                    <i class="mdi mdi-vector-polygon"></i>\n                </md-button>\n            </div>\n\n        </div>\n\n        <ng-map flex zoom="11" center="{{zone.center}}" map-type-id="ROADMAP" on-center-changed="self.centerChanged()">\n\n            <drawing-manager ng-if="newShape"\n                             on-overlaycomplete="self.onMapOverlayCompleted()"\n                             drawing-control-options="{position: \'TOP_CENTER\',drawingModes:[\'{{zone.shape.type}}\']}"\n                             drawingControl="true"\n                             drawingMode="null">\n            </drawing-manager>\n\n            <shape id="polygon" name="polygon" ng-if="!newShape&&zone.shape.type===\'polygon\'" \n                   stroke-color="#FF0000" editable="true" on-mouseover="self.trackPolygon()"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   paths="{{zone.shape.paths}}" >\n            </shape>\n\n            <shape id="circle" name="circle" ng-if="!newShape&&zone.shape.type===\'circle\'" draggable="true"  on-dragend="self.changeCenterCircle()"  editable="true" on-radius_changed="self.changeCircleRadius()"\n                   stroke-color=\'#FF0000\' stroke-opacity="1.0"stroke-weight="2"\n                   center="{{zone.shape.center}}" radius="{{zone.shape.radius}}">\n            </shape>\n\n            <shape id="rectangle" name="rectangle"  ng-if="!newShape&&zone.shape.type===\'rectangle\'"\n                   stroke-color=\'#FF0000\' editable="true" on-bounds_changed="self.changeRectangle()"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   bounds="{{zone.shape.bounds}}">\n            </shape>\n        </ng-map>\n\n\n    </div>\n\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" ng-model="searchObject.text" placeholder="Filter zones">\n        </md-input-container>\n\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<md-content layout-padding layout="column" md-theme="smartTheme" class="list">\n\n    <md-list  ng-cloak class="list-content">\n        <div ng-repeat="zone in zones| search:\'display_name\':searchObject">\n            <div  layout="row">\n                <md-list-item  ng-click="goToDetail(zone._id)" flex>\n                    <md-icon  md-font-icon="{{Icon(zone.shape.type)}}" class="mdi list-type-icon"></md-icon>  \n                    <p> {{ zone.display_name }} </p>\n                   \n                </md-list-item>\n\n                <md-button class="md-primary" aria-label="Delete" ng-click="delete(zone._id)" flex="5">\n                    <i class="mdi mdi-delete"></i>\n                </md-button>\n            </div>\n            <md-divider ng-if="!$last"></md-divider>\n        </div>\n    </md-list>\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/main.html",'<ui-title>Zones</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_zones/show.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>{{zone.display_name}}</span>\n        </h2>\n    </div>\n</md-toolbar>\n\n\n<div  class="detail-toolbar md-toolbar-tools" layout="row"layout-align="space-between stretch">\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'info\')" ng-class="{\'active\':SelectedIndex===\'info\'}">\n        <span>Info</span>  <i class="mdi mdi-information-outline"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'location\')" ng-class="{\'active\':SelectedIndex===\'location\'}">\n        <span>Location</span>  <i class="mdi mdi-map-marker"></i>\n    </div>\n\n</div>\n\n<md-content  ng-switch on="SelectedIndex" class="detail background-theme-orange" layout-padding >\n\n    <div class="detail-info" ng-switch-when="info" layout="column" layout-align="center stretch">\n        <div layout="row" layout-align="center stretch">\n            <md-card class="detail-form" flex>\n                <md-toolbar class="md-whiteframe-1dp">\n                    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                        <h3 flex>Display Name</h3>\n                        <md-button flex="5" ng-click="editable.display_name=true" ng-if="!editable.display_name" class="md-primary" aria-label="Start Update Display Name">\n                            <i class="mdi mdi-pencil orange"></i>\n                        </md-button>\n                        <md-button flex="5" ng-click="changeDisplayName()" ng-if="editable.display_name" class="md-primary" aria-label="Update Display Name">\n                            <span class="orange">Update</span>\n                        </md-button>\n                    </div>\n                </md-toolbar>\n                <md-card-content md-theme="smartTheme">\n                    <md-input-container class="md-block">\n                        <label>Name Zone</label>\n                        <input ng-model="zone.display_name" type="text" flex flex-order="1" ng-disabled="!editable.display_name" aria-label="Display Name">\n\n                    </md-input-container>\n                </md-card-content>\n            </md-card>\n\n            <md-card class="detail-form" flex>\n                <md-toolbar class="md-whiteframe-1dp">\n                    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                        <h3 flex>Description</h3>\n                        <md-button flex="5" ng-click="editable.description=true" ng-if="!editable.description" class="md-primary" aria-label="Start Update Description" >\n                            <i class="mdi mdi-pencil orange"></i>\n                        </md-button>\n                        <md-button flex="5"  ng-click="changeDescription()" ng-if="editable.description" class="md-primary"\n                                   aria-label="Update Description">\n                            <span class="orange">Update</span>\n                        </md-button>\n                    </div>\n                </md-toolbar>\n                <md-card-content md-theme="smartTheme">\n                    <md-input-container class="md-block">\n                        <label>About Zone</label>\n                        <textarea ng-model="zone.description" ng-disabled="!editable.description" md-maxlength="150" rows="5" md-select-on-focus aria-label="Description"></textarea>\n\n                    </md-input-container>\n                </md-card-content>\n            </md-card>\n        </div>\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                    <h3 flex>Keywords</h3>\n                    <md-button flex="5" ng-click="editable.keywords=true" ng-if="!editable.keywords" class="md-primary" aria-label="Start Update Keywords" >\n                        <i class="mdi mdi-pencil orange"></i>\n                    </md-button>\n                    <md-button flex="5"  ng-click="changeKeywords()" ng-if="editable.keywords" class="md-primary"\n                               aria-label="Update Keywords">\n                        <span class="orange">Update</span>\n                    </md-button>\n                </div>\n            </md-toolbar>\n            <md-card-content md-theme="smartTheme">\n                <md-chips ng-if="zone.keywords" ng-model="zone.keywords" readonly="!editable.keywords" md-enable-chip-edit="editable.keywords" ng-cloak></md-chips>\n            </md-card-content>\n        </md-card>\n    </div>\n\n    <div class="detail-zone-location" ng-switch-when="location">\n\n        <div class="md-whiteframe-1dp detail-options" layout="row" md-theme="smartTheme">\n\n            <md-button class="md-raised md-primary"  aria-label="Rectangle" flex="10" ng-disabled="!editable.location || zone.shape.type===\'rectangle\'" ng-click="setShape(\'rectangle\')">\n                <i class="mdi mdi-vector-rectangle"></i>\n            </md-button>\n            <md-button  class="md-raised md-primary"  aria-label="circle" flex="10" ng-disabled="!editable.location ||zone.shape.type===\'circle\'" ng-click="setShape(\'circle\')">\n                <i class="mdi mdi-vector-circle"></i>\n            </md-button>\n            <md-button  class="md-raised md-primary" aria-label="Polygon" flex="10" ng-disabled="!editable.location ||zone.shape.type===\'polygon\'" ng-click="setShape(\'polygon\')">\n                <i class="mdi mdi-vector-polygon"></i>\n            </md-button> \n\n\n            <div flex="5" class="center">Center</div>\n\n            <md-input-container flex="20" >\n                <label>Latitude</label>\n                <input input="text" ng-model="zone.center[0]" ng-disabled="!editable.location">\n            </md-input-container>\n            <md-input-container flex="20">\n                <label>Longitude</label>\n                <input input="text" ng-model="zone.center[1]" ng-disabled="!editable.location">\n            </md-input-container>  \n\n            <md-button flex="5" class="md-primary" aria-label="Current location" ng-disabled="!editable.location" ng-click="getCurrentLocation()" >\n                <i class="mdi mdi-crosshairs-gps" ></i>\n            </md-button>\n\n            <md-button flex="5" ng-click="updateLocation()" ng-if="!editable.location" class="md-primary" aria-label="Start Update Location" >\n                <i class="mdi mdi-pencil orange"></i>\n            </md-button>\n            <md-button flex="5"  ng-click="changeLocation()" ng-if="editable.location" class="md-primary"\n                       aria-label="Update Location">\n                <span class="orange">Update</span>\n            </md-button>\n\n        </div>\n\n        <ng-map zoom="11" center="{{zone.center}}" map-type-id="ROADMAP"  on-center-changed="self.centerChanged()">\n\n            <drawing-manager ng-if="newShape"\n                             on-overlaycomplete="self.onMapOverlayCompleted()"\n                             drawing-control-options="{position: \'TOP_CENTER\',drawingModes:[\'{{zone.shape.type}}\']}"\n                             drawingControl="true"\n                             drawingMode="null">\n            </drawing-manager>\n\n            <shape id="polygon" name="polygon" ng-if="!newShape&&zone.shape.type===\'polygon\'" \n                   stroke-color="#FF0000" editable="{{editable.location}}"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   paths="{{zone.shape.paths}}" >\n            </shape>\n\n            <shape id="circle" name="circle" ng-if="!newShape&&zone.shape.type===\'circle\'" draggable="{{editable.location}}" editable="{{editable.location}}"\n                   stroke-color=\'#FF0000\' stroke-opacity="1.0"stroke-weight="2"\n                   center="{{zone.shape.center}}" radius="{{zone.shape.radius}}">\n            </shape>\n\n            <shape id="rectangle" name="rectangle"  ng-if="!newShape&&zone.shape.type===\'rectangle\'"\n                   stroke-color=\'#FF0000\' editable="{{editable.location}}"\n                   stroke-opacity="1.0" stroke-weight="2"\n                   bounds="{{zone.shape.bounds}}">\n            </shape>\n\n\n        </ng-map>\n\n\n\n    </div>\n\n\n\n</md-content>\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-main.html",'<div class="popover-layer" ng-if="showMain" ng-click="closePopoverMain()"></div>\n\n\n<div class="popover-main md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showMain}" ng-if="showMain">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column"   ui-sref="application.dashboard.list" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-bowling" class="mdi" flex></md-icon>\n            <span flex> Dashboard</span>\n\n        </a>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.zones.list" layout-align="space-around center">\n\n            <md-icon  md-font-icon="mdi-basecamp" class="mdi" flex></md-icon>\n            <span flex>Zones</span>\n        </a>\n    </div>\n    <div class="popover-main-item" layout="row" flex>\n        <a class="popover-main-link" flex layout="column" ui-sref="application.tasks" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-alarm-check" class="mdi" flex></md-icon>\n            <span flex>Tasks</span>\n        </a>\n        <a class="popover-main-link" flex layout="column"  ui-sref="application.magnitudes.list" layout-align="space-around center">\n            <md-icon  md-font-icon="mdi-beer" class="mdi" flex></md-icon>\n            <span flex>Magnitudes</span>\n        </a>\n    </div>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/__utils/popover-user.html",'<div class="popover-layer" ng-if="showOptions" ng-click="closePopoverOptions()"></div>\n<div class="popover-user-options md-open-menu-container md-whiteframe-z2 md-clickable" ng-class="{\'md-active\':showOptions}" ng-if="showOptions">\n    <div class="dropdown-caret">\n        <span class="caret-outer"></span>\n        <span class="caret-inner"></span>\n    </div>\n\n\n    <div layout="column" layout-align="space-between none" class="popover-content">\n        <a  flex layout="row"  layout-align="space-between center" ui-sref="application.account" class="item-popover">\n            <i class="mdi mdi-account-circle" flex="40"></i>\n            <span  flex>Account</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" ui-sref="application.invite" class="item-popover">\n            <i class="mdi mdi-football-helmet" flex="40"></i>\n            <span flex>Invite</span>\n\n        </a>\n\n        <a  flex layout="row"  layout-align="space-between center" class="item-popover">\n            <i class="mdi mdi-power" flex="40"></i>\n            <span ng-click="logout()" flex>Logout</span>\n\n        </a>\n\n    </div>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/_sensor/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Sensor</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="sensor.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Magnitude &amp; Data Info</h3>\n        </div>\n\n        <div flex-offset="10" flex="60" layout="column">\n\n            <div flex layout="row" class="sensor-input sensor-magnitude-input">\n                <md-input-container flex="40">\n                    <label>Select Magnitude</label>\n                    <md-select ng-model="SelectedMagnitude" ng-change="setMagnitude()">\n                        <md-option ng-repeat="magnitude in magnitudes" ng-value="magnitude">\n                            {{magnitude.display_name}}\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n\n                <md-input-container  flex flex-offset="10" ng-if="SelectedMagnitude.type===\'0\'">\n                    <label>Select Analog Unit</label>\n                    <md-select ng-model="sensor.unit">\n                        <md-option ng-repeat="unit in SelectedMagnitude.analog_units" value="{{unit._id}}">\n                            {{unit.display_name}}\n                        </md-option>\n                        <md-option ng-if="SelectedMagnitude.analog_units.length===0">\n                            No Units\n                        </md-option>\n                    </md-select>\n                </md-input-container>\n\n            </div>\n\n            <div flex layout="row" class="sensor-input sensor-raw-input">\n               <div flex="40" >\n                   <md-checkbox ng-model="sensor.is_raw_data" aria-label="Raw Data">\n                    Raw Data\n                </md-checkbox>\n               </div>\n                \n                <md-input-container  flex-offset="10"  flex ng-if="sensor.is_raw_data">\n                    <label>Conversion</label>\n                    <input ng-model="sensor.raw_conversion" aria-label="Raw Operation">\n                </md-input-container>\n            </div>\n\n        </div>\n\n\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-disabled="!sensor.magnitude" ng-click="create()">Create Sensor</md-button>\n    </div>\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/_sensor/main.html",'<ui-title>Sensor</ui-title>\n<div layout="column" ui-view="inner"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/_sensor/show.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>{{sensor.display_name}}</span>\n        </h2>\n    </div>\n</md-toolbar>\n\n\n<div  class="detail-toolbar md-toolbar-tools" layout="row"layout-align="space-between stretch">\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'info\')" ng-class="{\'active\':SelectedIndex===\'info\'}">\n        <span>Info</span>  <i class="mdi mdi-information-outline"></i>\n    </div>\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'settings\')" ng-class="{\'active\':SelectedIndex===\'settings\'}">\n        <span>Settings</span>  <i class="mdi mdi-cake"></i>\n    </div>\n\n\n</div>\n\n\n<md-content  ng-switch on="SelectedIndex" class="detail background-theme-orange" layout-padding >\n    <div class="detail-info" ng-switch-when="info" layout="column" layout-align="center stretch">\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                    <h3 flex>Transmissor</h3>\n                    <md-button flex="5" ng-click="editable.transmissor=true" ng-if="!editable.transmissor" class="md-primary" aria-label="Start Update transmissor">\n                        <i class="mdi mdi-pencil orange"></i>\n                    </md-button>\n                    <md-button flex="5" ng-click="changeTransmissor()" ng-if="editable.transmissor" class="md-primary" aria-label="Update transmissor">\n                        <span class="orange">Update</span>\n                    </md-button>\n                </div>\n            </md-toolbar>\n            <md-card-content md-theme="smartTheme" layout="row">\n                <md-input-container class="md-block" flex="20">\n                    <label>Device Name</label>\n                    <input ng-model="sensor.device_name" type="text" flex ng-disabled="!editable.transmissor" aria-label="transmissor device name">\n\n                </md-input-container>\n\n                <md-input-container class="md-block" flex flex-offset="10">\n                    <label>Description</label>\n                    <textarea ng-model="sensor.description" ng-disabled="!editable.transmissor" md-maxlength="150" rows="5" md-select-on-focus aria-label="Description"></textarea>\n\n                </md-input-container>\n            </md-card-content>\n        </md-card>\n\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools">\n                    <h3 flex>Credentials</h3>\n\n                </div>\n            </md-toolbar>\n            <md-card-content md-theme="smartTheme">\n                <md-input-container class="md-block" flex>\n                    <label>Node ID</label>\n                    <md-icon md-font-icon="mdi-clipboard-outline" class="mdi copy-icon" title="Copy Node ID" ng-click="copyToClipboard(sensor.node_id)"></md-icon>\n                    <input ng-model="sensor.node_id" type="text" ng-disabled="true" aria-label="Node id">\n\n                </md-input-container>\n\n            </md-card-content>\n        </md-card>\n\n    </div>\n\n    <div class="detail-settings md-whiteframe-1dp" id="sensor-detail" ng-switch-when="settings" layout="column" md-theme="smartTheme">\n\n        <div layout="row" flex class="input-create display-name">\n            <div  flex="20"  flex-offset="5">\n                <h3>Display Name</h3>\n\n            </div>\n\n            <md-input-container flex="50" flex-offset="10">\n                <input ng-model="sensor.display_name" aria-label="Display Name" ng-disabled="!editable.display_name">\n            </md-input-container>\n            <div flex="10" layout="row" layout-align="center center">\n                <md-button flex ng-click="editable.display_name=true" ng-if="!editable.display_name" class="md-primary" aria-label="Start Update display_name">\n                    <i class="mdi mdi-pencil orange"></i>\n                </md-button>\n                <md-button flex ng-click="changeDisplayName()" ng-if="editable.display_name" class="md-primary" aria-label="Update display_name">\n                    <span class="orange">Update</span>\n                </md-button>\n            </div>\n\n\n        </div>\n        <md-divider class="divider-display-name"></md-divider>\n        <div layout="row" flex class="input-create">\n            <div  flex="20"  flex-offset="5">\n                <h3>Magnitude &amp; Data Info</h3>\n            </div>\n\n            <div flex-offset="10" id="sensor-magnitude" flex="60" layout="column">\n\n                <div flex layout="row" layout-align="center center">\n                    <md-button flex="10" flex-offset="90" ng-click="editable.magnitude=true" ng-if="!editable.magnitude" class="md-primary" aria-label="Start Update magnitude">\n                        <i class="mdi mdi-pencil orange"></i>\n                    </md-button>\n                    <md-button flex="10" flex-offset="90" ng-click="changeMagnitude()" ng-if="editable.magnitude" class="md-primary" aria-label="Update magnitude">\n                        <span class="orange">Update</span>\n                    </md-button>\n                </div>\n                <div flex layout="row"  class="sensor-input sensor-magnitude-input">\n                    <md-input-container flex="40">\n                        <label>Select Magnitude</label>\n                        <md-select ng-model="sensor.magnitude" ng-change="onChangeSelectedMagnitude()" ng-disabled="!editable.magnitude">\n                            <md-option ng-repeat="magnitude in magnitudes" ng-value="magnitude._id">\n                                {{magnitude.display_name}}\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n\n                    <md-input-container  flex flex-offset="10" ng-if="SelectedMagnitude.type===\'0\'">\n                        <label>Select Analog Unit</label>\n                        <md-select ng-model="sensor.unit" ng-disabled="!editable.magnitude">\n                            <md-option ng-repeat="unit in SelectedMagnitude.analog_units" ng-value="unit._id">\n                                {{unit.display_name}}\n                            </md-option>\n                            <md-option ng-if="SelectedMagnitude.analog_units.length===0">\n                                No Units\n                            </md-option>\n                        </md-select>\n                    </md-input-container>\n\n                </div>\n\n                <div flex layout="row" class="sensor-input sensor-raw-input">\n                    <div flex="40" >\n                        <md-checkbox ng-model="sensor.is_raw_data" aria-label="Raw Data" ng-disabled="!editable.magnitude">\n                            Raw Data\n                        </md-checkbox>\n                    </div>\n\n                    <md-input-container  flex-offset="10"  flex ng-if="sensor.is_raw_data">\n                        <label>Conversion</label>\n                        <input ng-model="sensor.raw_conversion" aria-label="Raw Operation" ng-disabled="!editable.magnitude">\n                    </md-input-container>\n                </div>\n\n            </div>\n\n\n\n        </div>\n\n\n    </div>\n</md-content>');
}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/_sensor_grid/create.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>New Sensor Grid</span>\n        </h2>\n    </div>\n</md-toolbar>\n<md-content layout-padding layout="column" md-theme="smartTheme">\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Display Name <br>(optional)</h3>\n            <p>Leave blank and we\'ll choose one for you</p>\n        </div>\n\n        <md-input-container flex="50" flex-offset="10">\n            <input ng-model="sensor_grid.display_name" aria-label="Display Name">\n        </md-input-container>\n\n    </div>\n    <md-divider ></md-divider>\n    <div layout="row" flex class="input-create">\n        <div  flex="20"  flex-offset="5">\n            <h3>Zone Location</h3>\n            <p>Sensor grid is located in one zone of the city</p>\n        </div>\n\n        <md-input-container flex="30" flex-offset="20" class="select">\n            <label>Select Zone</label>\n            <md-select ng-model="sensor_grid.zone">\n                <md-option ng-repeat="zone in zones" value="{{zone._id}}">\n                    {{zone.display_name}}\n                </md-option>\n            </md-select>\n        </md-input-container>\n\n    </div>\n    <md-divider></md-divider>\n    <div flex class="button-create" layout="row" layout-align="center center">\n        <md-button class="md-raised md-primary" ng-click="create()" ng-disabled="!sensor_grid.zone">Create Sensor Grid</md-button>\n    </div>\n</md-content>\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/_sensor_grid/list.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n\n        <md-input-container md-no-float class="md-block" flex> \n            <md-icon  md-font-icon="mdi-magnify" class="mdi"></md-icon>             \n            <input type="text" ng-model="searchObject.text" placeholder="Filter sensor grids">\n        </md-input-container>\n\n        <md-button class="md-icon-button" aria-label="More" flex="5" ng-click="create()">\n            <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<md-content layout-padding layout="column" md-theme="smartTheme" class="list">\n\n    <md-list  ng-cloak class="list-content">\n        <div ng-repeat="sensor_grid in sensor_grids| search:\'display_name\':searchObject">\n            <div  layout="row">\n                <md-list-item  ng-click="goToDetail(sensor_grid._id)" flex>\n                    <md-icon  md-font-icon="{{Icon(sensor_grid.display_name)}}" class="mdi list-type-icon"></md-icon>  \n                    <p> {{ sensor_grid.display_name }} </p>\n                  \n\n                </md-list-item>\n\n                <md-button class="md-primary" aria-label="Delete" ng-click="delete(sensor_grid._id)" flex="5">\n                    <i class="mdi mdi-delete"></i>\n                </md-button>\n            </div>\n            <md-divider ng-if="!$last"></md-divider>\n        </div>\n    </md-list>\n\n</md-content>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/_dashboard/_sensor_grid/show.html",'<md-toolbar class="md-whiteframe-1dp" id="main-toolbar">\n    <div class=" toolbar-create md-toolbar-tools" layout="row">\n        <md-button aria-label="Go Back" flex="10" class="button-back" ng-click="goBack()">\n            <i class="mdi mdi-chevron-left"></i>Go Back\n        </md-button>\n        <h2 flex>\n            <span>{{sensor_grid.display_name}}</span>\n        </h2>\n    </div>\n</md-toolbar>\n\n\n<div  class="detail-toolbar md-toolbar-tools" layout="row"layout-align="space-between stretch">\n\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'info\')" ng-class="{\'active\':SelectedIndex===\'info\'}">\n        <span>Info</span>  <i class="mdi mdi-information-outline"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'sensors\')" ng-class="{\'active\':SelectedIndex===\'sensors\'}">\n        <span>Sensors</span>  <i class="mdi mdi-access-point-network"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'location\')" ng-class="{\'active\':SelectedIndex===\'location\'}">\n        <span>Location</span>  <i class="mdi mdi-map-marker"></i>\n    </div>\n    <div flex class="detail-toolbar-item md-button" ng-click="select(\'settings\')" ng-class="{\'active\':SelectedIndex===\'settings\'}">\n        <span>Settings</span>  <i class="mdi mdi-cake"></i>\n    </div>\n\n\n</div>\n\n\n<md-content  ng-switch on="SelectedIndex" class="detail background-theme-orange" layout-padding >\n\n    <div class="detail-info" ng-switch-when="info" layout="column" layout-align="center stretch">\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools" layout="row"  layout-align="start center">\n                    <h3 flex>Communication Center</h3>\n                    <md-button flex="5" ng-click="editable.communication_center=true" ng-if="!editable.communication_center" class="md-primary" aria-label="Start Update communication_center">\n                        <i class="mdi mdi-pencil orange"></i>\n                    </md-button>\n                    <md-button flex="5" ng-click="changeCommunicationCenter()" ng-if="editable.communication_center" class="md-primary" aria-label="Update communication_center">\n                        <span class="orange">Update</span>\n                    </md-button>\n                </div>\n            </md-toolbar>\n            <md-card-content md-theme="smartTheme" layout="row">\n                <md-input-container class="md-block" flex="20">\n                    <label>Device Name</label>\n                    <input ng-model="sensor_grid.device_name" type="text" flex ng-disabled="!editable.communication_center" aria-label="communication_center device name">\n\n                </md-input-container>\n\n                <md-input-container class="md-block" flex flex-offset="10">\n                    <label>Description</label>\n                    <textarea ng-model="sensor_grid.description" ng-disabled="!editable.communication_center" md-maxlength="150" rows="5" md-select-on-focus aria-label="Description"></textarea>\n\n                </md-input-container>\n            </md-card-content>\n        </md-card>\n\n        <md-card class="detail-form" flex>\n            <md-toolbar class="md-whiteframe-1dp">\n                <div class="md-toolbar-tools">\n                    <h3 flex>Credentials</h3>\n\n                </div>\n            </md-toolbar>\n            <md-card-content md-theme="smartTheme">\n                <md-input-container class="md-block" flex>\n                    <label>Client ID</label>\n                    <md-icon md-font-icon="mdi-clipboard-outline" class="mdi copy-icon" title="Copy Client ID" ng-click="copyToClipboard(sensor_grid.client_id)"></md-icon>\n                    <input ng-model="sensor_grid.client_id" type="text" ng-disabled="true" aria-label="client id">\n\n                </md-input-container>\n\n                <md-input-container class="md-icon-float md-icon-right md-block" flex>\n                    <label>Client Secret</label>\n                    <md-icon md-font-icon="mdi-clipboard-outline" class="mdi copy-icon" title="Copy Client Secret" ng-click="copyToClipboard(sensor_grid.client_secret)"></md-icon>\n                    <input ng-model="sensor_grid.client_secret" type="{{show.secret}}"  ng-disabled="true" aria-label="client secret">\n                    <md-icon md-font-icon="mdi-lock" class="mdi copy-icon" title="Show Client Secret" ng-click="showSecret()" ng-if="show.secret===\'password\'"></md-icon>\n                    <md-icon md-font-icon="mdi-reload" class="mdi copy-icon" title="Reload Client Secret" ng-if="show.secret===\'text\'" ng-click="reloadSecret()"></md-icon>\n                </md-input-container>\n\n            </md-card-content>\n        </md-card>\n\n    </div>\n\n    <div class="detail-settings md-whiteframe-1dp" ng-switch-when="settings" layout="column" md-theme="smartTheme">\n\n        <div layout="row" flex class="input-create">\n            <div  flex="20"  flex-offset="5">\n                <h3>Display Name</h3>\n\n            </div>\n\n            <md-input-container flex="50" flex-offset="10">\n                <input ng-model="sensor_grid.display_name" aria-label="Display Name" ng-disabled="!editable.display_name">\n            </md-input-container>\n            <div flex="10" layout="row" layout-align="center center">\n                <md-button flex ng-click="editable.display_name=true" ng-if="!editable.display_name" class="md-primary" aria-label="Start Update display_name">\n                    <i class="mdi mdi-pencil orange"></i>\n                </md-button>\n                <md-button flex ng-click="changeDisplayName()" ng-if="editable.display_name" class="md-primary" aria-label="Update display_name">\n                    <span class="orange">Update</span>\n                </md-button>\n            </div>\n\n\n        </div>\n        <md-divider ></md-divider>\n        <div layout="row" flex class="input-create">\n            <div  flex="20"  flex-offset="5">\n                <h3>Zone Location</h3>\n\n            </div>\n\n            <md-input-container flex="30" flex-offset="20" class="select">\n                <label>Select Zone</label>\n                <md-select ng-model="sensor_grid.zone" ng-disabled="!editable.zone">\n                    <md-option ng-repeat="zone in zones" value="{{zone._id}}">\n                        {{zone.display_name}}\n                    </md-option>\n                </md-select>\n            </md-input-container>\n            <div flex="10" layout="row" layout-align="center center">\n                <md-button flex ng-click="editable.zone=true" ng-if="!editable.zone" class="md-primary" aria-label="Start Update zone">\n                    <i class="mdi mdi-pencil orange"></i>\n                </md-button>\n                <md-button flex ng-click="changeZone()" ng-if="editable.zone" class="md-primary" aria-label="Update zone">\n                    <span class="orange">Update</span>\n                </md-button>\n            </div>\n\n\n        </div>\n\n        <md-divider ></md-divider>\n        <div layout="row" flex class="input-create">\n            <div  flex="20"  flex-offset="5">\n                <h3>Allow Access</h3>\n\n            </div>\n            <md-switch flex="30" class="select" ng-model="editable.haveAccess" aria-label="Allow Access" ng-change="allowAccess()">\n            </md-switch>\n\n\n\n        </div>\n\n    </div>\n\n    <div class="detail-location md-whiteframe-1dp" ng-switch-when="location" layout="column" md-theme="smartTheme">\n\n        <div layout="row" flex>\n\n            <span class="location" flex="10">\n                <i class="mdi mdi-crosshairs-gps" ng-click="editable.location&&getCurrentLocation()"></i>\n            </span>\n\n            <md-input-container flex>\n                <label>Latitude</label>\n                <input input="text" ng-model="sensor_grid.location[1]" ng-disabled="!editable.location">\n            </md-input-container>\n            <md-input-container flex>\n                <label>Longitude</label>\n                <input input="text" ng-model="sensor_grid.location[0]" ng-disabled="!editable.location">\n            </md-input-container>\n\n            <div flex="10" layout="row" layout-align="center center">\n                <md-button flex ng-click="editable.location=true" ng-if="!editable.location" class="md-primary" aria-label="Start Update location">\n                    <i class="mdi mdi-pencil orange"></i>\n                </md-button>\n                <md-button flex ng-click="changeLocation()" ng-if="editable.location" class="md-primary" aria-label="Update location">\n                    <span class="orange">Update</span>\n                </md-button>\n            </div>\n\n        </div>\n        <ng-map center="{{editable.center|reverse}}">\n            <marker position="{{(sensor_grid.location| reverse)||\'[40.74, -74.18]\'}}" title="drag me" draggable="{{editable.location}}"></marker>\n        </ng-map>\n\n    </div>\n\n    <div class="detail-sensors-list" ng-switch-when="sensors" layout="column" md-theme="smartTheme">\n\n        <div class="md-whiteframe-1dp detail-content">\n            <md-button class="md-fab button-add" aria-label="Add sensor" ng-click="createSensor()">\n                <md-icon md-font-icon="mdi-plus" class="mdi"></md-icon>\n            </md-button>\n            <md-list  ng-cloak class="list-content">\n                <div ng-repeat="sensor in sensors | orderBy:\'-\'">\n                    <div  layout="row">\n                        <md-list-item  ng-click="goToSensorDetail(sensor._id)" flex="75">\n                            <md-icon  md-font-icon="{{Icon(sensor.display_name)}}" class="mdi list-type-icon"></md-icon> \n                            <p> {{ sensor.display_name }} </p>\n\n\n                        </md-list-item>\n\n                        <md-button class="md-primary" aria-label="Delete" ng-click="deleteSensor(sensor._id)" flex="5">\n                            <i class="mdi mdi-delete"></i>\n                        </md-button>\n                    </div>\n                    <md-divider ng-if="!$last"></md-divider>\n                </div>\n                <md-list-item ng-if="sensors.length===0">\n                    No Sensors\n                </md-list-item>\n            </md-list>\n        </div>\n    </div>\n</md-content>')}])}(),angular.module("Application").directive("uiTitle",["$rootScope",function(n){return{restrict:"E",compile:function(e){var t=e[0].innerText;n.titleMain=t,e.attr("class","hide"),e.empty()}}}]),angular.module("Application").filter("nofirst",function(){return function(n){return n?n.slice(1):""}}),angular.module("Application").filter("search",function(){return function(n,e,t){var a=t.text,i=n;if(n&&""!==a){var o=new RegExp("^"+a.toLowerCase(),"g");i=n.filter(function(n){var t=n[e].toLowerCase(),a=o.test(t);return a})}return i}}),angular.module("Application").filter("reverse",function(){return function(n){var e=n;return e&&(e=_.clone(n).reverse()),e}}),angular.module("Application").filter("reverse2d",function(){return function(n){var e=n;return e&&(e=_.clone(n).map(function(n){return n.reverse()})),e}}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,e){return{env:-1==e.absUrl().indexOf("localhost")?"prod":"dev",prod:{protocol:"https",host:"smart-town-db.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5060",root:"api"},getApiPath:function(n){var e=this[this.env];return e.protocol+"://"+e.host+(""!==e.port?":"+e.port:"")+"/"+e.root+"/"+n},rest:function(e,t,a){var i=n(this.getApiPath(e),a||{},t||{});return i}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,e){return{request:function(n){n.headers=n.headers||{};var e=getLocal("user");return!n.headers.Authorization&&e&&(n.headers.Authorization=e),n},requestError:function(e){return n.reject(e)},response:function(e){return"ERROR"===e.data.status?n.reject(e):e||n.when(e)},responseError:function(t){return 403===t.status?(console.error("Error de acceso"),localStorage.user="",void e.path("/")):n.reject(t)}}}]),angular.module("Application").factory("MagnitudeService",["ApiService",function(n){return{base:"magnitude",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},byId:{method:"GET",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id"}}})},DisplayName:function(){return n.rest(this.base+"/:id/display_name",{set:{method:"PUT",params:{id:"@id"}}})},Type:function(){return n.rest(this.base+"/:id/type",{set:{method:"PUT",params:{id:"@id"}}})},DigitalUnits:function(){return n.rest(this.base+"/:id/digital",{set:{method:"PUT",params:{id:"@id"}}})},AnalogUnits:function(){return n.rest(this.base+"/:id/analog/:analog_id",{"new":{method:"POST",params:{id:"@id"}},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id",analog_id:"@analog_id"}}})},Conversions:function(){return n.rest(this.base+"/:id/conversion/:conversion_id",{"new":{method:"POST",params:{id:"@id"}},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id",conversion_id:"@conversion_id"}}})}}}]),angular.module("Application").factory("OAuthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base+"/login",{_:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{_:{method:"GET",params:{}}})},whoiam:function(){return n.rest(this.base+"/whoiam",{_:{method:"GET",params:{}}})},DisplayName:function(){return n.rest(this.base+"/display_name",{set:{method:"PUT",params:{}}})},Email:function(){return n.rest(this.base+"/email",{set:{method:"PUT",params:{}}})},Password:function(){return n.rest(this.base+"/password",{set:{method:"PUT",params:{}}})},Basic:function(){return n.rest(this.base,{del:{method:"DELETE",params:{}}})},Invite:function(){return n.rest(this.base+"/invite",{set:{method:"POST",params:{}}})},Invitation:function(){return n.rest(this.base+"/invitation/:code",{check:{method:"GET",params:{code:"@code"}},set:{method:"POST",params:{}}})}}}]),angular.module("Application").factory("RequestService",["$rootScope",function(n){return{Error:function(){return function(e){n.showSimpleToast(e.data.error)}},OneDataByKey:function(e,t){return function(a){if(!a.data)return n.showSimpleToast("No data");var i=a.data[e];return i?void t(i):n.showSimpleToast("No Values")}},Message:function(e){return function(t){return t.message?(n.showSimpleToast(t.message),void(e&&e())):n.showSimpleToast("Successful: No Message")}},Data:function(e){return function(t){if(!t.data)return n.showSimpleToast("No data");var a=t.data;e(a)}},InternalError:function(e){return function(){n.showSimpleToast(e)}}}}]),angular.module("Application").factory("SensorGridService",["ApiService",function(n){return{base:"sensor_grid",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},byId:{method:"GET",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id"}}})},Secret:function(){return n.rest(this.base+"/:id/secret",{reload:{method:"GET",params:{id:"@id"}}})},CommunicationCenter:function(){return n.rest(this.base+"/:id/communication_center",{set:{method:"PUT",params:{id:"@id"}}})},DisplayName:function(){return n.rest(this.base+"/:id/display_name",{set:{method:"PUT",params:{id:"@id"}}})},Zone:function(){return n.rest(this.base+"/:id/zone",{set:{method:"PUT",params:{id:"@id"}}})},Access:function(){return n.rest(this.base+"/:id/access",{allow:{method:"GET",params:{id:"@id"}}})},Location:function(){return n.rest(this.base+"/:id/location",{set:{method:"PUT",params:{id:"@id"}}})},Sensors:function(){return n.rest(this.base+"/:id/sensors/:sensor_id",{all:{method:"GET",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id",sensor_id:"@sensor_id"}}})}}}]),angular.module("Application").factory("SensorService",["ApiService",function(n){return{base:"sensor",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},byId:{method:"GET",params:{id:"@id"}}})},Transmissor:function(){return n.rest(this.base+"/:id/transmissor",{set:{method:"PUT",params:{id:"@id"}}})},DisplayName:function(){return n.rest(this.base+"/:id/display_name",{set:{method:"PUT",params:{id:"@id"}}})},Magnitude:function(){return n.rest(this.base+"/:id/magnitude",{set:{method:"PUT",params:{id:"@id"}}})}}}]),angular.module("Application").factory("TaskService",["ApiService",function(n){return{base:"task",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},save:{method:"PUT",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id"}}})}}}]),angular.module("Application").factory("ThemeService",["$rootScope",function(n){return{Content:function(n,e){var t=document.getElementById("content");t&&(t.classList.add(e),n.$on("$destroy",function(){t.classList.remove(e)}))}}}]),angular.module("Application").factory("ZoneService",["ApiService",function(n){return{base:"zone",Basic:function(){return n.rest(this.base+"/:id",{"new":{method:"POST",params:{}},all:{method:"GET",params:{}},byId:{method:"GET",params:{id:"@id"}},del:{method:"DELETE",params:{id:"@id"}}})},DisplayName:function(){return n.rest(this.base+"/:id/display_name",{set:{method:"PUT",params:{id:"@id"}}})},Description:function(){return n.rest(this.base+"/:id/description",{set:{method:"PUT",params:{id:"@id"}}})},Keywords:function(){return n.rest(this.base+"/:id/keywords",{set:{method:"PUT",params:{id:"@id"}}})},Shape:function(){return n.rest(this.base+"/:id/shape",{set:{method:"PUT",params:{id:"@id"}}})}}}]),angular.module("Application").controller("DashboardCtrl",["$scope","$rootScope","SensorGridService","ThemeService","RequestService",function(n,e,t,a,i){a.Content(n,"background-theme-orange"),n.go=function(t,a){e.goWithDestroy(n,t,a)},n.create=function(){e.go("application.dashboard.create")},n.searchObject={text:""};var o=["carrot","apple-safari","barley","black-mesa","bone","bug","food-fork-drink"];n.Icon=function(n){var e=n.charCodeAt(0)%o.length;return"mdi-"+o[e]},n["delete"]=function(e){t.Basic().del({id:e},i.Data(function(e){n.sensor_grids=e}),i.Error())},n.goToDetail=function(e){n.go("application.dashboard.detail",{id:e})},this.All=function(){t.Basic().all(i.Data(function(e){n.sensor_grids=e}),i.Error())},this.All()}]),angular.module("Application").controller("MagnitudesCtrl",["$scope","$rootScope","MagnitudeService","RequestService","ThemeService",function(n,e,t,a,i){i.Content(n,"background-theme-orange"),n.go=function(t,a){e.goWithDestroy(n,t,a)},n.create=function(){e.go("application.magnitudes.create")};var o=["ANALOG","DIGITAL"],l=["record","adjust"];n.searchObject={text:""},n.Icon=function(n){return"mdi-"+l[n]},n.Type=function(n){return o[n]},n["delete"]=function(e){t.Basic().del({id:e},a.Data(function(e){n.magnitudes=e}),a.Error())},n.goToDetail=function(e){n.go("application.magnitudes.detail",{id:e})},this.All=function(){t.Basic().all(a.Data(function(e){n.magnitudes=e}),a.Error())},this.All()}]),angular.module("Application").controller("CreateMagnitudeCtrl",["$rootScope","$scope","MagnitudeService","RequestService",function(n,e,t,a){e.goBack=function(){n.go("application.magnitudes.list")},e.magnitude={display_name:"",type:"0"},e.create=function(){var n=angular.copy(e.magnitude);""==n.display_name&&(n.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),t.Basic()["new"](n,a.Message(e.goBack),a.Error())}}]),angular.module("Application").controller("DetailMagnitudeCtrl",["$rootScope","$scope","$stateParams","$mdDialog","MagnitudeService","RequestService","ThemeService",function(n,e,t,a,i,o,l){l.Content(e,"background-theme-orange"),e.go=function(t,a){n.goWithDestroy(e,t,a)},e.goBack=function(){e.go("application.magnitudes.list")};var r=t.id;e.Digital=function(){return e.magnitude?"1"===e.magnitude.type:!1},e.editable={name:!1,type:!1,digital_units:!1};var s=["info","units","conversions"];e.SelectedIndex=s.indexOf(t.tab)>-1?t.tab:"info",e.select=function(t){e.magnitude.type&&("conversions"!==t&&1!==e.magnitude.type||"conversions"==t&&0==e.magnitude.type)&&n.go("application.magnitudes.detail",{id:r,tab:t})},e.changeDisplayName=function(){i.DisplayName().set({id:r},{display_name:e.magnitude.display_name},o.Data(function(n){e.magnitude=n,e.editable.name=!1}),o.Error())},e.changeType=function(){i.Type().set({id:r},{type:e.magnitude.type},o.Data(function(n){e.magnitude=n,e.editable.type=!1}),o.Error())},e.changeDigitalUnits=function(){i.DigitalUnits().set({id:r},{digital_units:e.magnitude.digital_units},o.Data(function(n){e.magnitude=n,e.editable.digital_units=!1}),o.Error())},e.addAnalogUnit=function(){var n=e.magnitude.analog_units.length,t={display_name:"Unit"+n};i.AnalogUnits()["new"]({id:r},{analog_unit:t},o.Data(function(t){e.magnitude=t,e.magnitude.analog_units[n].editable=!0}),o.Error())},e.updateAnalogUnit=function(n,t){i.AnalogUnits().update({id:r},{analog_unit:n},o.Data(function(n){e.magnitude=n,e.magnitude.analog_units[t].editable=!1}),o.Error())},e.deleteAnalogUnit=function(n){i.AnalogUnits()["delete"]({id:r,analog_id:n._id},o.Data(function(n){e.magnitude=n}),o.Error())};var d=function(n,t,i){a.show({controller:["$scope","$mdDialog","conversion","units",function(n,e,t,a){n.conversion=t,n.units=a,n.errors={unitsEmpty:!1,unitsEquals:!1,DisplayNameEmpty:!1},n.hide=function(){e.hide()},n.cancel=function(){e.cancel()};var i=function(){return Object.keys(n.errors).forEach(function(e){n.errors[e]=!1}),n.errors.DisplayNameEmpty=""===n.conversion.display_name,n.errors.unitsEmpty=!n.conversion.unitA||""===n.conversion.unitA||!n.conversion.unitB||""===n.conversion.unitB,n.errors.unitsEquals=n.conversion.unitA===n.conversion.unitB,Object.keys(n.errors).reduce(function(e,t){return e||n.errors[t]},!1)};n.confirm=function(){i()||e.hide(n.conversion)}}],templateUrl:"/views/_application/_magnitudes/conversion.html",parent:angular.element(document.body),targetEvent:n,clickOutsideToClose:!0,locals:{conversion:t,units:e.magnitude.analog_units}}).then(i)};e.addConversion=function(n){var t=e.magnitude.conversions.length,a={display_name:"Conversion"+t};d(n,a,function(n){i.Conversions()["new"]({id:r},{conversion:n},o.Data(function(n){e.magnitude=n}),o.Error())})},e.updateConversion=function(n,t){d(n,t,function(n){i.Conversions().update({id:r},{conversion:n},o.Data(function(n){e.magnitude=n}),o.Error())})},e.deleteConversion=function(n){i.Conversions()["delete"]({id:r,conversion_id:n._id},o.Data(function(n){e.magnitude=n}),o.Error())},e.getUnitName=function(n){return _.find(e.magnitude.analog_units,function(e){return e._id===n}).display_name},this.MagnitudeById=function(){i.Basic().byId({id:r},o.Data(function(n){e.magnitude=n}),o.Error())},this.MagnitudeById()}]),angular.module("Application").controller("TasksCtrl",["$scope","$rootScope","TaskService","ThemeService","RequestService",function(n,e,t,a,i){var o=this;a.Content(n,"background-theme-orange"),n.go=function(t,a){e.goWithDestroy(n,t,a)},n.searchObject={text:""},n.create=function(){var e=n.tasks.length,a={display_name:"Task"+e};t.Basic()["new"](a,i.Message(o.All),i.Error())},n.update=function(e,a){console.log(n.tasks[a]),t.Basic().save({id:e._id},e,i.Data(function(e){n.tasks[a]=e,console.log(n.tasks[a])}),i.Error())},n["delete"]=function(e){t.Basic().del({id:e},i.Data(function(e){n.tasks=e}),i.Error())},this.All=function(){t.Basic().all(i.Data(function(e){n.tasks=e}),i.Error())},this.All()}]),angular.module("Application").controller("ZonesCtrl",["$scope","$rootScope","ThemeService","ZoneService","RequestService",function(n,e,t,a,i){t.Content(n,"background-theme-orange"),n.go=function(t,a){e.goWithDestroy(n,t,a)},n.searchObject={text:""};var o={rectangle:"apple-finder",circle:"arrow-down-bold-circle-outline",polygon:"arrow-down-bold-hexagon-outline"};n.Icon=function(n){return"mdi-"+o[n]},n.goToDetail=function(e){n.go("application.zones.detail",{id:e})},n.create=function(){e.go("application.zones.create")},n["delete"]=function(e){a.Basic().del({id:e},i.Data(function(e){n.zones=e}),i.Error())},this.All=function(){a.Basic().all(i.Data(function(e){n.zones=e}),i.Error())},this.All()}]),angular.module("Application").controller("CreateZoneCtrl",["$scope","$rootScope","NgMap","ZoneService","RequestService",function(n,e,t,a,i){var o=this;n.self=o,n.goBack=function(){e.go("application.zones.list")},n.newShape=!0,n.zone={display_name:"",center:[],shape:{type:"rectangle"}},n.setShape=function(e){n.zone.shape={type:e},n.newShape=!0},t.getMap().then(function(e){o.centerChanged=function(t){n.$$phase||n.$apply(function(){n.zone.center[0]=e.center.lat(),n.zone.center[1]=e.center.lng()})},o.onMapOverlayCompleted=function(e){n.newShape=!1;var t=e.type,a=e.overlay,i={type:t};switch(t){case"rectangle":var o=a.getBounds(),l=o.getNorthEast(),r=o.getSouthWest();i.bounds=[[r.lat(),r.lng()],[l.lat(),l.lng()]];break;case"circle":i.radius=a.getRadius();var s=a.getCenter();i.center=[s.lat(),s.lng()];break;case"polygon":i.paths=a.getPath().j.map(function(n){return[n.lat(),n.lng()]})}e.overlay.setMap(null),n.$apply(function(){n.zone.shape=i})},o.trackPolygon=function(){var t=e.shapes.polygon;t.getPaths().forEach(function(e){google.maps.event.addListener(e,"insert_at",function(){n.$apply(function(){n.zone.shape.paths=t.getPath().j.map(function(n){return[n.lat(),n.lng()]})})}),google.maps.event.addListener(e,"remove_at",function(){n.$apply(function(){n.zone.shape.paths=t.getPath().j.map(function(n){return[n.lat(),n.lng()]})})}),google.maps.event.addListener(e,"set_at",function(){n.$apply(function(){n.zone.shape.paths=t.getPath().j.map(function(n){return[n.lat(),n.lng()]})})})})},o.changeCenterCircle=function(e){n.$apply(function(){var t=e.latLng;n.zone.shape.center=[t.lat(),t.lng()]})},o.changeCircleRadius=function(t){var a=e.shapes.circle;n.$$phase||n.$apply(function(){n.zone.shape.radius=a.getRadius()})},o.changeRectangle=function(){var t=e.shapes.rectangle,a=t.getBounds(),i=a.getNorthEast(),o=a.getSouthWest();n.$$phase||n.$apply(function(){n.zone.shape.bounds=[[o.lat(),o.lng()],[i.lat(),i.lng()]]})}}),n.getCurrentLocation=function(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(e){n.$apply(function(){n.zone.center[0]=e.coords.latitude,n.zone.center[1]=e.coords.longitude})})},n.create=function(){var e=angular.copy(n.zone);""==e.display_name&&(e.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),e.center=reverse(e.center),e.shape.center=reverse(e.shape.center),e.shape.bounds=reverse2d(e.shape.bounds),e.shape.paths=reverse2d(e.shape.paths),a.Basic()["new"](e,i.Message(n.goBack),i.Error())},n.getCurrentLocation()}]),angular.module("Application").controller("DetailZoneCtrl",["$rootScope","$scope","$stateParams","ZoneService","RequestService","ThemeService","NgMap",function(n,e,t,a,i,o,l){var r=this;e.self=r,o.Content(e,"background-theme-orange"),e.go=function(t,a){n.goWithDestroy(e,t,a)},e.goBack=function(){e.go("application.zones.list")};var s=t.id,d=["info","location"];e.SelectedIndex=d.indexOf(t.tab)>-1?t.tab:"info",e.select=function(e){n.go("application.zones.detail",{id:s,tab:e})},e.editable={display_name:!1,description:!1,keywords:!1,location:!1},e.newShape=!1,e.changeDisplayName=function(){a.DisplayName().set({id:s},{display_name:e.zone.display_name},i.Data(function(n){e.zone=n,e.editable.display_name=!1}),i.Error())},e.changeDescription=function(){a.Description().set({id:s},{description:e.zone.description},i.Data(function(n){e.zone=n,e.editable.description=!1}),i.Error())},e.changeKeywords=function(){a.Keywords().set({id:s},{keywords:e.zone.keywords},i.Data(function(n){e.zone=n,e.editable.keywords=!1}),i.Error())},l.getMap().then(function(n){r.centerChanged=function(t){!e.$$phase&&e.editable.location&&e.$apply(function(){e.zone.center[0]=n.center.lat(),e.zone.center[1]=n.center.lng();
})},r.onMapOverlayCompleted=function(n){e.newShape=!1;var t=n.type,a=n.overlay,i={type:t};switch(t){case"rectangle":var o=a.getBounds(),l=o.getNorthEast(),r=o.getSouthWest();i.bounds=[[r.lat(),r.lng()],[l.lat(),l.lng()]];break;case"circle":i.radius=a.getRadius();var s=a.getCenter();i.center=[s.lat(),s.lng()];break;case"polygon":i.paths=a.getPath().j.map(function(n){return[n.lat(),n.lng()]})}n.overlay.setMap(null),e.$apply(function(){e.zone.shape=i})},r.getMap=function(){return n}}),e.setShape=function(n){e.zone.shape={type:n},e.newShape=!0},e.changeLocation=function(){var n=e.zone.shape,t=r.getMap().shapes;switch(n.type){case"rectangle":var o=t.rectangle,l=o.getBounds(),d=l.getNorthEast(),c=l.getSouthWest();n.bounds=[[c.lat(),c.lng()],[d.lat(),d.lng()]];break;case"circle":var m=t.circle;n.radius=m.getRadius();var u=m.getCenter();n.center=[u.lat(),u.lng()];break;case"polygon":var p=t.polygon;n.paths=p.getPath().j.map(function(n){return[n.lat(),n.lng()]})}var g=angular.copy(e.zone);g.center=reverse(g.center),g.shape.center=reverse(g.shape.center),g.shape.bounds=reverse2d(g.shape.bounds),g.shape.paths=reverse2d(g.shape.paths),a.Shape().set({id:s},{shape:g.shape,center:g.center},i.Data(function(n){e.zone=n,e.zone.center=reverse(g.center),e.zone.shape.center=reverse(g.shape.center),e.zone.shape.bounds=reverse2d(g.shape.bounds),e.zone.shape.paths=reverse2d(g.shape.paths),e.editable.location=!1}),i.Error())},e.updateLocation=function(){e.editable.location=!0;var n=e.zone.shape;switch(n.type){case"circle":n.radius&&n.center?0!=n.radius&&0!=n.center.length||(e.newShape=!0):e.newShape=!0;break;case"rectangle":n.bounds?0==n.bounds.length&&(e.newShape=!0):e.newShape=!0;break;case"polygon":n.paths?0==n.paths.length&&(e.newShape=!0):e.newShape=!0}},e.getCurrentLocation=function(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(n){e.$apply(function(){e.zone.center[0]=n.coords.latitude,e.zone.center[1]=n.coords.longitude})})},this.ZoneById=function(){a.Basic().byId({id:s},i.Data(function(n){var t=n;t.center=reverse(t.center),t.shape.center=reverse(t.shape.center),t.shape.bounds=reverse2d(t.shape.bounds),t.shape.paths=reverse2d(t.shape.paths),e.zone=t}),i.Error())},this.ZoneById()}]),angular.module("Application").controller("CreateSensorCtrl",["$rootScope","$scope","$stateParams","SensorService","RequestService","MagnitudeService",function(n,e,t,a,i,o){var l;if(t.sensor_grid)var l=t.sensor_grid;else n.go("application.dashboard.list");e.goBack=function(){n.go("application.dashboard.detail",{id:l})},e.sensor={display_name:""},e.setMagnitude=function(){e.sensor.magnitude=e.SelectedMagnitude._id,delete e.sensor.unit},this.AllMagnitudes=function(){o.Basic().all(i.Data(function(n){e.magnitudes=n}),i.Error())},this.AllMagnitudes(),e.create=function(){var n=angular.copy(e.sensor);""==n.display_name&&(n.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),n.sensor_grid=l,a.Basic()["new"](n,i.Message(e.goBack),i.Error())}}]),angular.module("Application").controller("DetailSensorCtrl",["$rootScope","$scope","$stateParams","SensorService","RequestService","ThemeService","clipboard","MagnitudeService",function(n,e,t,a,i,o,l,r){var s=this;o.Content(e,"background-theme-orange"),e.go=function(t,a){n.goWithDestroy(e,t,a)};var d=t.id;e.goBack=function(){e.go("application.dashboard.detail",{id:e.sensor.sensor_grid})};var c=["info","settings"];e.SelectedIndex=c.indexOf(t.tab)>-1?t.tab:"info",e.select=function(e){n.go("application.sensor.detail",{id:d,tab:e})},e.copyToClipboard=function(n){l.copyText(n)},e.editable={transmissor:!1,display_name:!1,magnitude:!1},e.changeTransmissor=function(){var n=_.pick(e.sensor,["device_name","description"]);a.Transmissor().set({id:d},n,i.Data(function(n){e.sensor=n,e.editable.transmissor=!1}),i.Error())},e.changeDisplayName=function(){var n=_.pick(e.sensor,["display_name"]);a.DisplayName().set({id:d},n,i.Data(function(n){e.sensor=n,e.editable.display_name=!1}),i.Error())},e.onChangeSelectedMagnitude=function(){e.sensor.unit="",s.setSelectedMagnitude()},this.setSelectedMagnitude=function(){e.SelectedMagnitude=_.find(e.magnitudes,function(n){return n._id===e.sensor.magnitude})},this.AllMagnitudes=function(){r.Basic().all(i.Data(function(n){e.magnitudes=n,s.setSelectedMagnitude()}),i.Error())},e.changeMagnitude=function(){var n=_.pick(e.sensor,["magnitude","unit","is_raw_data","raw_conversion"]);a.Magnitude().set({id:d},n,i.Data(function(n){e.sensor=n,e.editable.magnitude=!1,s.setSelectedMagnitude()}),i.Error())},this.SensorGridById=function(){a.Basic().byId({id:d},i.Data(function(n){e.sensor=n,s.AllMagnitudes()}),i.Error())},this.SensorGridById()}]),angular.module("Application").controller("CreateSensorGridCtrl",["$rootScope","$scope","SensorGridService","ZoneService","RequestService",function(n,e,t,a,i){e.goBack=function(){n.go("application.dashboard.list")},e.sensor_grid={display_name:""},e.create=function(){var n=angular.copy(e.sensor_grid);""==n.display_name&&(n.display_name=chance.sentence({words:3}).split(" ").join("").replace(".","")),t.Basic()["new"](n,i.Message(e.goBack),i.Error())},this.ZoneAll=function(){a.Basic().all(i.Data(function(n){e.zones=n}),i.Error())},this.ZoneAll()}]),angular.module("Application").controller("DetailSensorGridCtrl",["$rootScope","$scope","$stateParams","SensorGridService","ZoneService","RequestService","ThemeService","clipboard","NgMap",function(n,e,t,a,i,o,l,r,s){var d=this;l.Content(e,"background-theme-orange"),e.go=function(t,a){n.goWithDestroy(e,t,a)},e.goBack=function(){e.go("application.dashboard.list")};var c=t.id,m=["info","sensors","location","settings"];e.SelectedIndex=m.indexOf(t.tab)>-1?t.tab:"info",e.select=function(e){n.go("application.dashboard.detail",{id:c,tab:e})},e.editable={communication_center:!1,display_name:!1,zone:!1,haveAccess:!1,location:!1,center:null},e.show={secret:"password"},e.showSecret=function(){e.show.secret="text"},e.reloadSecret=function(){a.Secret().reload({id:c},o.Data(function(n){e.sensor_grid=n,e.show.secret="password"}),o.Error())},e.changeCommunicationCenter=function(){var n=_.pick(e.sensor_grid,["device_name","description"]);a.CommunicationCenter().set({id:c},n,o.Data(function(n){e.sensor_grid=n,e.editable.communication_center=!1}),o.Error())},e.copyToClipboard=function(n){r.copyText(n)},e.changeDisplayName=function(){var n=_.pick(e.sensor_grid,["display_name"]);a.DisplayName().set({id:c},n,o.Data(function(n){e.sensor_grid=n,e.editable.display_name=!1}),o.Error())},e.changeZone=function(){var n=_.pick(e.sensor_grid,["zone"]);a.Zone().set({id:c},n,o.Data(function(n){e.sensor_grid=n,e.editable.zone=!1}),o.Error())},e.allowAccess=function(){a.Access().allow({id:c},o.Data(function(n){e.sensor_grid=n,e.editable.haveAccess=u()}),o.Error())};var u=function(){return void 0!==e.sensor_grid.client_secret&&""!==e.sensor_grid.client_secret};e.getCurrentLocation=function(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(n){e.$apply(function(){e.sensor_grid.location[1]=n.coords.latitude,e.sensor_grid.location[0]=n.coords.longitude,e.editable.center=_.clone(e.sensor_grid.location)})})},s.getMap().then(function(n){var t=n.markers[0];t.addListener("dragend",function(){var n=t.getPosition();e.$apply(function(){e.sensor_grid.location[1]=n.lat(),e.sensor_grid.location[0]=n.lng()})})}),e.changeLocation=function(){var n=_.pick(e.sensor_grid,["location"]);a.Location().set({id:c},n,o.Data(function(n){e.sensor_grid=n,e.editable.location=!1}),o.Error())},e.createSensor=function(){e.go("application.sensor.create",{sensor_grid:c})};var p=["album","barcode","airballoon","binoculars","bulletin-board","cat","chemical-weapon","cookie","emoticon-poop","fire"];e.Icon=function(n){var e=n.charCodeAt(0)%p.length;return"mdi-"+p[e]},e.deleteSensor=function(n){a.Sensors().del({id:c,sensor_id:n},d.SensorsAll,o.Error())},e.goToSensorDetail=function(e){n.go("application.sensor.detail",{id:e})},this.SensorsAll=function(){a.Sensors().all({id:c},o.Data(function(n){e.sensors=n}),o.Error())},this.SensorsAll(),this.ZoneAll=function(){i.Basic().all(o.Data(function(n){e.zones=n}),o.Error())},this.ZoneAll(),this.SensorGridById=function(){a.Basic().byId({id:c},o.Data(function(n){e.sensor_grid=n,e.editable.haveAccess=u();var t=e.sensor_grid.location;void 0==e.sensor_grid.location||t&&0==t.length?(void 0==e.sensor_grid.location&&(e.sensor_grid.location=[]),e.getCurrentLocation()):e.editable.center=_.clone(e.sensor_grid.location)}),o.Error())},this.SensorGridById()}]);
//# sourceMappingURL=data:application/json;base64,
