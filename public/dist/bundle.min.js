var app=angular.module("Application",["ui.router","ngResource","ngMessages","ngMaterial","ngStorage","sc.twemoji"]);angular.module("Application").run(["$rootScope","$state","$mdToast",function(n,o,e){n.go=function(n,e){o.go(n,e)},n.showSimpleToast=function(n){e.show(e.simple().textContent(n).position("top right").hideDelay(3e3))}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$localStorageProvider","$mdThemingProvider","twemojiProvider",function(n,o,e,t,r,i){n.state("login",{url:"/login",onEnter:["$rootScope",function(n){t.get("user")&&n.go("application")}],templateUrl:"/views/_login/main.html",controller:"LoginCtrl"}).state("application",{url:"/",onEnter:["$rootScope",function(n){t.get("user")||n.go("login")}],templateUrl:"/views/_application/main.html",controller:"ApplicationCtrl"}),o.otherwise("/login"),e.interceptors.push("AuthInterceptor"),r.theme("loginTheme").primaryPalette("orange").accentPalette("yellow"),i.setOptions({size:"72x72"})}]),angular.module("Application").controller("ApplicationCtrl",function(){}),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","$localStorage","OAuthService","RequestService",function(n,o,e,t,r){o.user={email:"",password:""},o.login=function(){var i=o.user;""!==i.email&&i.password&&t.login()._(i,r.OneData("token",function(o){e.user=o,n.go("application")}),r.Error())}}]),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_application/main.html",'<header>\n    <h1>Hello!</h1>\n</header>\n<main>\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit quam pariatur eligendi sequi accusantium adipisci omnis ad accusamus eum aperiam minima assumenda iure, obcaecati alias natus ratione quo facere tempore.</p>\n</main>\n\n<footer>\n    <div layout="row" layout-align="center center">\n        <h5><i class="fa fa-copyright"></i> Smart Town 2016</h5>\n    </div>\n</footer>\n')}])}(),function(n){try{n=angular.module("Application")}catch(o){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/_login/main.html",'\n<div  layout="row" layout-align="center center" layout-fill id="login-body" md-theme="loginTheme">\n\n\n    <div layout="column" flex-gt-md="35" flex-xs="50" flex-gt-xs="50" layout-padding>\n\n        <div layout="row" layout-align="center center">\n            <h2><twemoji>&#x1F3E1;</twemoji><br>Smart Town Administration</h2>\n        </div>\n\n        <md-card layout="row" >\n            <form name="loginForm" flex layout="column" layout-align="center stretch" layout-padding layout-margin>\n                <h3 flex>Log in to your account</h3>\n                <md-input-container  class="md-block" flex>\n                    <label>Email</label>\n\n                    <input type="email" required name="email" ng-model="user.email" ng-pattern="/^.+@.+\\..+$/" >\n                    <div ng-messages="loginForm.email.$error" multiple md-auto-hide="false" ng-if=\'loginForm.email.$dirty\'>\n                        <div ng-message="required">This is required.</div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container   class="md-block" flex>\n                    <label>Password</label>\n\n                    <input ng-model="user.password" type="password" name="password" required>\n                    <div ng-messages="loginForm.password.$error" md-auto-hide="false" ng-if="loginForm.password.$dirty">\n                        <div ng-message="required">This is required.</div>\n                    </div>\n                </md-input-container>\n                <md-input-container layout-align="center center" flex>\n                    <div layout="row" layout-sm="column" layout-margin>\n                        <md-button class="md-raised" type="submit" ng-click="login()" flex flex-sm="100" ng>Login</md-button>\n\n                    </div>\n                </md-input-container>\n\n            </form>\n\n        </md-card>\n\n\n        <div layout="row" layout-align="center center">\n            <h5><i class="fa fa-copyright"></i> Smart Town 2016</h5>\n        </div>\n\n\n    </div>\n\n</div>\n\n\n')}])}(),angular.module("Application").factory("ApiService",["$resource","$location",function(n,o){return{env:-1==o.absUrl().indexOf("localhost")?"prod":"dev",prod:{protocol:"https",host:"smart-town-db.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5060",root:"api"},getApiPath:function(n){var o=this[this.env];return o.protocol+"://"+o.host+(""!==o.port?":"+o.port:"")+"/"+o.root+"/"+n},rest:function(o,e,t){var r=n(this.getApiPath(o),t||{},e||{});return r}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location","$localStorage",function(n,o,e){return{request:function(n){n.headers=n.headers||{};var o=e.user;return!n.headers.Authorization&&o&&(n.headers.Authorization=o.token),n},requestError:function(o){return n.reject(o)},response:function(o){return"ERROR"===o.data.status?n.reject(o):o||n.when(o)},responseError:function(t){return 403===t.status?(console.error("Error de acceso"),e.user="",void o.path("/")):n.reject(t)}}}]),angular.module("Application").factory("OAuthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base+"/login",{_:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{_:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("RequestService",["$rootScope",function(n){return{Error:function(){return function(o){var e=o.data;n.showSimpleToast(e.error)}},OneData:function(o,e){return function(t){if(!t.data)return n.showSimpleToast("No data");var r=t.data[o];return r?void e(r):n.showSimpleToast("No Values")}}}}]);
//# sourceMappingURL=data:application/json;base64,
